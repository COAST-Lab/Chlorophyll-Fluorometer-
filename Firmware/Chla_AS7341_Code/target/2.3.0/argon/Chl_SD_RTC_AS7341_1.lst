
/Users/jessiewynne/Chl_SD_RTC_AS7341_1/target/2.3.0/argon/Chl_SD_RTC_AS7341_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000053c0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d93e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000c8  2003dfd8  000d93e4  0001dfd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000750  2003e0a0  2003e0a0  0002e0a0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d94ac  000d94ac  000294ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d94d4  000d94d4  000294d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0023a677  00000000  00000000  000294d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00020d9f  00000000  00000000  00263b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00032de0  00000000  00000000  002848ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002b98  00000000  00000000  002b76ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000082a8  00000000  00000000  002ba266  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00046528  00000000  00000000  002c250e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0005564e  00000000  00000000  00308a36  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010d28d  00000000  00000000  0035e084  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007d44  00000000  00000000  0046b314  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 feb1 	bl	d8d98 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 feb9 	bl	d8db4 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dfd8 	.word	0x2003dfd8
   d404c:	000d93e4 	.word	0x000d93e4
   d4050:	2003e0a0 	.word	0x2003e0a0
   d4054:	2003e0a0 	.word	0x2003e0a0
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f004 f8a5 	bl	d81b0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d93b8 	.word	0x000d93b8
   d4080:	000d93dc 	.word	0x000d93dc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8e6 	b.w	d4254 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fd9b 	bl	d4bc4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f004 b845 	b.w	d8120 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f003 ba8d 	b.w	d75b4 <malloc>

000d409a <_Znaj>:
   d409a:	f003 ba8b 	b.w	d75b4 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f003 ba91 	b.w	d75c4 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d40b2:	4770      	bx	lr

000d40b4 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40b4:	7c03      	ldrb	r3, [r0, #16]
   d40b6:	f013 0308 	ands.w	r3, r3, #8
   d40ba:	bf1e      	ittt	ne
   d40bc:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   d40be:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   d40c0:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40c2:	2b00      	cmp	r3, #0
  }
   d40c4:	bfac      	ite	ge
   d40c6:	4618      	movge	r0, r3
   d40c8:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   d40cc:	4770      	bx	lr

000d40ce <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   d40ce:	4770      	bx	lr

000d40d0 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d40d0:	b510      	push	{r4, lr}
  }
   d40d2:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d40d4:	4604      	mov	r4, r0
  }
   d40d6:	f004 f943 	bl	d8360 <_ZdlPvj>
   d40da:	4620      	mov	r0, r4
   d40dc:	bd10      	pop	{r4, pc}

000d40de <_ZN4FileD0Ev>:
   d40de:	b510      	push	{r4, lr}
   d40e0:	2134      	movs	r1, #52	; 0x34
   d40e2:	4604      	mov	r4, r0
   d40e4:	f004 f93c 	bl	d8360 <_ZdlPvj>
   d40e8:	4620      	mov	r0, r4
   d40ea:	bd10      	pop	{r4, pc}

000d40ec <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d40ec:	3010      	adds	r0, #16
   d40ee:	f001 bf65 	b.w	d5fbc <_ZN7FatFile4syncEv>

000d40f2 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d40f2:	3010      	adds	r0, #16
   d40f4:	f001 be80 	b.w	d5df8 <_ZN7FatFile4peekEv>

000d40f8 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d40f8:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d40fa:	2201      	movs	r2, #1
   d40fc:	f10d 0107 	add.w	r1, sp, #7
   d4100:	3010      	adds	r0, #16
   d4102:	f001 fdcb 	bl	d5c9c <_ZN7FatFile4readEPvj>
   d4106:	2801      	cmp	r0, #1
   d4108:	bf0c      	ite	eq
   d410a:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d410e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   d4112:	b003      	add	sp, #12
   d4114:	f85d fb04 	ldr.w	pc, [sp], #4

000d4118 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4118:	3010      	adds	r0, #16
   d411a:	f001 bfd9 	b.w	d60d0 <_ZN7FatFile5writeEPKvj>

000d411e <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   d411e:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4120:	2201      	movs	r2, #1
   d4122:	f88d 1007 	strb.w	r1, [sp, #7]
   d4126:	3010      	adds	r0, #16
   d4128:	f10d 0107 	add.w	r1, sp, #7
   d412c:	f001 ffd0 	bl	d60d0 <_ZN7FatFile5writeEPKvj>
  }
   d4130:	b003      	add	sp, #12
   d4132:	f85d fb04 	ldr.w	pc, [sp], #4

000d4136 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4136:	b40e      	push	{r1, r2, r3}
   d4138:	b503      	push	{r0, r1, lr}
   d413a:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d413c:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d413e:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4142:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4144:	f003 fd73 	bl	d7c2e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4148:	b002      	add	sp, #8
   d414a:	f85d eb04 	ldr.w	lr, [sp], #4
   d414e:	b003      	add	sp, #12
   d4150:	4770      	bx	lr
	...

000d4154 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4154:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4156:	4604      	mov	r4, r0
   d4158:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d415a:	7922      	ldrb	r2, [r4, #4]
   d415c:	68a3      	ldr	r3, [r4, #8]
   d415e:	b132      	cbz	r2, d416e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4160:	b9a3      	cbnz	r3, d418c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4162:	490b      	ldr	r1, [pc, #44]	; (d4190 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4164:	b002      	add	sp, #8
   d4166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d416a:	f003 bc4b 	b.w	d7a04 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d416e:	4a09      	ldr	r2, [pc, #36]	; (d4194 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4170:	7b26      	ldrb	r6, [r4, #12]
   d4172:	4d09      	ldr	r5, [pc, #36]	; (d4198 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4174:	4909      	ldr	r1, [pc, #36]	; (d419c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4176:	7b64      	ldrb	r4, [r4, #13]
   d4178:	2e01      	cmp	r6, #1
   d417a:	bf18      	it	ne
   d417c:	4629      	movne	r1, r5
   d417e:	e9cd 1400 	strd	r1, r4, [sp]
   d4182:	4907      	ldr	r1, [pc, #28]	; (d41a0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4184:	f7ff ffd7 	bl	d4136 <_ZN5Print6printfEPKcz>
  }
   d4188:	b002      	add	sp, #8
   d418a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d418c:	4a05      	ldr	r2, [pc, #20]	; (d41a4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d418e:	e7ef      	b.n	d4170 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4190:	000d8f0d 	.word	0x000d8f0d
   d4194:	000d911a 	.word	0x000d911a
   d4198:	000d8f09 	.word	0x000d8f09
   d419c:	000d8f05 	.word	0x000d8f05
   d41a0:	000d8f23 	.word	0x000d8f23
   d41a4:	000d8efc 	.word	0x000d8efc

000d41a8 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d41a8:	b530      	push	{r4, r5, lr}
   d41aa:	b085      	sub	sp, #20
class SPISettings : public Printable {
   d41ac:	4b1b      	ldr	r3, [pc, #108]	; (d421c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   d41ae:	9300      	str	r3, [sp, #0]
   d41b0:	7913      	ldrb	r3, [r2, #4]
   d41b2:	f88d 3004 	strb.w	r3, [sp, #4]
   d41b6:	6893      	ldr	r3, [r2, #8]
   d41b8:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d41ba:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d41be:	8993      	ldrh	r3, [r2, #12]
   d41c0:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d41c4:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d41c6:	460a      	mov	r2, r1
   d41c8:	466b      	mov	r3, sp
   d41ca:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d41ce:	4628      	mov	r0, r5
   d41d0:	f002 fdc2 	bl	d6d58 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   d41d4:	b910      	cbnz	r0, d41dc <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   d41d6:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d41d8:	b005      	add	sp, #20
   d41da:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d41dc:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d41de:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   d41e2:	4628      	mov	r0, r5
   d41e4:	f001 ff20 	bl	d6028 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d41e8:	2101      	movs	r1, #1
   d41ea:	4620      	mov	r0, r4
   d41ec:	f002 fc62 	bl	d6ab4 <_ZN9FatVolume4initEh>
   d41f0:	4601      	mov	r1, r0
   d41f2:	b168      	cbz	r0, d4210 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d41f4:	4621      	mov	r1, r4
   d41f6:	4628      	mov	r0, r5
   d41f8:	f001 fd37 	bl	d5c6a <_ZN7FatFile8openRootEP9FatVolume>
   d41fc:	2800      	cmp	r0, #0
   d41fe:	d0ea      	beq.n	d41d6 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   d4200:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d4204:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4208:	d0e5      	beq.n	d41d6 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   d420a:	4b05      	ldr	r3, [pc, #20]	; (d4220 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   d420c:	601d      	str	r5, [r3, #0]
    return true;
   d420e:	e7e3      	b.n	d41d8 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   d4210:	4620      	mov	r0, r4
   d4212:	f002 fc4f 	bl	d6ab4 <_ZN9FatVolume4initEh>
   d4216:	2800      	cmp	r0, #0
   d4218:	d1ec      	bne.n	d41f4 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   d421a:	e7dc      	b.n	d41d6 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   d421c:	000d91b4 	.word	0x000d91b4
   d4220:	2003e5a8 	.word	0x2003e5a8

000d4224 <_ZN5Print5printItLi0EEEjT_i>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d4224:	b410      	push	{r4}
{
    if (base == 0) {
   d4226:	b92a      	cbnz	r2, d4234 <_ZN5Print5printItLi0EEEjT_i+0x10>
        return write(n);
   d4228:	6802      	ldr	r2, [r0, #0]
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
   d422a:	f85d 4b04 	ldr.w	r4, [sp], #4
        return write(n);
   d422e:	6892      	ldr	r2, [r2, #8]
   d4230:	b2c9      	uxtb	r1, r1
   d4232:	4710      	bx	r2
}
   d4234:	f85d 4b04 	ldr.w	r4, [sp], #4
        return printNumber(val, base) + t;
   d4238:	b2d2      	uxtb	r2, r2
   d423a:	f003 bc02 	b.w	d7a42 <_ZN5Print11printNumberEmh>

000d423e <_ZN5Print7printlnItLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
   d423e:	b538      	push	{r3, r4, r5, lr}
   d4240:	4605      	mov	r5, r0
        size_t n = print(b, base);
   d4242:	f7ff ffef 	bl	d4224 <_ZN5Print5printItLi0EEEjT_i>
   d4246:	4604      	mov	r4, r0
        n += println();
   d4248:	4628      	mov	r0, r5
   d424a:	f003 fbe2 	bl	d7a12 <_ZN5Print7printlnEv>
    }
   d424e:	4420      	add	r0, r4
   d4250:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4254 <setup>:
bool startLogging = false;

SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);

void setup() {
   d4254:	b510      	push	{r4, lr}
   d4256:	b08e      	sub	sp, #56	; 0x38
  Serial.begin(9600);
   d4258:	f003 fedc 	bl	d8014 <_Z16_fetch_usbserialv>
   d425c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4260:	f003 fec6 	bl	d7ff0 <_ZN9USBSerial5beginEl>

  // Wait for communication with the host computer serial monitor
  while (!Serial) {
   d4264:	f003 fed6 	bl	d8014 <_Z16_fetch_usbserialv>
   d4268:	f003 fec9 	bl	d7ffe <_ZN9USBSerialcvbEv>
   d426c:	b918      	cbnz	r0, d4276 <setup+0x22>
    delay(1);
   d426e:	2001      	movs	r0, #1
   d4270:	f003 f9c0 	bl	d75f4 <delay>
  while (!Serial) {
   d4274:	e7f6      	b.n	d4264 <setup+0x10>
  }
  
  if (!as7341.begin()){
   d4276:	f004 f84f 	bl	d8318 <_Z19__fetch_global_Wirev>
   d427a:	2300      	movs	r3, #0
   d427c:	4602      	mov	r2, r0
   d427e:	2139      	movs	r1, #57	; 0x39
   d4280:	4859      	ldr	r0, [pc, #356]	; (d43e8 <setup+0x194>)
   d4282:	f000 fd35 	bl	d4cf0 <_ZN15Adafruit_AS73415beginEhP7TwoWirel>
   d4286:	b940      	cbnz	r0, d429a <setup+0x46>
    Serial.println("Could not find AS7341");
   d4288:	f003 fec4 	bl	d8014 <_Z16_fetch_usbserialv>
   d428c:	4957      	ldr	r1, [pc, #348]	; (d43ec <setup+0x198>)
   d428e:	f003 fbcc 	bl	d7a2a <_ZN5Print7printlnEPKc>
    while (1) { delay(10); }
   d4292:	200a      	movs	r0, #10
   d4294:	f003 f9ae 	bl	d75f4 <delay>
   d4298:	e7fb      	b.n	d4292 <setup+0x3e>
  }
  
  // use ATIME of 103, ASTEP of 3457, and GAIN of 512x for dark counts during optical calibration
  as7341.setATIME(59);      
   d429a:	213b      	movs	r1, #59	; 0x3b
   d429c:	4852      	ldr	r0, [pc, #328]	; (d43e8 <setup+0x194>)
   d429e:	f000 fdff 	bl	d4ea0 <_ZN15Adafruit_AS73418setATIMEEh>
  as7341.setASTEP(599);
   d42a2:	f240 2157 	movw	r1, #599	; 0x257
   d42a6:	4850      	ldr	r0, [pc, #320]	; (d43e8 <setup+0x194>)
   d42a8:	f000 fe1f 	bl	d4eea <_ZN15Adafruit_AS73418setASTEPEt>
  as7341.setGain(AS7341_GAIN_4X);
   d42ac:	484e      	ldr	r0, [pc, #312]	; (d43e8 <setup+0x194>)
   d42ae:	2103      	movs	r1, #3
   d42b0:	f000 fe42 	bl	d4f38 <_ZN15Adafruit_AS73417setGainE13as7341_gain_t>

  if (! rtc.begin()) {
   d42b4:	484e      	ldr	r0, [pc, #312]	; (d43f0 <setup+0x19c>)
   d42b6:	f001 fbdd 	bl	d5a74 <_ZN11RTC_PCF85235beginEv>
   d42ba:	b928      	cbnz	r0, d42c8 <setup+0x74>
    Serial.println("Couldn't find RTC");
   d42bc:	f003 feaa 	bl	d8014 <_Z16_fetch_usbserialv>
   d42c0:	494c      	ldr	r1, [pc, #304]	; (d43f4 <setup+0x1a0>)
   d42c2:	f003 fbb2 	bl	d7a2a <_ZN5Print7printlnEPKc>
    while (1);
   d42c6:	e7fe      	b.n	d42c6 <setup+0x72>
  }

  if (! rtc.initialized()) {
   d42c8:	4849      	ldr	r0, [pc, #292]	; (d43f0 <setup+0x19c>)
   d42ca:	f001 fbd5 	bl	d5a78 <_ZN11RTC_PCF852311initializedEv>
   d42ce:	b920      	cbnz	r0, d42da <setup+0x86>
    Serial.println("RTC is NOT running!");
   d42d0:	f003 fea0 	bl	d8014 <_Z16_fetch_usbserialv>
   d42d4:	4948      	ldr	r1, [pc, #288]	; (d43f8 <setup+0x1a4>)
   d42d6:	f003 fba8 	bl	d7a2a <_ZN5Print7printlnEPKc>
    // This line sets the RTC with an explicit date & time, for example to set
    // January 21, 2014 at 3am you would call:
    // rtc.adjust(DateTime(2014, 1, 21, 3, 0, 0));
  }

  if (! aw.begin(0x58)) {
   d42da:	f004 f81d 	bl	d8318 <_Z19__fetch_global_Wirev>
   d42de:	2158      	movs	r1, #88	; 0x58
   d42e0:	4602      	mov	r2, r0
   d42e2:	4846      	ldr	r0, [pc, #280]	; (d43fc <setup+0x1a8>)
   d42e4:	f001 f887 	bl	d53f6 <_ZN15Adafruit_AW95235beginEhP7TwoWire>
   d42e8:	b940      	cbnz	r0, d42fc <setup+0xa8>
    Serial.println("AW9523 not found? Check wiring!");
   d42ea:	f003 fe93 	bl	d8014 <_Z16_fetch_usbserialv>
   d42ee:	4944      	ldr	r1, [pc, #272]	; (d4400 <setup+0x1ac>)
   d42f0:	f003 fb9b 	bl	d7a2a <_ZN5Print7printlnEPKc>
    while (1) delay(10);  // halt forever
   d42f4:	200a      	movs	r0, #10
   d42f6:	f003 f97d 	bl	d75f4 <delay>
   d42fa:	e7fb      	b.n	d42f4 <setup+0xa0>
  }

  Serial.println("AW9523 found!");
   d42fc:	f003 fe8a 	bl	d8014 <_Z16_fetch_usbserialv>
   d4300:	4940      	ldr	r1, [pc, #256]	; (d4404 <setup+0x1b0>)
   d4302:	f003 fb92 	bl	d7a2a <_ZN5Print7printlnEPKc>
  aw.pinMode(LedPin, AW9523_LED_MODE);
   d4306:	4b40      	ldr	r3, [pc, #256]	; (d4408 <setup+0x1b4>)
   d4308:	483c      	ldr	r0, [pc, #240]	; (d43fc <setup+0x1a8>)
   d430a:	7819      	ldrb	r1, [r3, #0]
   d430c:	2203      	movs	r2, #3
   d430e:	f001 f817 	bl	d5340 <_ZN15Adafruit_AW95237pinModeEhh>
      dataMode_{dataMode}
   d4312:	4b3e      	ldr	r3, [pc, #248]	; (d440c <setup+0x1b8>)
   d4314:	9301      	str	r3, [sp, #4]
   d4316:	4b3e      	ldr	r3, [pc, #248]	; (d4410 <setup+0x1bc>)
   d4318:	9303      	str	r3, [sp, #12]
   d431a:	2400      	movs	r4, #0
   d431c:	2301      	movs	r3, #1

  SD.begin(SD_CHIP_SELECT);
   d431e:	aa01      	add	r2, sp, #4
   d4320:	2105      	movs	r1, #5
   d4322:	483c      	ldr	r0, [pc, #240]	; (d4414 <setup+0x1c0>)
   d4324:	f8ad 3010 	strh.w	r3, [sp, #16]
   d4328:	f88d 4008 	strb.w	r4, [sp, #8]
   d432c:	f7ff ff3c 	bl	d41a8 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4330:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4334:	9303      	str	r3, [sp, #12]
  File() {}
   d4336:	4b38      	ldr	r3, [pc, #224]	; (d4418 <setup+0x1c4>)
   d4338:	9301      	str	r3, [sp, #4]
    tmpFile.open(vwd(), path, oflag);
   d433a:	4a38      	ldr	r2, [pc, #224]	; (d441c <setup+0x1c8>)
   d433c:	4938      	ldr	r1, [pc, #224]	; (d4420 <setup+0x1cc>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d433e:	f8ad 4014 	strh.w	r4, [sp, #20]
   d4342:	f244 2302 	movw	r3, #16898	; 0x4202
   d4346:	a805      	add	r0, sp, #20
    Print() : write_error(0) {}
   d4348:	9402      	str	r4, [sp, #8]
   d434a:	f001 fe74 	bl	d6036 <_ZN7FatFile4openEPS_PKci>
 
  File file = SD.open("data.csv", FILE_WRITE);

  if (file) {
   d434e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d4352:	2b00      	cmp	r3, #0
   d4354:	d042      	beq.n	d43dc <setup+0x188>
    file.print("ASTEP:");
   d4356:	4933      	ldr	r1, [pc, #204]	; (d4424 <setup+0x1d0>)
   d4358:	a801      	add	r0, sp, #4
   d435a:	f003 fb53 	bl	d7a04 <_ZN5Print5printEPKc>
    file.print(',');
   d435e:	212c      	movs	r1, #44	; 0x2c
   d4360:	a801      	add	r0, sp, #4
   d4362:	f003 fb53 	bl	d7a0c <_ZN5Print5printEc>
    file.println(as7341.getASTEP());
   d4366:	4820      	ldr	r0, [pc, #128]	; (d43e8 <setup+0x194>)
   d4368:	f000 fdd3 	bl	d4f12 <_ZN15Adafruit_AS73418getASTEPEv>
   d436c:	220a      	movs	r2, #10
   d436e:	4601      	mov	r1, r0
   d4370:	a801      	add	r0, sp, #4
   d4372:	f7ff ff64 	bl	d423e <_ZN5Print7printlnItLi0EEEjT_i>
    file.print("ATIME:");
   d4376:	492c      	ldr	r1, [pc, #176]	; (d4428 <setup+0x1d4>)
   d4378:	a801      	add	r0, sp, #4
   d437a:	f003 fb43 	bl	d7a04 <_ZN5Print5printEPKc>
    file.print(',');
   d437e:	212c      	movs	r1, #44	; 0x2c
   d4380:	a801      	add	r0, sp, #4
   d4382:	f003 fb43 	bl	d7a0c <_ZN5Print5printEc>
    file.println(as7341.getATIME());
   d4386:	4818      	ldr	r0, [pc, #96]	; (d43e8 <setup+0x194>)
   d4388:	f000 fd9d 	bl	d4ec6 <_ZN15Adafruit_AS73418getATIMEEv>
        return printNumber(val, base) + t;
   d438c:	220a      	movs	r2, #10
   d438e:	4601      	mov	r1, r0
   d4390:	a801      	add	r0, sp, #4
   d4392:	f003 fb56 	bl	d7a42 <_ZN5Print11printNumberEmh>
        n += println();
   d4396:	a801      	add	r0, sp, #4
   d4398:	f003 fb3b 	bl	d7a12 <_ZN5Print7printlnEv>
    file.print("GAIN (check table):");
   d439c:	4923      	ldr	r1, [pc, #140]	; (d442c <setup+0x1d8>)
   d439e:	a801      	add	r0, sp, #4
   d43a0:	f003 fb30 	bl	d7a04 <_ZN5Print5printEPKc>
    file.print(',');
   d43a4:	212c      	movs	r1, #44	; 0x2c
   d43a6:	a801      	add	r0, sp, #4
   d43a8:	f003 fb30 	bl	d7a0c <_ZN5Print5printEc>
    file.println(as7341.getGain());
   d43ac:	480e      	ldr	r0, [pc, #56]	; (d43e8 <setup+0x194>)
   d43ae:	f000 fdd6 	bl	d4f5e <_ZN15Adafruit_AS73417getGainEv>
        return printNumber(val, base) + t;
   d43b2:	220a      	movs	r2, #10
   d43b4:	4601      	mov	r1, r0
   d43b6:	a801      	add	r0, sp, #4
   d43b8:	f003 fb43 	bl	d7a42 <_ZN5Print11printNumberEmh>
        n += println();
   d43bc:	a801      	add	r0, sp, #4
   d43be:	f003 fb28 	bl	d7a12 <_ZN5Print7printlnEv>
    // 0.5x records as 0, 1x records as 1, 2x records as 2, 4x records as 3, 
    // 8x records as 4, 16x records as 5, 32x records as 6, 64x records as 7,
    // 128x records as 8, 256x records as 9, 512x records as 10.
    file.println(" ");
   d43c2:	491b      	ldr	r1, [pc, #108]	; (d4430 <setup+0x1dc>)
   d43c4:	a801      	add	r0, sp, #4
   d43c6:	f003 fb30 	bl	d7a2a <_ZN5Print7printlnEPKc>
    file.println("LED Intensity,Date,Time,Type,F1 (Basic),F2 (Basic),F3 (Basic),F4 (Basic),F5 (Basic),F6 (Basic),F7 (Basic),F8 (Basic),Clear (Basic),NIR (Basic),Type,F1 (Raw),F2 (Raw),F3 (Raw),F4 (Raw),F5 (Raw),F6 (Raw),F7 (Raw),F8 (Raw),Clear (Raw),NIR (Raw)"); // Headers
   d43ca:	491a      	ldr	r1, [pc, #104]	; (d4434 <setup+0x1e0>)
   d43cc:	a801      	add	r0, sp, #4
   d43ce:	f003 fb2c 	bl	d7a2a <_ZN5Print7printlnEPKc>
    file.close();
   d43d2:	a805      	add	r0, sp, #20
   d43d4:	f001 fe28 	bl	d6028 <_ZN7FatFile5closeEv>
  } else {
    Serial.println(F("Error opening file!"));
  }
}
   d43d8:	b00e      	add	sp, #56	; 0x38
   d43da:	bd10      	pop	{r4, pc}
    Serial.println(F("Error opening file!"));
   d43dc:	f003 fe1a 	bl	d8014 <_Z16_fetch_usbserialv>
   d43e0:	4915      	ldr	r1, [pc, #84]	; (d4438 <setup+0x1e4>)
   d43e2:	f003 fb2c 	bl	d7a3e <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   d43e6:	e7f7      	b.n	d43d8 <setup+0x184>
   d43e8:	2003e540 	.word	0x2003e540
   d43ec:	000d8f40 	.word	0x000d8f40
   d43f0:	2003e5a0 	.word	0x2003e5a0
   d43f4:	000d8f56 	.word	0x000d8f56
   d43f8:	000d8f68 	.word	0x000d8f68
   d43fc:	2003e568 	.word	0x2003e568
   d4400:	000d8f7c 	.word	0x000d8f7c
   d4404:	000d8f9c 	.word	0x000d8f9c
   d4408:	2003e0ac 	.word	0x2003e0ac
   d440c:	000d91b4 	.word	0x000d91b4
   d4410:	02faf080 	.word	0x02faf080
   d4414:	2003e0b0 	.word	0x2003e0b0
   d4418:	000d91c8 	.word	0x000d91c8
   d441c:	000d8faa 	.word	0x000d8faa
   d4420:	2003e4ec 	.word	0x2003e4ec
   d4424:	000d8fb3 	.word	0x000d8fb3
   d4428:	000d8fba 	.word	0x000d8fba
   d442c:	000d8fc1 	.word	0x000d8fc1
   d4430:	000d9119 	.word	0x000d9119
   d4434:	000d8fd5 	.word	0x000d8fd5
   d4438:	000d90c7 	.word	0x000d90c7

000d443c <_Z18serialprintresultsv>:
 // delay(250);

}

void serialprintresults() 
{
   d443c:	b570      	push	{r4, r5, r6, lr}
   d443e:	b094      	sub	sp, #80	; 0x50

DateTime now = rtc.now();
   d4440:	4668      	mov	r0, sp
   d4442:	f001 fb3a 	bl	d5aba <_ZN11RTC_PCF85233nowEv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4446:	f002 feb9 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
unsigned long decimalseconds_to_record = (millis() % 1000)/1; //the divided by 1 has to stay, otherwise the program gets stuck during serial monitor!
   d444a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   d444e:	fbb0 f3f5 	udiv	r3, r0, r5
   d4452:	fb03 0515 	mls	r5, r3, r5, r0

Serial.print("LED INTENSITY:");
   d4456:	f003 fddd 	bl	d8014 <_Z16_fetch_usbserialv>
   d445a:	494b      	ldr	r1, [pc, #300]	; (d4588 <_Z18serialprintresultsv+0x14c>)
   d445c:	f003 fad2 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print(" ");
   d4460:	f003 fdd8 	bl	d8014 <_Z16_fetch_usbserialv>
   d4464:	4949      	ldr	r1, [pc, #292]	; (d458c <_Z18serialprintresultsv+0x150>)
   d4466:	f003 facd 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.println(LEDbright);
   d446a:	f003 fdd3 	bl	d8014 <_Z16_fetch_usbserialv>
   d446e:	4b48      	ldr	r3, [pc, #288]	; (d4590 <_Z18serialprintresultsv+0x154>)
   d4470:	681c      	ldr	r4, [r3, #0]
        if (n < 0 && base == 10) {
   d4472:	2c00      	cmp	r4, #0
   d4474:	4606      	mov	r6, r0
   d4476:	f280 8084 	bge.w	d4582 <_Z18serialprintresultsv+0x146>
            t = print('-');
   d447a:	212d      	movs	r1, #45	; 0x2d
   d447c:	f003 fac6 	bl	d7a0c <_ZN5Print5printEc>
            val = -n;
   d4480:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d4482:	220a      	movs	r2, #10
   d4484:	4630      	mov	r0, r6
   d4486:	f003 fadc 	bl	d7a42 <_ZN5Print11printNumberEmh>
        n += println();
   d448a:	4630      	mov	r0, r6
   d448c:	f003 fac1 	bl	d7a12 <_ZN5Print7printlnEv>
  Serial.println();
   d4490:	f003 fdc0 	bl	d8014 <_Z16_fetch_usbserialv>
   d4494:	f003 fabd 	bl	d7a12 <_ZN5Print7printlnEv>
  Serial.print(now.year(), DEC);
   d4498:	f003 fdbc 	bl	d8014 <_Z16_fetch_usbserialv>
    DateTime (uint16_t year, uint8_t month, uint8_t day,
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
   d449c:	f89d 1000 	ldrb.w	r1, [sp]
   d44a0:	220a      	movs	r2, #10
   d44a2:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
   d44a6:	f7ff febd 	bl	d4224 <_ZN5Print5printItLi0EEEjT_i>
  Serial.print('/');
   d44aa:	f003 fdb3 	bl	d8014 <_Z16_fetch_usbserialv>
   d44ae:	212f      	movs	r1, #47	; 0x2f
   d44b0:	f003 faac 	bl	d7a0c <_ZN5Print5printEc>
  Serial.print(now.month(), DEC);
   d44b4:	f003 fdae 	bl	d8014 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d44b8:	220a      	movs	r2, #10
   d44ba:	f89d 1001 	ldrb.w	r1, [sp, #1]
   d44be:	f003 fac0 	bl	d7a42 <_ZN5Print11printNumberEmh>
  Serial.print('/');
   d44c2:	f003 fda7 	bl	d8014 <_Z16_fetch_usbserialv>
   d44c6:	212f      	movs	r1, #47	; 0x2f
   d44c8:	f003 faa0 	bl	d7a0c <_ZN5Print5printEc>
  Serial.print(now.day(), DEC);
   d44cc:	f003 fda2 	bl	d8014 <_Z16_fetch_usbserialv>
   d44d0:	220a      	movs	r2, #10
   d44d2:	f89d 1002 	ldrb.w	r1, [sp, #2]
   d44d6:	f003 fab4 	bl	d7a42 <_ZN5Print11printNumberEmh>
  Serial.print(" (");
   d44da:	f003 fd9b 	bl	d8014 <_Z16_fetch_usbserialv>
   d44de:	492d      	ldr	r1, [pc, #180]	; (d4594 <_Z18serialprintresultsv+0x158>)
   d44e0:	f003 fa90 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print(daysOfTheWeek[now.dayOfTheWeek()]);
   d44e4:	f003 fd96 	bl	d8014 <_Z16_fetch_usbserialv>
   d44e8:	4604      	mov	r4, r0
   d44ea:	4668      	mov	r0, sp
   d44ec:	f001 faac 	bl	d5a48 <_ZNK8DateTime12dayOfTheWeekEv>
   d44f0:	4b29      	ldr	r3, [pc, #164]	; (d4598 <_Z18serialprintresultsv+0x15c>)
   d44f2:	b201      	sxth	r1, r0
   d44f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d44f8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   d44fc:	4620      	mov	r0, r4
   d44fe:	f003 fa81 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print(") ");
   d4502:	f003 fd87 	bl	d8014 <_Z16_fetch_usbserialv>
   d4506:	4925      	ldr	r1, [pc, #148]	; (d459c <_Z18serialprintresultsv+0x160>)
   d4508:	f003 fa7c 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print(now.hour(), DEC);
   d450c:	f003 fd82 	bl	d8014 <_Z16_fetch_usbserialv>
   d4510:	220a      	movs	r2, #10
   d4512:	f89d 1003 	ldrb.w	r1, [sp, #3]
   d4516:	f003 fa94 	bl	d7a42 <_ZN5Print11printNumberEmh>
  Serial.print(':');
   d451a:	f003 fd7b 	bl	d8014 <_Z16_fetch_usbserialv>
   d451e:	213a      	movs	r1, #58	; 0x3a
   d4520:	f003 fa74 	bl	d7a0c <_ZN5Print5printEc>
  Serial.print(now.minute(), DEC);
   d4524:	f003 fd76 	bl	d8014 <_Z16_fetch_usbserialv>
   d4528:	220a      	movs	r2, #10
   d452a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   d452e:	f003 fa88 	bl	d7a42 <_ZN5Print11printNumberEmh>
  Serial.print(':');
   d4532:	f003 fd6f 	bl	d8014 <_Z16_fetch_usbserialv>
   d4536:	213a      	movs	r1, #58	; 0x3a
   d4538:	f003 fa68 	bl	d7a0c <_ZN5Print5printEc>
  Serial.print(now.second(), DEC);
   d453c:	f003 fd6a 	bl	d8014 <_Z16_fetch_usbserialv>
   d4540:	220a      	movs	r2, #10
   d4542:	f89d 1005 	ldrb.w	r1, [sp, #5]
   d4546:	f003 fa7c 	bl	d7a42 <_ZN5Print11printNumberEmh>
  Serial.print('.');
   d454a:	f003 fd63 	bl	d8014 <_Z16_fetch_usbserialv>
   d454e:	212e      	movs	r1, #46	; 0x2e
   d4550:	f003 fa5c 	bl	d7a0c <_ZN5Print5printEc>
  Serial.print(decimalseconds_to_record, DEC);
   d4554:	f003 fd5e 	bl	d8014 <_Z16_fetch_usbserialv>
   d4558:	4629      	mov	r1, r5
   d455a:	220a      	movs	r2, #10
   d455c:	f003 fa71 	bl	d7a42 <_ZN5Print11printNumberEmh>
  Serial.println();

  uint16_t readings[12];
  float counts[12];

    if (!as7341.readAllChannels(readings)){
   d4560:	ad02      	add	r5, sp, #8
  Serial.println();
   d4562:	f003 fd57 	bl	d8014 <_Z16_fetch_usbserialv>
   d4566:	f003 fa54 	bl	d7a12 <_ZN5Print7printlnEv>
    if (!as7341.readAllChannels(readings)){
   d456a:	480d      	ldr	r0, [pc, #52]	; (d45a0 <_Z18serialprintresultsv+0x164>)
   d456c:	4629      	mov	r1, r5
   d456e:	f000 fe50 	bl	d5212 <_ZN15Adafruit_AS734115readAllChannelsEPt>
   d4572:	b9c8      	cbnz	r0, d45a8 <_Z18serialprintresultsv+0x16c>
    Serial.println("Error reading all channels!");
   d4574:	f003 fd4e 	bl	d8014 <_Z16_fetch_usbserialv>
   d4578:	490a      	ldr	r1, [pc, #40]	; (d45a4 <_Z18serialprintresultsv+0x168>)
   d457a:	f003 fa56 	bl	d7a2a <_ZN5Print7printlnEPKc>
  Serial.print("  ");
  Serial.print("Raw Value : ");
  Serial.println(readings[11]);
  Serial.print("  ");
  Serial.println();
}
   d457e:	b014      	add	sp, #80	; 0x50
   d4580:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d4582:	4621      	mov	r1, r4
   d4584:	e77d      	b.n	d4482 <_Z18serialprintresultsv+0x46>
   d4586:	bf00      	nop
   d4588:	000d90db 	.word	0x000d90db
   d458c:	000d9119 	.word	0x000d9119
   d4590:	2003dfd8 	.word	0x2003dfd8
   d4594:	000d90ea 	.word	0x000d90ea
   d4598:	2003dfe0 	.word	0x2003dfe0
   d459c:	000d90ed 	.word	0x000d90ed
   d45a0:	2003e540 	.word	0x2003e540
   d45a4:	000d90f0 	.word	0x000d90f0
    counts[i] = as7341.toBasicCounts(readings[i]);
   d45a8:	4e9f      	ldr	r6, [pc, #636]	; (d4828 <_Z18serialprintresultsv+0x3ec>)
   d45aa:	2400      	movs	r4, #0
    if(i == 4 || i == 5) continue;
   d45ac:	1f23      	subs	r3, r4, #4
   d45ae:	b2db      	uxtb	r3, r3
   d45b0:	2b01      	cmp	r3, #1
   d45b2:	d909      	bls.n	d45c8 <_Z18serialprintresultsv+0x18c>
    counts[i] = as7341.toBasicCounts(readings[i]);
   d45b4:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
   d45b8:	4630      	mov	r0, r6
   d45ba:	f000 fce5 	bl	d4f88 <_ZN15Adafruit_AS734113toBasicCountsEt>
   d45be:	ab08      	add	r3, sp, #32
   d45c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   d45c4:	ed83 0a00 	vstr	s0, [r3]
  for(uint8_t i = 0; i < 12; i++) {
   d45c8:	3401      	adds	r4, #1
   d45ca:	2c0c      	cmp	r4, #12
   d45cc:	d1ee      	bne.n	d45ac <_Z18serialprintresultsv+0x170>
  Serial.print("F1 415nm : ");
   d45ce:	f003 fd21 	bl	d8014 <_Z16_fetch_usbserialv>
   d45d2:	4996      	ldr	r1, [pc, #600]	; (d482c <_Z18serialprintresultsv+0x3f0>)
   d45d4:	f003 fa16 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print(counts[0]);
   d45d8:	f003 fd1c 	bl	d8014 <_Z16_fetch_usbserialv>
   d45dc:	ed9d 0a08 	vldr	s0, [sp, #32]
   d45e0:	2102      	movs	r1, #2
   d45e2:	f003 fb15 	bl	d7c10 <_ZN5Print5printEfi>
  Serial.print("  ");
   d45e6:	f003 fd15 	bl	d8014 <_Z16_fetch_usbserialv>
   d45ea:	4991      	ldr	r1, [pc, #580]	; (d4830 <_Z18serialprintresultsv+0x3f4>)
   d45ec:	f003 fa0a 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   d45f0:	f003 fd10 	bl	d8014 <_Z16_fetch_usbserialv>
   d45f4:	498f      	ldr	r1, [pc, #572]	; (d4834 <_Z18serialprintresultsv+0x3f8>)
   d45f6:	f003 fa05 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.println(readings[0]);
   d45fa:	f003 fd0b 	bl	d8014 <_Z16_fetch_usbserialv>
   d45fe:	220a      	movs	r2, #10
   d4600:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   d4604:	f7ff fe1b 	bl	d423e <_ZN5Print7printlnItLi0EEEjT_i>
  Serial.print("F2 445nm : ");
   d4608:	f003 fd04 	bl	d8014 <_Z16_fetch_usbserialv>
   d460c:	498a      	ldr	r1, [pc, #552]	; (d4838 <_Z18serialprintresultsv+0x3fc>)
   d460e:	f003 f9f9 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print(counts[1]);
   d4612:	f003 fcff 	bl	d8014 <_Z16_fetch_usbserialv>
   d4616:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
   d461a:	2102      	movs	r1, #2
   d461c:	f003 faf8 	bl	d7c10 <_ZN5Print5printEfi>
  Serial.print("  ");
   d4620:	f003 fcf8 	bl	d8014 <_Z16_fetch_usbserialv>
   d4624:	4982      	ldr	r1, [pc, #520]	; (d4830 <_Z18serialprintresultsv+0x3f4>)
   d4626:	f003 f9ed 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   d462a:	f003 fcf3 	bl	d8014 <_Z16_fetch_usbserialv>
   d462e:	4981      	ldr	r1, [pc, #516]	; (d4834 <_Z18serialprintresultsv+0x3f8>)
   d4630:	f003 f9e8 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.println(readings[1]);
   d4634:	f003 fcee 	bl	d8014 <_Z16_fetch_usbserialv>
   d4638:	220a      	movs	r2, #10
   d463a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   d463e:	f7ff fdfe 	bl	d423e <_ZN5Print7printlnItLi0EEEjT_i>
  Serial.print("F3 480nm : ");
   d4642:	f003 fce7 	bl	d8014 <_Z16_fetch_usbserialv>
   d4646:	497d      	ldr	r1, [pc, #500]	; (d483c <_Z18serialprintresultsv+0x400>)
   d4648:	f003 f9dc 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print(counts[2]);
   d464c:	f003 fce2 	bl	d8014 <_Z16_fetch_usbserialv>
   d4650:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
   d4654:	2102      	movs	r1, #2
   d4656:	f003 fadb 	bl	d7c10 <_ZN5Print5printEfi>
  Serial.print("  ");
   d465a:	f003 fcdb 	bl	d8014 <_Z16_fetch_usbserialv>
   d465e:	4974      	ldr	r1, [pc, #464]	; (d4830 <_Z18serialprintresultsv+0x3f4>)
   d4660:	f003 f9d0 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   d4664:	f003 fcd6 	bl	d8014 <_Z16_fetch_usbserialv>
   d4668:	4972      	ldr	r1, [pc, #456]	; (d4834 <_Z18serialprintresultsv+0x3f8>)
   d466a:	f003 f9cb 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.println(readings[2]);
   d466e:	f003 fcd1 	bl	d8014 <_Z16_fetch_usbserialv>
   d4672:	220a      	movs	r2, #10
   d4674:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d4678:	f7ff fde1 	bl	d423e <_ZN5Print7printlnItLi0EEEjT_i>
  Serial.print("F4 515nm : ");
   d467c:	f003 fcca 	bl	d8014 <_Z16_fetch_usbserialv>
   d4680:	496f      	ldr	r1, [pc, #444]	; (d4840 <_Z18serialprintresultsv+0x404>)
   d4682:	f003 f9bf 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print(counts[3]);
   d4686:	f003 fcc5 	bl	d8014 <_Z16_fetch_usbserialv>
   d468a:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   d468e:	2102      	movs	r1, #2
   d4690:	f003 fabe 	bl	d7c10 <_ZN5Print5printEfi>
  Serial.print("  ");
   d4694:	f003 fcbe 	bl	d8014 <_Z16_fetch_usbserialv>
   d4698:	4965      	ldr	r1, [pc, #404]	; (d4830 <_Z18serialprintresultsv+0x3f4>)
   d469a:	f003 f9b3 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   d469e:	f003 fcb9 	bl	d8014 <_Z16_fetch_usbserialv>
   d46a2:	4964      	ldr	r1, [pc, #400]	; (d4834 <_Z18serialprintresultsv+0x3f8>)
   d46a4:	f003 f9ae 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.println(readings[3]);
   d46a8:	f003 fcb4 	bl	d8014 <_Z16_fetch_usbserialv>
   d46ac:	220a      	movs	r2, #10
   d46ae:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   d46b2:	f7ff fdc4 	bl	d423e <_ZN5Print7printlnItLi0EEEjT_i>
  Serial.print("F5 555nm : ");
   d46b6:	f003 fcad 	bl	d8014 <_Z16_fetch_usbserialv>
   d46ba:	4962      	ldr	r1, [pc, #392]	; (d4844 <_Z18serialprintresultsv+0x408>)
   d46bc:	f003 f9a2 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print(counts[6]);
   d46c0:	f003 fca8 	bl	d8014 <_Z16_fetch_usbserialv>
   d46c4:	ed9d 0a0e 	vldr	s0, [sp, #56]	; 0x38
   d46c8:	2102      	movs	r1, #2
   d46ca:	f003 faa1 	bl	d7c10 <_ZN5Print5printEfi>
  Serial.print("  ");
   d46ce:	f003 fca1 	bl	d8014 <_Z16_fetch_usbserialv>
   d46d2:	4957      	ldr	r1, [pc, #348]	; (d4830 <_Z18serialprintresultsv+0x3f4>)
   d46d4:	f003 f996 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   d46d8:	f003 fc9c 	bl	d8014 <_Z16_fetch_usbserialv>
   d46dc:	4955      	ldr	r1, [pc, #340]	; (d4834 <_Z18serialprintresultsv+0x3f8>)
   d46de:	f003 f991 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.println(readings[6]);
   d46e2:	f003 fc97 	bl	d8014 <_Z16_fetch_usbserialv>
   d46e6:	220a      	movs	r2, #10
   d46e8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   d46ec:	f7ff fda7 	bl	d423e <_ZN5Print7printlnItLi0EEEjT_i>
  Serial.print("F6 590nm : ");
   d46f0:	f003 fc90 	bl	d8014 <_Z16_fetch_usbserialv>
   d46f4:	4954      	ldr	r1, [pc, #336]	; (d4848 <_Z18serialprintresultsv+0x40c>)
   d46f6:	f003 f985 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print(counts[7]);
   d46fa:	f003 fc8b 	bl	d8014 <_Z16_fetch_usbserialv>
   d46fe:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
   d4702:	2102      	movs	r1, #2
   d4704:	f003 fa84 	bl	d7c10 <_ZN5Print5printEfi>
  Serial.print("  ");
   d4708:	f003 fc84 	bl	d8014 <_Z16_fetch_usbserialv>
   d470c:	4948      	ldr	r1, [pc, #288]	; (d4830 <_Z18serialprintresultsv+0x3f4>)
   d470e:	f003 f979 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   d4712:	f003 fc7f 	bl	d8014 <_Z16_fetch_usbserialv>
   d4716:	4947      	ldr	r1, [pc, #284]	; (d4834 <_Z18serialprintresultsv+0x3f8>)
   d4718:	f003 f974 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.println(readings[7]);
   d471c:	f003 fc7a 	bl	d8014 <_Z16_fetch_usbserialv>
   d4720:	220a      	movs	r2, #10
   d4722:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   d4726:	f7ff fd8a 	bl	d423e <_ZN5Print7printlnItLi0EEEjT_i>
  Serial.print("F7 630nm : ");
   d472a:	f003 fc73 	bl	d8014 <_Z16_fetch_usbserialv>
   d472e:	4947      	ldr	r1, [pc, #284]	; (d484c <_Z18serialprintresultsv+0x410>)
   d4730:	f003 f968 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print(counts[8]);
   d4734:	f003 fc6e 	bl	d8014 <_Z16_fetch_usbserialv>
   d4738:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
   d473c:	2102      	movs	r1, #2
   d473e:	f003 fa67 	bl	d7c10 <_ZN5Print5printEfi>
  Serial.print("  ");
   d4742:	f003 fc67 	bl	d8014 <_Z16_fetch_usbserialv>
   d4746:	493a      	ldr	r1, [pc, #232]	; (d4830 <_Z18serialprintresultsv+0x3f4>)
   d4748:	f003 f95c 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   d474c:	f003 fc62 	bl	d8014 <_Z16_fetch_usbserialv>
   d4750:	4938      	ldr	r1, [pc, #224]	; (d4834 <_Z18serialprintresultsv+0x3f8>)
   d4752:	f003 f957 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.println(readings[8]);
   d4756:	f003 fc5d 	bl	d8014 <_Z16_fetch_usbserialv>
   d475a:	220a      	movs	r2, #10
   d475c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   d4760:	f7ff fd6d 	bl	d423e <_ZN5Print7printlnItLi0EEEjT_i>
  Serial.print("F8 680nm : ");
   d4764:	f003 fc56 	bl	d8014 <_Z16_fetch_usbserialv>
   d4768:	4939      	ldr	r1, [pc, #228]	; (d4850 <_Z18serialprintresultsv+0x414>)
   d476a:	f003 f94b 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print(counts[9]);
   d476e:	f003 fc51 	bl	d8014 <_Z16_fetch_usbserialv>
   d4772:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
   d4776:	2102      	movs	r1, #2
   d4778:	f003 fa4a 	bl	d7c10 <_ZN5Print5printEfi>
  Serial.print("  ");
   d477c:	f003 fc4a 	bl	d8014 <_Z16_fetch_usbserialv>
   d4780:	492b      	ldr	r1, [pc, #172]	; (d4830 <_Z18serialprintresultsv+0x3f4>)
   d4782:	f003 f93f 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   d4786:	f003 fc45 	bl	d8014 <_Z16_fetch_usbserialv>
   d478a:	492a      	ldr	r1, [pc, #168]	; (d4834 <_Z18serialprintresultsv+0x3f8>)
   d478c:	f003 f93a 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.println(readings[9]);
   d4790:	f003 fc40 	bl	d8014 <_Z16_fetch_usbserialv>
   d4794:	220a      	movs	r2, #10
   d4796:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   d479a:	f7ff fd50 	bl	d423e <_ZN5Print7printlnItLi0EEEjT_i>
  Serial.print("Clear    : ");
   d479e:	f003 fc39 	bl	d8014 <_Z16_fetch_usbserialv>
   d47a2:	492c      	ldr	r1, [pc, #176]	; (d4854 <_Z18serialprintresultsv+0x418>)
   d47a4:	f003 f92e 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print(counts[10]);
   d47a8:	f003 fc34 	bl	d8014 <_Z16_fetch_usbserialv>
   d47ac:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
   d47b0:	2102      	movs	r1, #2
   d47b2:	f003 fa2d 	bl	d7c10 <_ZN5Print5printEfi>
  Serial.print("  ");
   d47b6:	f003 fc2d 	bl	d8014 <_Z16_fetch_usbserialv>
   d47ba:	491d      	ldr	r1, [pc, #116]	; (d4830 <_Z18serialprintresultsv+0x3f4>)
   d47bc:	f003 f922 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   d47c0:	f003 fc28 	bl	d8014 <_Z16_fetch_usbserialv>
   d47c4:	491b      	ldr	r1, [pc, #108]	; (d4834 <_Z18serialprintresultsv+0x3f8>)
   d47c6:	f003 f91d 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.println(readings[10]);
   d47ca:	f003 fc23 	bl	d8014 <_Z16_fetch_usbserialv>
   d47ce:	220a      	movs	r2, #10
   d47d0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   d47d4:	f7ff fd33 	bl	d423e <_ZN5Print7printlnItLi0EEEjT_i>
  Serial.print("NIR      : ");
   d47d8:	f003 fc1c 	bl	d8014 <_Z16_fetch_usbserialv>
   d47dc:	491e      	ldr	r1, [pc, #120]	; (d4858 <_Z18serialprintresultsv+0x41c>)
   d47de:	f003 f911 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print(counts[11]);
   d47e2:	f003 fc17 	bl	d8014 <_Z16_fetch_usbserialv>
   d47e6:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
   d47ea:	2102      	movs	r1, #2
   d47ec:	f003 fa10 	bl	d7c10 <_ZN5Print5printEfi>
  Serial.print("  ");
   d47f0:	f003 fc10 	bl	d8014 <_Z16_fetch_usbserialv>
   d47f4:	490e      	ldr	r1, [pc, #56]	; (d4830 <_Z18serialprintresultsv+0x3f4>)
   d47f6:	f003 f905 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   d47fa:	f003 fc0b 	bl	d8014 <_Z16_fetch_usbserialv>
   d47fe:	490d      	ldr	r1, [pc, #52]	; (d4834 <_Z18serialprintresultsv+0x3f8>)
   d4800:	f003 f900 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.println(readings[11]);
   d4804:	f003 fc06 	bl	d8014 <_Z16_fetch_usbserialv>
   d4808:	220a      	movs	r2, #10
   d480a:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   d480e:	f7ff fd16 	bl	d423e <_ZN5Print7printlnItLi0EEEjT_i>
  Serial.print("  ");
   d4812:	f003 fbff 	bl	d8014 <_Z16_fetch_usbserialv>
   d4816:	4906      	ldr	r1, [pc, #24]	; (d4830 <_Z18serialprintresultsv+0x3f4>)
   d4818:	f003 f8f4 	bl	d7a04 <_ZN5Print5printEPKc>
  Serial.println();
   d481c:	f003 fbfa 	bl	d8014 <_Z16_fetch_usbserialv>
   d4820:	f003 f8f7 	bl	d7a12 <_ZN5Print7printlnEv>
   d4824:	e6ab      	b.n	d457e <_Z18serialprintresultsv+0x142>
   d4826:	bf00      	nop
   d4828:	2003e540 	.word	0x2003e540
   d482c:	000d910c 	.word	0x000d910c
   d4830:	000d9118 	.word	0x000d9118
   d4834:	000d911b 	.word	0x000d911b
   d4838:	000d9128 	.word	0x000d9128
   d483c:	000d9134 	.word	0x000d9134
   d4840:	000d9140 	.word	0x000d9140
   d4844:	000d914c 	.word	0x000d914c
   d4848:	000d9158 	.word	0x000d9158
   d484c:	000d9164 	.word	0x000d9164
   d4850:	000d9170 	.word	0x000d9170
   d4854:	000d917c 	.word	0x000d917c
   d4858:	000d9188 	.word	0x000d9188

000d485c <_Z16fileprintresultsv>:

void fileprintresults() 
{
   d485c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d485e:	b0a3      	sub	sp, #140	; 0x8c
   d4860:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4864:	9317      	str	r3, [sp, #92]	; 0x5c
   d4866:	4bca      	ldr	r3, [pc, #808]	; (d4b90 <_Z16fileprintresultsv+0x334>)
   d4868:	49ca      	ldr	r1, [pc, #808]	; (d4b94 <_Z16fileprintresultsv+0x338>)
   d486a:	4acb      	ldr	r2, [pc, #812]	; (d4b98 <_Z16fileprintresultsv+0x33c>)
   d486c:	9315      	str	r3, [sp, #84]	; 0x54
   d486e:	2400      	movs	r4, #0
   d4870:	f244 2302 	movw	r3, #16898	; 0x4202
   d4874:	a819      	add	r0, sp, #100	; 0x64
   d4876:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
    Print() : write_error(0) {}
   d487a:	9416      	str	r4, [sp, #88]	; 0x58
   d487c:	f001 fbdb 	bl	d6036 <_ZN7FatFile4openEPS_PKci>

File file = SD.open("data.csv", FILE_WRITE);
DateTime now = rtc.now();
   d4880:	a801      	add	r0, sp, #4
   d4882:	f001 f91a 	bl	d5aba <_ZN11RTC_PCF85233nowEv>
   d4886:	f002 fc99 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
unsigned long decimalseconds_to_record = (millis() % 1000)/1; //the divided by 1 has to stay, otherwise the program gets stuck during serial monitor!

 uint16_t readings[12];
  float counts[12];

    if (!as7341.readAllChannels(readings)){
   d488a:	ae03      	add	r6, sp, #12
   d488c:	4605      	mov	r5, r0
   d488e:	4631      	mov	r1, r6
   d4890:	48c2      	ldr	r0, [pc, #776]	; (d4b9c <_Z16fileprintresultsv+0x340>)
   d4892:	f000 fcbe 	bl	d5212 <_ZN15Adafruit_AS734115readAllChannelsEPt>
   d4896:	b930      	cbnz	r0, d48a6 <_Z16fileprintresultsv+0x4a>
    Serial.println("Error reading all channels!");
   d4898:	f003 fbbc 	bl	d8014 <_Z16_fetch_usbserialv>
   d489c:	49c0      	ldr	r1, [pc, #768]	; (d4ba0 <_Z16fileprintresultsv+0x344>)
   d489e:	f003 f8c4 	bl	d7a2a <_ZN5Print7printlnEPKc>

else {
    Serial.println(F("Error opening file!"));
  }

   d48a2:	b023      	add	sp, #140	; 0x8c
   d48a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    counts[i] = as7341.toBasicCounts(readings[i]);
   d48a6:	4fbd      	ldr	r7, [pc, #756]	; (d4b9c <_Z16fileprintresultsv+0x340>)
    if(i == 4 || i == 5) continue;
   d48a8:	1f23      	subs	r3, r4, #4
   d48aa:	b2db      	uxtb	r3, r3
   d48ac:	2b01      	cmp	r3, #1
   d48ae:	d909      	bls.n	d48c4 <_Z16fileprintresultsv+0x68>
    counts[i] = as7341.toBasicCounts(readings[i]);
   d48b0:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
   d48b4:	4638      	mov	r0, r7
   d48b6:	f000 fb67 	bl	d4f88 <_ZN15Adafruit_AS734113toBasicCountsEt>
   d48ba:	ab09      	add	r3, sp, #36	; 0x24
   d48bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   d48c0:	ed83 0a00 	vstr	s0, [r3]
  for(uint8_t i = 0; i < 12; i++) {
   d48c4:	3401      	adds	r4, #1
   d48c6:	2c0c      	cmp	r4, #12
   d48c8:	d1ee      	bne.n	d48a8 <_Z16fileprintresultsv+0x4c>
if (file) {
   d48ca:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
   d48ce:	2b00      	cmp	r3, #0
   d48d0:	f000 8158 	beq.w	d4b84 <_Z16fileprintresultsv+0x328>
   d48d4:	f002 fc72 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
  unsigned long elapsedTime = currentTime % (onTime + offTime);
   d48d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d48dc:	fbb0 f2f3 	udiv	r2, r0, r3
   d48e0:	fb02 0313 	mls	r3, r2, r3, r0
  file.print(isLedOn ? LEDbright : LEDdim);
   d48e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   d48e8:	bf34      	ite	cc
   d48ea:	4bae      	ldrcc	r3, [pc, #696]	; (d4ba4 <_Z16fileprintresultsv+0x348>)
   d48ec:	4bae      	ldrcs	r3, [pc, #696]	; (d4ba8 <_Z16fileprintresultsv+0x34c>)
   d48ee:	681c      	ldr	r4, [r3, #0]
        if (n < 0 && base == 10) {
   d48f0:	2c00      	cmp	r4, #0
   d48f2:	f280 8145 	bge.w	d4b80 <_Z16fileprintresultsv+0x324>
            t = print('-');
   d48f6:	212d      	movs	r1, #45	; 0x2d
   d48f8:	a815      	add	r0, sp, #84	; 0x54
   d48fa:	f003 f887 	bl	d7a0c <_ZN5Print5printEc>
            val = -n;
   d48fe:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d4900:	220a      	movs	r2, #10
   d4902:	a815      	add	r0, sp, #84	; 0x54
   d4904:	f003 f89d 	bl	d7a42 <_ZN5Print11printNumberEmh>
    file.print(',');
   d4908:	212c      	movs	r1, #44	; 0x2c
   d490a:	a815      	add	r0, sp, #84	; 0x54
   d490c:	f003 f87e 	bl	d7a0c <_ZN5Print5printEc>
   d4910:	f89d 1004 	ldrb.w	r1, [sp, #4]
file.print(now.year(), DEC);
   d4914:	220a      	movs	r2, #10
   d4916:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
   d491a:	a815      	add	r0, sp, #84	; 0x54
   d491c:	f7ff fc82 	bl	d4224 <_ZN5Print5printItLi0EEEjT_i>
    file.print('/');
   d4920:	212f      	movs	r1, #47	; 0x2f
   d4922:	a815      	add	r0, sp, #84	; 0x54
   d4924:	f003 f872 	bl	d7a0c <_ZN5Print5printEc>
   d4928:	f89d 1005 	ldrb.w	r1, [sp, #5]
   d492c:	220a      	movs	r2, #10
   d492e:	a815      	add	r0, sp, #84	; 0x54
   d4930:	f003 f887 	bl	d7a42 <_ZN5Print11printNumberEmh>
    file.print('/');
   d4934:	212f      	movs	r1, #47	; 0x2f
   d4936:	a815      	add	r0, sp, #84	; 0x54
   d4938:	f003 f868 	bl	d7a0c <_ZN5Print5printEc>
   d493c:	220a      	movs	r2, #10
   d493e:	f89d 1006 	ldrb.w	r1, [sp, #6]
   d4942:	a815      	add	r0, sp, #84	; 0x54
   d4944:	f003 f87d 	bl	d7a42 <_ZN5Print11printNumberEmh>
    file.print(" (");
   d4948:	4998      	ldr	r1, [pc, #608]	; (d4bac <_Z16fileprintresultsv+0x350>)
   d494a:	a815      	add	r0, sp, #84	; 0x54
   d494c:	f003 f85a 	bl	d7a04 <_ZN5Print5printEPKc>
    file.print(daysOfTheWeek[now.dayOfTheWeek()]);
   d4950:	a801      	add	r0, sp, #4
   d4952:	f001 f879 	bl	d5a48 <_ZNK8DateTime12dayOfTheWeekEv>
   d4956:	4b96      	ldr	r3, [pc, #600]	; (d4bb0 <_Z16fileprintresultsv+0x354>)
   d4958:	b201      	sxth	r1, r0
   d495a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d495e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   d4962:	a815      	add	r0, sp, #84	; 0x54
   d4964:	f003 f84e 	bl	d7a04 <_ZN5Print5printEPKc>
    file.print(") ");
   d4968:	4992      	ldr	r1, [pc, #584]	; (d4bb4 <_Z16fileprintresultsv+0x358>)
   d496a:	a815      	add	r0, sp, #84	; 0x54
   d496c:	f003 f84a 	bl	d7a04 <_ZN5Print5printEPKc>
    file.print(',');
   d4970:	212c      	movs	r1, #44	; 0x2c
   d4972:	a815      	add	r0, sp, #84	; 0x54
   d4974:	f003 f84a 	bl	d7a0c <_ZN5Print5printEc>
   d4978:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d497c:	220a      	movs	r2, #10
   d497e:	a815      	add	r0, sp, #84	; 0x54
   d4980:	f003 f85f 	bl	d7a42 <_ZN5Print11printNumberEmh>
    file.print(':');
   d4984:	213a      	movs	r1, #58	; 0x3a
   d4986:	a815      	add	r0, sp, #84	; 0x54
   d4988:	f003 f840 	bl	d7a0c <_ZN5Print5printEc>
   d498c:	f89d 1008 	ldrb.w	r1, [sp, #8]
   d4990:	220a      	movs	r2, #10
   d4992:	a815      	add	r0, sp, #84	; 0x54
   d4994:	f003 f855 	bl	d7a42 <_ZN5Print11printNumberEmh>
    file.print(':');
   d4998:	213a      	movs	r1, #58	; 0x3a
   d499a:	a815      	add	r0, sp, #84	; 0x54
   d499c:	f003 f836 	bl	d7a0c <_ZN5Print5printEc>
   d49a0:	f89d 1009 	ldrb.w	r1, [sp, #9]
   d49a4:	220a      	movs	r2, #10
   d49a6:	a815      	add	r0, sp, #84	; 0x54
   d49a8:	f003 f84b 	bl	d7a42 <_ZN5Print11printNumberEmh>
    file.print(':');
   d49ac:	213a      	movs	r1, #58	; 0x3a
   d49ae:	a815      	add	r0, sp, #84	; 0x54
   d49b0:	f003 f82c 	bl	d7a0c <_ZN5Print5printEc>
unsigned long decimalseconds_to_record = (millis() % 1000)/1; //the divided by 1 has to stay, otherwise the program gets stuck during serial monitor!
   d49b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d49b8:	220a      	movs	r2, #10
   d49ba:	fbb5 f1f3 	udiv	r1, r5, r3
   d49be:	a815      	add	r0, sp, #84	; 0x54
   d49c0:	fb03 5111 	mls	r1, r3, r1, r5
   d49c4:	f003 f83d 	bl	d7a42 <_ZN5Print11printNumberEmh>
    file.print(',');
   d49c8:	212c      	movs	r1, #44	; 0x2c
   d49ca:	a815      	add	r0, sp, #84	; 0x54
   d49cc:	f003 f81e 	bl	d7a0c <_ZN5Print5printEc>
    file.print("BASIC COUNTS");
   d49d0:	4979      	ldr	r1, [pc, #484]	; (d4bb8 <_Z16fileprintresultsv+0x35c>)
   d49d2:	a815      	add	r0, sp, #84	; 0x54
   d49d4:	f003 f816 	bl	d7a04 <_ZN5Print5printEPKc>
    file.print(',');
   d49d8:	212c      	movs	r1, #44	; 0x2c
   d49da:	a815      	add	r0, sp, #84	; 0x54
   d49dc:	f003 f816 	bl	d7a0c <_ZN5Print5printEc>
    file.print(counts[0]);
   d49e0:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
   d49e4:	2102      	movs	r1, #2
   d49e6:	a815      	add	r0, sp, #84	; 0x54
   d49e8:	f003 f912 	bl	d7c10 <_ZN5Print5printEfi>
    file.print(',');
   d49ec:	212c      	movs	r1, #44	; 0x2c
   d49ee:	a815      	add	r0, sp, #84	; 0x54
   d49f0:	f003 f80c 	bl	d7a0c <_ZN5Print5printEc>
    file.print(counts[1]);
   d49f4:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
   d49f8:	2102      	movs	r1, #2
   d49fa:	a815      	add	r0, sp, #84	; 0x54
   d49fc:	f003 f908 	bl	d7c10 <_ZN5Print5printEfi>
    file.print(',');
   d4a00:	212c      	movs	r1, #44	; 0x2c
   d4a02:	a815      	add	r0, sp, #84	; 0x54
   d4a04:	f003 f802 	bl	d7a0c <_ZN5Print5printEc>
    file.print(counts[2]);
   d4a08:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   d4a0c:	2102      	movs	r1, #2
   d4a0e:	a815      	add	r0, sp, #84	; 0x54
   d4a10:	f003 f8fe 	bl	d7c10 <_ZN5Print5printEfi>
    file.print(',');
   d4a14:	212c      	movs	r1, #44	; 0x2c
   d4a16:	a815      	add	r0, sp, #84	; 0x54
   d4a18:	f002 fff8 	bl	d7a0c <_ZN5Print5printEc>
    file.print(counts[3]);
   d4a1c:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
   d4a20:	2102      	movs	r1, #2
   d4a22:	a815      	add	r0, sp, #84	; 0x54
   d4a24:	f003 f8f4 	bl	d7c10 <_ZN5Print5printEfi>
    file.print(',');
   d4a28:	212c      	movs	r1, #44	; 0x2c
   d4a2a:	a815      	add	r0, sp, #84	; 0x54
   d4a2c:	f002 ffee 	bl	d7a0c <_ZN5Print5printEc>
    file.print(counts[6]);
   d4a30:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
   d4a34:	2102      	movs	r1, #2
   d4a36:	a815      	add	r0, sp, #84	; 0x54
   d4a38:	f003 f8ea 	bl	d7c10 <_ZN5Print5printEfi>
    file.print(',');
   d4a3c:	212c      	movs	r1, #44	; 0x2c
   d4a3e:	a815      	add	r0, sp, #84	; 0x54
   d4a40:	f002 ffe4 	bl	d7a0c <_ZN5Print5printEc>
    file.print(counts[7]);
   d4a44:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
   d4a48:	2102      	movs	r1, #2
   d4a4a:	a815      	add	r0, sp, #84	; 0x54
   d4a4c:	f003 f8e0 	bl	d7c10 <_ZN5Print5printEfi>
    file.print(',');
   d4a50:	212c      	movs	r1, #44	; 0x2c
   d4a52:	a815      	add	r0, sp, #84	; 0x54
   d4a54:	f002 ffda 	bl	d7a0c <_ZN5Print5printEc>
    file.print(counts[8]);
   d4a58:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
   d4a5c:	2102      	movs	r1, #2
   d4a5e:	a815      	add	r0, sp, #84	; 0x54
   d4a60:	f003 f8d6 	bl	d7c10 <_ZN5Print5printEfi>
    file.print(',');
   d4a64:	212c      	movs	r1, #44	; 0x2c
   d4a66:	a815      	add	r0, sp, #84	; 0x54
   d4a68:	f002 ffd0 	bl	d7a0c <_ZN5Print5printEc>
    file.print(counts[9]);
   d4a6c:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
   d4a70:	2102      	movs	r1, #2
   d4a72:	a815      	add	r0, sp, #84	; 0x54
   d4a74:	f003 f8cc 	bl	d7c10 <_ZN5Print5printEfi>
    file.print(',');
   d4a78:	212c      	movs	r1, #44	; 0x2c
   d4a7a:	a815      	add	r0, sp, #84	; 0x54
   d4a7c:	f002 ffc6 	bl	d7a0c <_ZN5Print5printEc>
    file.print(counts[10]);
   d4a80:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
   d4a84:	2102      	movs	r1, #2
   d4a86:	a815      	add	r0, sp, #84	; 0x54
   d4a88:	f003 f8c2 	bl	d7c10 <_ZN5Print5printEfi>
    file.print(',');
   d4a8c:	212c      	movs	r1, #44	; 0x2c
   d4a8e:	a815      	add	r0, sp, #84	; 0x54
   d4a90:	f002 ffbc 	bl	d7a0c <_ZN5Print5printEc>
    file.print(counts[11]);
   d4a94:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
   d4a98:	2102      	movs	r1, #2
   d4a9a:	a815      	add	r0, sp, #84	; 0x54
   d4a9c:	f003 f8b8 	bl	d7c10 <_ZN5Print5printEfi>
    file.print(',');
   d4aa0:	212c      	movs	r1, #44	; 0x2c
   d4aa2:	a815      	add	r0, sp, #84	; 0x54
   d4aa4:	f002 ffb2 	bl	d7a0c <_ZN5Print5printEc>
    file.print("RAW VALUES");
   d4aa8:	4944      	ldr	r1, [pc, #272]	; (d4bbc <_Z16fileprintresultsv+0x360>)
   d4aaa:	a815      	add	r0, sp, #84	; 0x54
   d4aac:	f002 ffaa 	bl	d7a04 <_ZN5Print5printEPKc>
    file.print(',');
   d4ab0:	212c      	movs	r1, #44	; 0x2c
   d4ab2:	a815      	add	r0, sp, #84	; 0x54
   d4ab4:	f002 ffaa 	bl	d7a0c <_ZN5Print5printEc>
    file.print(readings[0]);
   d4ab8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d4abc:	220a      	movs	r2, #10
   d4abe:	a815      	add	r0, sp, #84	; 0x54
   d4ac0:	f7ff fbb0 	bl	d4224 <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d4ac4:	212c      	movs	r1, #44	; 0x2c
   d4ac6:	a815      	add	r0, sp, #84	; 0x54
   d4ac8:	f002 ffa0 	bl	d7a0c <_ZN5Print5printEc>
    file.print(readings[1]);
   d4acc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   d4ad0:	220a      	movs	r2, #10
   d4ad2:	a815      	add	r0, sp, #84	; 0x54
   d4ad4:	f7ff fba6 	bl	d4224 <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d4ad8:	212c      	movs	r1, #44	; 0x2c
   d4ada:	a815      	add	r0, sp, #84	; 0x54
   d4adc:	f002 ff96 	bl	d7a0c <_ZN5Print5printEc>
    file.print(readings[2]);
   d4ae0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   d4ae4:	220a      	movs	r2, #10
   d4ae6:	a815      	add	r0, sp, #84	; 0x54
   d4ae8:	f7ff fb9c 	bl	d4224 <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d4aec:	212c      	movs	r1, #44	; 0x2c
   d4aee:	a815      	add	r0, sp, #84	; 0x54
   d4af0:	f002 ff8c 	bl	d7a0c <_ZN5Print5printEc>
    file.print(readings[3]);
   d4af4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   d4af8:	220a      	movs	r2, #10
   d4afa:	a815      	add	r0, sp, #84	; 0x54
   d4afc:	f7ff fb92 	bl	d4224 <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d4b00:	212c      	movs	r1, #44	; 0x2c
   d4b02:	a815      	add	r0, sp, #84	; 0x54
   d4b04:	f002 ff82 	bl	d7a0c <_ZN5Print5printEc>
    file.print(readings[6]);
   d4b08:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   d4b0c:	220a      	movs	r2, #10
   d4b0e:	a815      	add	r0, sp, #84	; 0x54
   d4b10:	f7ff fb88 	bl	d4224 <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d4b14:	212c      	movs	r1, #44	; 0x2c
   d4b16:	a815      	add	r0, sp, #84	; 0x54
   d4b18:	f002 ff78 	bl	d7a0c <_ZN5Print5printEc>
    file.print(readings[7]);
   d4b1c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   d4b20:	220a      	movs	r2, #10
   d4b22:	a815      	add	r0, sp, #84	; 0x54
   d4b24:	f7ff fb7e 	bl	d4224 <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d4b28:	212c      	movs	r1, #44	; 0x2c
   d4b2a:	a815      	add	r0, sp, #84	; 0x54
   d4b2c:	f002 ff6e 	bl	d7a0c <_ZN5Print5printEc>
    file.print(readings[8]);
   d4b30:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   d4b34:	220a      	movs	r2, #10
   d4b36:	a815      	add	r0, sp, #84	; 0x54
   d4b38:	f7ff fb74 	bl	d4224 <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d4b3c:	212c      	movs	r1, #44	; 0x2c
   d4b3e:	a815      	add	r0, sp, #84	; 0x54
   d4b40:	f002 ff64 	bl	d7a0c <_ZN5Print5printEc>
    file.print(readings[9]);
   d4b44:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   d4b48:	220a      	movs	r2, #10
   d4b4a:	a815      	add	r0, sp, #84	; 0x54
   d4b4c:	f7ff fb6a 	bl	d4224 <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d4b50:	212c      	movs	r1, #44	; 0x2c
   d4b52:	a815      	add	r0, sp, #84	; 0x54
   d4b54:	f002 ff5a 	bl	d7a0c <_ZN5Print5printEc>
    file.print(readings[10]);
   d4b58:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d4b5c:	220a      	movs	r2, #10
   d4b5e:	a815      	add	r0, sp, #84	; 0x54
   d4b60:	f7ff fb60 	bl	d4224 <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d4b64:	212c      	movs	r1, #44	; 0x2c
   d4b66:	a815      	add	r0, sp, #84	; 0x54
   d4b68:	f002 ff50 	bl	d7a0c <_ZN5Print5printEc>
    file.println(readings[11]);
   d4b6c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d4b70:	220a      	movs	r2, #10
   d4b72:	a815      	add	r0, sp, #84	; 0x54
   d4b74:	f7ff fb63 	bl	d423e <_ZN5Print7printlnItLi0EEEjT_i>
    file.close();
   d4b78:	a819      	add	r0, sp, #100	; 0x64
   d4b7a:	f001 fa55 	bl	d6028 <_ZN7FatFile5closeEv>
   d4b7e:	e690      	b.n	d48a2 <_Z16fileprintresultsv+0x46>
            val = n;
   d4b80:	4621      	mov	r1, r4
   d4b82:	e6bd      	b.n	d4900 <_Z16fileprintresultsv+0xa4>
    Serial.println(F("Error opening file!"));
   d4b84:	f003 fa46 	bl	d8014 <_Z16_fetch_usbserialv>
   d4b88:	490d      	ldr	r1, [pc, #52]	; (d4bc0 <_Z16fileprintresultsv+0x364>)
   d4b8a:	f002 ff58 	bl	d7a3e <_ZN5Print7printlnEPK19__FlashStringHelper>
    virtual ~Print() {}
   d4b8e:	e688      	b.n	d48a2 <_Z16fileprintresultsv+0x46>
   d4b90:	000d91c8 	.word	0x000d91c8
   d4b94:	2003e4ec 	.word	0x2003e4ec
   d4b98:	000d8faa 	.word	0x000d8faa
   d4b9c:	2003e540 	.word	0x2003e540
   d4ba0:	000d90f0 	.word	0x000d90f0
   d4ba4:	2003dfd8 	.word	0x2003dfd8
   d4ba8:	2003dfdc 	.word	0x2003dfdc
   d4bac:	000d90ea 	.word	0x000d90ea
   d4bb0:	2003dfe0 	.word	0x2003dfe0
   d4bb4:	000d90ed 	.word	0x000d90ed
   d4bb8:	000d9194 	.word	0x000d9194
   d4bbc:	000d91a1 	.word	0x000d91a1
   d4bc0:	000d90c7 	.word	0x000d90c7

000d4bc4 <loop>:
void loop() {
   d4bc4:	b538      	push	{r3, r4, r5, lr}
   d4bc6:	f002 faf9 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
  unsigned long elapsedTime = currentTime % (onTime + offTime);
   d4bca:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   d4bce:	fbb0 f3f4 	udiv	r3, r0, r4
   d4bd2:	fb03 0414 	mls	r4, r3, r4, r0
  aw.analogWrite(LedPin, isLedOn ? LEDbright : LEDdim); // Turn LED on or off
   d4bd6:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   d4bda:	bf34      	ite	cc
   d4bdc:	4b0d      	ldrcc	r3, [pc, #52]	; (d4c14 <loop+0x50>)
   d4bde:	4b0e      	ldrcs	r3, [pc, #56]	; (d4c18 <loop+0x54>)
   d4be0:	4d0e      	ldr	r5, [pc, #56]	; (d4c1c <loop+0x58>)
   d4be2:	781a      	ldrb	r2, [r3, #0]
   d4be4:	7829      	ldrb	r1, [r5, #0]
   d4be6:	480e      	ldr	r0, [pc, #56]	; (d4c20 <loop+0x5c>)
   d4be8:	f000 fb86 	bl	d52f8 <_ZN15Adafruit_AW952311analogWriteEhh>
  serialprintresults();
   d4bec:	f7ff fc26 	bl	d443c <_Z18serialprintresultsv>
    fileprintresults();
   d4bf0:	f7ff fe34 	bl	d485c <_Z16fileprintresultsv>
  aw.analogWrite(LedPin, isLedOff ? LEDdim : LEDbright);
   d4bf4:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   d4bf8:	bf34      	ite	cc
   d4bfa:	4b07      	ldrcc	r3, [pc, #28]	; (d4c18 <loop+0x54>)
   d4bfc:	4b05      	ldrcs	r3, [pc, #20]	; (d4c14 <loop+0x50>)
   d4bfe:	7829      	ldrb	r1, [r5, #0]
   d4c00:	781a      	ldrb	r2, [r3, #0]
   d4c02:	4807      	ldr	r0, [pc, #28]	; (d4c20 <loop+0x5c>)
   d4c04:	f000 fb78 	bl	d52f8 <_ZN15Adafruit_AW952311analogWriteEhh>
  serialprintresults();
   d4c08:	f7ff fc18 	bl	d443c <_Z18serialprintresultsv>
}
   d4c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  fileprintresults();
   d4c10:	f7ff be24 	b.w	d485c <_Z16fileprintresultsv>
   d4c14:	2003dfd8 	.word	0x2003dfd8
   d4c18:	2003dfdc 	.word	0x2003dfdc
   d4c1c:	2003e0ac 	.word	0x2003e0ac
   d4c20:	2003e568 	.word	0x2003e568

000d4c24 <_GLOBAL__sub_I_as7341>:
   d4c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
Adafruit_AS7341 as7341;
   d4c26:	4825      	ldr	r0, [pc, #148]	; (d4cbc <_GLOBAL__sub_I_as7341+0x98>)
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4c28:	4c25      	ldr	r4, [pc, #148]	; (d4cc0 <_GLOBAL__sub_I_as7341+0x9c>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4c2a:	4d26      	ldr	r5, [pc, #152]	; (d4cc4 <_GLOBAL__sub_I_as7341+0xa0>)
   d4c2c:	f000 f858 	bl	d4ce0 <_ZN15Adafruit_AS7341C1Ev>
Adafruit_AW9523 aw;
   d4c30:	4825      	ldr	r0, [pc, #148]	; (d4cc8 <_GLOBAL__sub_I_as7341+0xa4>)
   d4c32:	f000 fb24 	bl	d527e <_ZN15Adafruit_AW9523C1Ev>
   d4c36:	4b25      	ldr	r3, [pc, #148]	; (d4ccc <_GLOBAL__sub_I_as7341+0xa8>)
   d4c38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4c3c:	6099      	str	r1, [r3, #8]
   d4c3e:	4924      	ldr	r1, [pc, #144]	; (d4cd0 <_GLOBAL__sub_I_as7341+0xac>)
   d4c40:	6019      	str	r1, [r3, #0]
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4c42:	2164      	movs	r1, #100	; 0x64
   d4c44:	f884 1460 	strb.w	r1, [r4, #1120]	; 0x460
  {
   d4c48:	4922      	ldr	r1, [pc, #136]	; (d4cd4 <_GLOBAL__sub_I_as7341+0xb0>)
   d4c4a:	f8c4 1470 	str.w	r1, [r4, #1136]	; 0x470
   d4c4e:	2200      	movs	r2, #0
   d4c50:	2101      	movs	r1, #1
   d4c52:	821a      	strh	r2, [r3, #16]
    Print() : write_error(0) {}
   d4c54:	605a      	str	r2, [r3, #4]
   d4c56:	71e2      	strb	r2, [r4, #7]
   d4c58:	f8a4 243c 	strh.w	r2, [r4, #1084]	; 0x43c
   d4c5c:	f884 246a 	strb.w	r2, [r4, #1130]	; 0x46a
   d4c60:	f884 1474 	strb.w	r1, [r4, #1140]	; 0x474
   d4c64:	f8c4 2478 	str.w	r2, [r4, #1144]	; 0x478
   d4c68:	f8a4 247c 	strh.w	r2, [r4, #1148]	; 0x47c
   d4c6c:	7829      	ldrb	r1, [r5, #0]
   d4c6e:	f3bf 8f5b 	dmb	ish
   d4c72:	f011 0101 	ands.w	r1, r1, #1
   d4c76:	d10b      	bne.n	d4c90 <_GLOBAL__sub_I_as7341+0x6c>
   d4c78:	4628      	mov	r0, r5
   d4c7a:	9101      	str	r1, [sp, #4]
   d4c7c:	f7ff fa11 	bl	d40a2 <__cxa_guard_acquire>
   d4c80:	9901      	ldr	r1, [sp, #4]
   d4c82:	b128      	cbz	r0, d4c90 <_GLOBAL__sub_I_as7341+0x6c>
   d4c84:	4814      	ldr	r0, [pc, #80]	; (d4cd8 <_GLOBAL__sub_I_as7341+0xb4>)
   d4c86:	f003 f80f 	bl	d7ca8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4c8a:	4628      	mov	r0, r5
   d4c8c:	f7ff fa0e 	bl	d40ac <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4c90:	4b11      	ldr	r3, [pc, #68]	; (d4cd8 <_GLOBAL__sub_I_as7341+0xb4>)
   d4c92:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
SYSTEM_THREAD(ENABLED);
   d4c96:	2100      	movs	r1, #0
   d4c98:	2001      	movs	r0, #1
   d4c9a:	f002 fbff 	bl	d749c <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4c9e:	4b0f      	ldr	r3, [pc, #60]	; (d4cdc <_GLOBAL__sub_I_as7341+0xb8>)
   d4ca0:	2200      	movs	r2, #0
   d4ca2:	601a      	str	r2, [r3, #0]
   d4ca4:	809a      	strh	r2, [r3, #4]
    SleepResult() {}
   d4ca6:	719a      	strb	r2, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4ca8:	2002      	movs	r0, #2
    SleepResult() {}
   d4caa:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   d4cae:	609a      	str	r2, [r3, #8]
   d4cb0:	b003      	add	sp, #12
   d4cb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        set_system_mode(mode);
   d4cb6:	f002 bbe1 	b.w	d747c <set_system_mode>
   d4cba:	bf00      	nop
   d4cbc:	2003e540 	.word	0x2003e540
   d4cc0:	2003e0b0 	.word	0x2003e0b0
   d4cc4:	2003e0a0 	.word	0x2003e0a0
   d4cc8:	2003e568 	.word	0x2003e568
   d4ccc:	2003e56c 	.word	0x2003e56c
   d4cd0:	000d91c8 	.word	0x000d91c8
   d4cd4:	000d91b4 	.word	0x000d91b4
   d4cd8:	2003e0a4 	.word	0x2003e0a4
   d4cdc:	2003e534 	.word	0x2003e534

000d4ce0 <_ZN15Adafruit_AS7341C1Ev>:

/**
 * @brief Construct a new Adafruit_AS7341::Adafruit_AS7341 object
 *
 */
Adafruit_AS7341::Adafruit_AS7341(void) {}
   d4ce0:	4a02      	ldr	r2, [pc, #8]	; (d4cec <_ZN15Adafruit_AS7341C1Ev+0xc>)
   d4ce2:	6002      	str	r2, [r0, #0]
   d4ce4:	2200      	movs	r2, #0
   d4ce6:	7102      	strb	r2, [r0, #4]
   d4ce8:	6082      	str	r2, [r0, #8]
   d4cea:	4770      	bx	lr
   d4cec:	000d921c 	.word	0x000d921c

000d4cf0 <_ZN15Adafruit_AS73415beginEhP7TwoWirel>:
 *    @param  sensor_id
 *            The unique ID to differentiate the sensors from others
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_AS7341::begin(uint8_t i2c_address, TwoWire *wire,
                            int32_t sensor_id) {
   d4cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4cf4:	4604      	mov	r4, r0
  if (i2c_dev) {
   d4cf6:	6880      	ldr	r0, [r0, #8]
                            int32_t sensor_id) {
   d4cf8:	460f      	mov	r7, r1
   d4cfa:	4690      	mov	r8, r2
   d4cfc:	461e      	mov	r6, r3
  if (i2c_dev) {
   d4cfe:	b110      	cbz	r0, d4d06 <_ZN15Adafruit_AS73415beginEhP7TwoWirel+0x16>
    delete i2c_dev; // remove old interface
   d4d00:	2110      	movs	r1, #16
   d4d02:	f003 fb2d 	bl	d8360 <_ZdlPvj>
  }

  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   d4d06:	2010      	movs	r0, #16
   d4d08:	f7ff f9c5 	bl	d4096 <_Znwj>
   d4d0c:	4605      	mov	r5, r0
   d4d0e:	b118      	cbz	r0, d4d18 <_ZN15Adafruit_AS73415beginEhP7TwoWirel+0x28>
   d4d10:	4642      	mov	r2, r8
   d4d12:	4639      	mov	r1, r7
   d4d14:	f000 fcab 	bl	d566e <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d4d18:	60a5      	str	r5, [r4, #8]

  if (!i2c_dev->begin()) {
   d4d1a:	2101      	movs	r1, #1
   d4d1c:	4628      	mov	r0, r5
   d4d1e:	f000 fcc2 	bl	d56a6 <_ZN18Adafruit_I2CDevice5beginEb>
   d4d22:	b130      	cbz	r0, d4d32 <_ZN15Adafruit_AS73415beginEhP7TwoWirel+0x42>
    return false;
  }

  return _init(sensor_id);
   d4d24:	6823      	ldr	r3, [r4, #0]
   d4d26:	4631      	mov	r1, r6
   d4d28:	4620      	mov	r0, r4
   d4d2a:	681b      	ldr	r3, [r3, #0]
}
   d4d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return _init(sensor_id);
   d4d30:	4718      	bx	r3
}
   d4d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4d36 <_ZN15Adafruit_AS734111powerEnableEb>:
/**
 * @brief Sets the power state of the sensor
 *
 * @param enable_power true: on false: off
 */
void Adafruit_AS7341::powerEnable(bool enable_power) {
   d4d36:	b570      	push	{r4, r5, r6, lr}
  Adafruit_BusIO_Register enable_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4d38:	2501      	movs	r5, #1
void Adafruit_AS7341::powerEnable(bool enable_power) {
   d4d3a:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4d3c:	2600      	movs	r6, #0
   d4d3e:	e9cd 6500 	strd	r6, r5, [sp]
void Adafruit_AS7341::powerEnable(bool enable_power) {
   d4d42:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4d44:	462b      	mov	r3, r5
   d4d46:	6881      	ldr	r1, [r0, #8]
   d4d48:	2280      	movs	r2, #128	; 0x80
   d4d4a:	a804      	add	r0, sp, #16
   d4d4c:	f000 fb93 	bl	d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits pon_en =
      Adafruit_BusIO_RegisterBits(&enable_reg, 1, 0);
   d4d50:	4633      	mov	r3, r6
   d4d52:	462a      	mov	r2, r5
   d4d54:	a904      	add	r1, sp, #16
   d4d56:	a802      	add	r0, sp, #8
   d4d58:	f000 fc5e 	bl	d5618 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  pon_en.write(enable_power);
   d4d5c:	4621      	mov	r1, r4
   d4d5e:	a802      	add	r0, sp, #8
   d4d60:	f000 fc6c 	bl	d563c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   d4d64:	b00a      	add	sp, #40	; 0x28
   d4d66:	bd70      	pop	{r4, r5, r6, pc}

000d4d68 <_ZN15Adafruit_AS73415_initEl>:
bool Adafruit_AS7341::_init(int32_t sensor_id) {
   d4d68:	b570      	push	{r4, r5, r6, lr}
      Adafruit_BusIO_Register(i2c_dev, AS7341_WHOAMI);
   d4d6a:	2501      	movs	r5, #1
bool Adafruit_AS7341::_init(int32_t sensor_id) {
   d4d6c:	b088      	sub	sp, #32
      Adafruit_BusIO_Register(i2c_dev, AS7341_WHOAMI);
   d4d6e:	2400      	movs	r4, #0
   d4d70:	e9cd 4500 	strd	r4, r5, [sp]
   d4d74:	462b      	mov	r3, r5
   d4d76:	6881      	ldr	r1, [r0, #8]
   d4d78:	2292      	movs	r2, #146	; 0x92
bool Adafruit_AS7341::_init(int32_t sensor_id) {
   d4d7a:	4606      	mov	r6, r0
      Adafruit_BusIO_Register(i2c_dev, AS7341_WHOAMI);
   d4d7c:	a802      	add	r0, sp, #8
   d4d7e:	f000 fb7a 	bl	d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (chip_id.read() & 0xFC != AS7341_CHIP_ID << 2) {
   d4d82:	a802      	add	r0, sp, #8
   d4d84:	f000 fc2c 	bl	d55e0 <_ZN23Adafruit_BusIO_Register4readEv>
   d4d88:	07c3      	lsls	r3, r0, #31
   d4d8a:	d406      	bmi.n	d4d9a <_ZN15Adafruit_AS73415_initEl+0x32>
  powerEnable(true);
   d4d8c:	4630      	mov	r0, r6
   d4d8e:	4629      	mov	r1, r5
   d4d90:	f7ff ffd1 	bl	d4d36 <_ZN15Adafruit_AS734111powerEnableEb>
  return true;
   d4d94:	4628      	mov	r0, r5
}
   d4d96:	b008      	add	sp, #32
   d4d98:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d4d9a:	4620      	mov	r0, r4
   d4d9c:	e7fb      	b.n	d4d96 <_ZN15Adafruit_AS73415_initEl+0x2e>

000d4d9e <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>:
 * @brief Enables measurement of spectral data
 *
 * @param enable_measurement true: enabled false: disabled
 * @return true: success false: failure
 */
bool Adafruit_AS7341::enableSpectralMeasurement(bool enable_measurement) {
   d4d9e:	b510      	push	{r4, lr}

  Adafruit_BusIO_Register enable_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4da0:	2301      	movs	r3, #1
bool Adafruit_AS7341::enableSpectralMeasurement(bool enable_measurement) {
   d4da2:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4da4:	2200      	movs	r2, #0
   d4da6:	e9cd 2300 	strd	r2, r3, [sp]
bool Adafruit_AS7341::enableSpectralMeasurement(bool enable_measurement) {
   d4daa:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4dac:	2280      	movs	r2, #128	; 0x80
   d4dae:	6881      	ldr	r1, [r0, #8]
   d4db0:	a804      	add	r0, sp, #16
   d4db2:	f000 fb60 	bl	d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  Adafruit_BusIO_RegisterBits spec_enable_bit =
      Adafruit_BusIO_RegisterBits(&enable_reg, 1, 1);
   d4db6:	2301      	movs	r3, #1
   d4db8:	461a      	mov	r2, r3
   d4dba:	a904      	add	r1, sp, #16
   d4dbc:	a802      	add	r0, sp, #8
   d4dbe:	f000 fc2b 	bl	d5618 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  return spec_enable_bit.write(enable_measurement);
   d4dc2:	4621      	mov	r1, r4
   d4dc4:	a802      	add	r0, sp, #8
   d4dc6:	f000 fc39 	bl	d563c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   d4dca:	b00a      	add	sp, #40	; 0x28
   d4dcc:	bd10      	pop	{r4, pc}

000d4dce <_ZN15Adafruit_AS734110enableSMUXEv>:

bool Adafruit_AS7341::enableSMUX(void) {
   d4dce:	b530      	push	{r4, r5, lr}

  Adafruit_BusIO_Register enable_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4dd0:	2501      	movs	r5, #1
bool Adafruit_AS7341::enableSMUX(void) {
   d4dd2:	b08b      	sub	sp, #44	; 0x2c
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4dd4:	2400      	movs	r4, #0
   d4dd6:	e9cd 4500 	strd	r4, r5, [sp]
   d4dda:	462b      	mov	r3, r5
   d4ddc:	6881      	ldr	r1, [r0, #8]
   d4dde:	2280      	movs	r2, #128	; 0x80
   d4de0:	a804      	add	r0, sp, #16
   d4de2:	f000 fb48 	bl	d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits smux_enable_bit =
      Adafruit_BusIO_RegisterBits(&enable_reg, 1, 4);
   d4de6:	462a      	mov	r2, r5
   d4de8:	2304      	movs	r3, #4
   d4dea:	a904      	add	r1, sp, #16
   d4dec:	a802      	add	r0, sp, #8
   d4dee:	f000 fc13 	bl	d5618 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  bool success = smux_enable_bit.write(true);
   d4df2:	4629      	mov	r1, r5
   d4df4:	a802      	add	r0, sp, #8
   d4df6:	f000 fc21 	bl	d563c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
   d4dfa:	4605      	mov	r5, r0

  int timeOut = 1000; // Arbitrary value, but if it takes 1000 milliseconds then
                      // something is wrong
  int count = 0;
  while (smux_enable_bit.read() && count < timeOut) {
   d4dfc:	a802      	add	r0, sp, #8
   d4dfe:	f000 fc10 	bl	d5622 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   d4e02:	b138      	cbz	r0, d4e14 <_ZN15Adafruit_AS734110enableSMUXEv+0x46>
   d4e04:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
   d4e08:	d00b      	beq.n	d4e22 <_ZN15Adafruit_AS734110enableSMUXEv+0x54>
    delay(1);
   d4e0a:	2001      	movs	r0, #1
   d4e0c:	f002 fbf2 	bl	d75f4 <delay>
    count++;
   d4e10:	3401      	adds	r4, #1
  while (smux_enable_bit.read() && count < timeOut) {
   d4e12:	e7f3      	b.n	d4dfc <_ZN15Adafruit_AS734110enableSMUXEv+0x2e>
  }
  if (count >= timeOut)
    return false;
   d4e14:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
   d4e18:	bf08      	it	eq
   d4e1a:	2500      	moveq	r5, #0
  else
    return success;
}
   d4e1c:	4628      	mov	r0, r5
   d4e1e:	b00b      	add	sp, #44	; 0x2c
   d4e20:	bd30      	pop	{r4, r5, pc}
    return false;
   d4e22:	2500      	movs	r5, #0
   d4e24:	e7fa      	b.n	d4e1c <_ZN15Adafruit_AS734110enableSMUXEv+0x4e>

000d4e26 <_ZN15Adafruit_AS734114setSMUXCommandE17as7341_smux_cmd_t>:
      Adafruit_BusIO_RegisterBits(&gpio2_reg, 1, 1);

  return gpio_output_value_bit.write(gpio_high);
}

bool Adafruit_AS7341::setSMUXCommand(as7341_smux_cmd_t command) {
   d4e26:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register cfg6_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG6);
   d4e28:	2301      	movs	r3, #1
bool Adafruit_AS7341::setSMUXCommand(as7341_smux_cmd_t command) {
   d4e2a:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG6);
   d4e2c:	2200      	movs	r2, #0
   d4e2e:	e9cd 2300 	strd	r2, r3, [sp]
bool Adafruit_AS7341::setSMUXCommand(as7341_smux_cmd_t command) {
   d4e32:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG6);
   d4e34:	22af      	movs	r2, #175	; 0xaf
   d4e36:	6881      	ldr	r1, [r0, #8]
   d4e38:	a804      	add	r0, sp, #16
   d4e3a:	f000 fb1c 	bl	d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits smux_command_bits =
      Adafruit_BusIO_RegisterBits(&cfg6_reg, 2, 3);
   d4e3e:	2303      	movs	r3, #3
   d4e40:	2202      	movs	r2, #2
   d4e42:	a904      	add	r1, sp, #16
   d4e44:	a802      	add	r0, sp, #8
   d4e46:	f000 fbe7 	bl	d5618 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  return smux_command_bits.write(command);
   d4e4a:	4621      	mov	r1, r4
   d4e4c:	a802      	add	r0, sp, #8
   d4e4e:	f000 fbf5 	bl	d563c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   d4e52:	b00a      	add	sp, #40	; 0x28
   d4e54:	bd10      	pop	{r4, pc}

000d4e56 <_ZN15Adafruit_AS734114getIsDataReadyEv>:
/**
 * @brief
 *
 * @return true: success false: failure
 */
bool Adafruit_AS7341::getIsDataReady() {
   d4e56:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register status2_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_STATUS2);
   d4e58:	2300      	movs	r3, #0
bool Adafruit_AS7341::getIsDataReady() {
   d4e5a:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_STATUS2);
   d4e5c:	2401      	movs	r4, #1
   d4e5e:	e9cd 3400 	strd	r3, r4, [sp]
   d4e62:	22a3      	movs	r2, #163	; 0xa3
   d4e64:	6881      	ldr	r1, [r0, #8]
   d4e66:	4623      	mov	r3, r4
   d4e68:	a804      	add	r0, sp, #16
   d4e6a:	f000 fb04 	bl	d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits avalid_bit =
      Adafruit_BusIO_RegisterBits(&status2_reg, 1, 6);
   d4e6e:	2306      	movs	r3, #6
   d4e70:	4622      	mov	r2, r4
   d4e72:	a904      	add	r1, sp, #16
   d4e74:	a802      	add	r0, sp, #8
   d4e76:	f000 fbcf 	bl	d5618 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  return avalid_bit.read();
   d4e7a:	a802      	add	r0, sp, #8
   d4e7c:	f000 fbd1 	bl	d5622 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
}
   d4e80:	3800      	subs	r0, #0
   d4e82:	bf18      	it	ne
   d4e84:	2001      	movne	r0, #1
   d4e86:	b00a      	add	sp, #40	; 0x28
   d4e88:	bd10      	pop	{r4, pc}

000d4e8a <_ZN15Adafruit_AS734112delayForDataEi.part.0>:
void Adafruit_AS7341::delayForData(int waitTime) {
   d4e8a:	b510      	push	{r4, lr}
   d4e8c:	4604      	mov	r4, r0
    while (!getIsDataReady()) {
   d4e8e:	4620      	mov	r0, r4
   d4e90:	f7ff ffe1 	bl	d4e56 <_ZN15Adafruit_AS734114getIsDataReadyEv>
   d4e94:	b918      	cbnz	r0, d4e9e <_ZN15Adafruit_AS734112delayForDataEi.part.0+0x14>
      delay(1);
   d4e96:	2001      	movs	r0, #1
   d4e98:	f002 fbac 	bl	d75f4 <delay>
    while (!getIsDataReady()) {
   d4e9c:	e7f7      	b.n	d4e8e <_ZN15Adafruit_AS734112delayForDataEi.part.0+0x4>
}
   d4e9e:	bd10      	pop	{r4, pc}

000d4ea0 <_ZN15Adafruit_AS73418setATIMEEh>:
 * Total integration time will be `(ATIME + 1) * (ASTEP + 1) * 2.78µS`
 *
 * @param atime_value The integration time step count
 * @return true: success false: failure
 */
bool Adafruit_AS7341::setATIME(uint8_t atime_value) {
   d4ea0:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register atime_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   d4ea2:	2301      	movs	r3, #1
bool Adafruit_AS7341::setATIME(uint8_t atime_value) {
   d4ea4:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   d4ea6:	2500      	movs	r5, #0
   d4ea8:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AS7341::setATIME(uint8_t atime_value) {
   d4eac:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   d4eae:	2281      	movs	r2, #129	; 0x81
   d4eb0:	6881      	ldr	r1, [r0, #8]
   d4eb2:	a802      	add	r0, sp, #8
   d4eb4:	f000 fadf 	bl	d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return atime_reg.write(atime_value);
   d4eb8:	462a      	mov	r2, r5
   d4eba:	4621      	mov	r1, r4
   d4ebc:	a802      	add	r0, sp, #8
   d4ebe:	f000 fb31 	bl	d5524 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   d4ec2:	b009      	add	sp, #36	; 0x24
   d4ec4:	bd30      	pop	{r4, r5, pc}

000d4ec6 <_ZN15Adafruit_AS73418getATIMEEv>:
 *
 * Total integration time will be `(ATIME + 1) * (ASTEP + 1) * 2.78µS`
 *
 * @return uint8_t The current integration time step count
 */
uint8_t Adafruit_AS7341::getATIME() {
   d4ec6:	b500      	push	{lr}
  Adafruit_BusIO_Register atime_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   d4ec8:	2301      	movs	r3, #1
uint8_t Adafruit_AS7341::getATIME() {
   d4eca:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   d4ecc:	2200      	movs	r2, #0
   d4ece:	e9cd 2300 	strd	r2, r3, [sp]
   d4ed2:	2281      	movs	r2, #129	; 0x81
   d4ed4:	6881      	ldr	r1, [r0, #8]
   d4ed6:	a802      	add	r0, sp, #8
   d4ed8:	f000 facd 	bl	d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return atime_reg.read();
   d4edc:	a802      	add	r0, sp, #8
   d4ede:	f000 fb7f 	bl	d55e0 <_ZN23Adafruit_BusIO_Register4readEv>
}
   d4ee2:	b2c0      	uxtb	r0, r0
   d4ee4:	b009      	add	sp, #36	; 0x24
   d4ee6:	f85d fb04 	ldr.w	pc, [sp], #4

000d4eea <_ZN15Adafruit_AS73418setASTEPEt>:
 *
 * @param astep_value Integration time step size in 2.78 microsecon increments
 * Step size is `(astep_value+1) * 2.78 uS`
 * @return true: success false: failure
 */
bool Adafruit_AS7341::setASTEP(uint16_t astep_value) {
   d4eea:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register astep_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   d4eec:	2301      	movs	r3, #1
bool Adafruit_AS7341::setASTEP(uint16_t astep_value) {
   d4eee:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   d4ef0:	2500      	movs	r5, #0
   d4ef2:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AS7341::setASTEP(uint16_t astep_value) {
   d4ef6:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   d4ef8:	2302      	movs	r3, #2
   d4efa:	6881      	ldr	r1, [r0, #8]
   d4efc:	22ca      	movs	r2, #202	; 0xca
   d4efe:	a802      	add	r0, sp, #8
   d4f00:	f000 fab9 	bl	d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return astep_reg.write(astep_value);
   d4f04:	462a      	mov	r2, r5
   d4f06:	4621      	mov	r1, r4
   d4f08:	a802      	add	r0, sp, #8
   d4f0a:	f000 fb0b 	bl	d5524 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   d4f0e:	b009      	add	sp, #36	; 0x24
   d4f10:	bd30      	pop	{r4, r5, pc}

000d4f12 <_ZN15Adafruit_AS73418getASTEPEv>:
 *
 * Step size is `(astep_value+1) * 2.78 uS`
 *
 * @return uint16_t The current integration time step size
 */
uint16_t Adafruit_AS7341::getASTEP() {
   d4f12:	b500      	push	{lr}
  Adafruit_BusIO_Register astep_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   d4f14:	2300      	movs	r3, #0
uint16_t Adafruit_AS7341::getASTEP() {
   d4f16:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   d4f18:	2201      	movs	r2, #1
   d4f1a:	e9cd 3200 	strd	r3, r2, [sp]
   d4f1e:	2302      	movs	r3, #2
   d4f20:	6881      	ldr	r1, [r0, #8]
   d4f22:	22ca      	movs	r2, #202	; 0xca
   d4f24:	a802      	add	r0, sp, #8
   d4f26:	f000 faa6 	bl	d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return astep_reg.read();
   d4f2a:	a802      	add	r0, sp, #8
   d4f2c:	f000 fb58 	bl	d55e0 <_ZN23Adafruit_BusIO_Register4readEv>
}
   d4f30:	b280      	uxth	r0, r0
   d4f32:	b009      	add	sp, #36	; 0x24
   d4f34:	f85d fb04 	ldr.w	pc, [sp], #4

000d4f38 <_ZN15Adafruit_AS73417setGainE13as7341_gain_t>:
 * @brief Sets the ADC gain multiplier
 *
 * @param gain_value The gain amount. must be an `as7341_gain_t`
 * @return true: success false: failure
 */
bool Adafruit_AS7341::setGain(as7341_gain_t gain_value) {
   d4f38:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register cfg1_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   d4f3a:	2301      	movs	r3, #1
bool Adafruit_AS7341::setGain(as7341_gain_t gain_value) {
   d4f3c:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   d4f3e:	2500      	movs	r5, #0
   d4f40:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AS7341::setGain(as7341_gain_t gain_value) {
   d4f44:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   d4f46:	22aa      	movs	r2, #170	; 0xaa
   d4f48:	6881      	ldr	r1, [r0, #8]
   d4f4a:	a802      	add	r0, sp, #8
   d4f4c:	f000 fa93 	bl	d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return cfg1_reg.write(gain_value);
   d4f50:	462a      	mov	r2, r5
   d4f52:	4621      	mov	r1, r4
   d4f54:	a802      	add	r0, sp, #8
   d4f56:	f000 fae5 	bl	d5524 <_ZN23Adafruit_BusIO_Register5writeEmh>
  // AGAIN bitfield is only[0:4] but the rest is empty
}
   d4f5a:	b009      	add	sp, #36	; 0x24
   d4f5c:	bd30      	pop	{r4, r5, pc}

000d4f5e <_ZN15Adafruit_AS73417getGainEv>:
/**
 * @brief Returns the ADC gain multiplier
 *
 * @return as7341_gain_t The current ADC gain multiplier
 */
as7341_gain_t Adafruit_AS7341::getGain() {
   d4f5e:	b500      	push	{lr}
  Adafruit_BusIO_Register cfg1_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   d4f60:	2301      	movs	r3, #1
as7341_gain_t Adafruit_AS7341::getGain() {
   d4f62:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   d4f64:	2200      	movs	r2, #0
   d4f66:	e9cd 2300 	strd	r2, r3, [sp]
   d4f6a:	22aa      	movs	r2, #170	; 0xaa
   d4f6c:	6881      	ldr	r1, [r0, #8]
   d4f6e:	a802      	add	r0, sp, #8
   d4f70:	f000 fa81 	bl	d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return (as7341_gain_t)cfg1_reg.read();
   d4f74:	a802      	add	r0, sp, #8
   d4f76:	f000 fb33 	bl	d55e0 <_ZN23Adafruit_BusIO_Register4readEv>
}
   d4f7a:	b2c0      	uxtb	r0, r0
   d4f7c:	b009      	add	sp, #36	; 0x24
   d4f7e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4f82:	0000      	movs	r0, r0
   d4f84:	0000      	movs	r0, r0
	...

000d4f88 <_ZN15Adafruit_AS734113toBasicCountsEt>:
 *
 * @param raw The raw ADC values to convert
 *
 * @return float The basic counts
 */
float Adafruit_AS7341::toBasicCounts(uint16_t raw) {
   d4f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f8a:	ed2d 8b02 	vpush	{d8}
   d4f8e:	460d      	mov	r5, r1
   d4f90:	4604      	mov	r4, r0
  float gain_val = 0;
  as7341_gain_t gain = getGain();
   d4f92:	f7ff ffe4 	bl	d4f5e <_ZN15Adafruit_AS73417getGainEv>
  switch (gain) {
   d4f96:	280a      	cmp	r0, #10
   d4f98:	bf97      	itett	ls
   d4f9a:	4b1f      	ldrls	r3, [pc, #124]	; (d5018 <_ZN15Adafruit_AS734113toBasicCountsEt+0x90>)
  as7341_gain_t gain = getGain();
   d4f9c:	eddf 8a1f 	vldrhi	s17, [pc, #124]	; d501c <_ZN15Adafruit_AS734113toBasicCountsEt+0x94>
   d4fa0:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   d4fa4:	edd0 8a00 	vldrls	s17, [r0]
    break;
  case AS7341_GAIN_512X:
    gain_val = 512;
    break;
  }
  return raw / (gain_val * (getATIME() + 1) * (getASTEP() + 1) * 2.78 / 1000);
   d4fa8:	4620      	mov	r0, r4
   d4faa:	f7ff ff8c 	bl	d4ec6 <_ZN15Adafruit_AS73418getATIMEEv>
   d4fae:	1c43      	adds	r3, r0, #1
   d4fb0:	4620      	mov	r0, r4
   d4fb2:	ee08 3a10 	vmov	s16, r3
   d4fb6:	f7ff ffac 	bl	d4f12 <_ZN15Adafruit_AS73418getASTEPEv>
   d4fba:	4604      	mov	r4, r0
   d4fbc:	3401      	adds	r4, #1
   d4fbe:	4628      	mov	r0, r5
   d4fc0:	f003 fb24 	bl	d860c <__aeabi_i2d>
   d4fc4:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   d4fc8:	ee07 4a90 	vmov	s15, r4
   d4fcc:	ee28 8a28 	vmul.f32	s16, s16, s17
   d4fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4fd4:	4606      	mov	r6, r0
   d4fd6:	ee67 7a88 	vmul.f32	s15, s15, s16
   d4fda:	460f      	mov	r7, r1
   d4fdc:	ee17 0a90 	vmov	r0, s15
   d4fe0:	f003 fb26 	bl	d8630 <__aeabi_f2d>
   d4fe4:	a30a      	add	r3, pc, #40	; (adr r3, d5010 <_ZN15Adafruit_AS734113toBasicCountsEt+0x88>)
   d4fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4fea:	f003 fb79 	bl	d86e0 <__aeabi_dmul>
   d4fee:	4b0c      	ldr	r3, [pc, #48]	; (d5020 <_ZN15Adafruit_AS734113toBasicCountsEt+0x98>)
   d4ff0:	2200      	movs	r2, #0
   d4ff2:	f003 fc9f 	bl	d8934 <__aeabi_ddiv>
   d4ff6:	4602      	mov	r2, r0
   d4ff8:	460b      	mov	r3, r1
   d4ffa:	4630      	mov	r0, r6
   d4ffc:	4639      	mov	r1, r7
   d4ffe:	f003 fc99 	bl	d8934 <__aeabi_ddiv>
   d5002:	f003 fe65 	bl	d8cd0 <__aeabi_d2f>
}
   d5006:	ecbd 8b02 	vpop	{d8}
   d500a:	ee00 0a10 	vmov	s0, r0
   d500e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5010:	a3d70a3d 	.word	0xa3d70a3d
   d5014:	40063d70 	.word	0x40063d70
   d5018:	000d91e8 	.word	0x000d91e8
   d501c:	00000000 	.word	0x00000000
   d5020:	408f4000 	.word	0x408f4000

000d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>:
 * @brief Write a byte to the given register
 *
 * @param addr Register address
 * @param val The value to set the register to
 */
void Adafruit_AS7341::writeRegister(byte addr, byte val) {
   d5024:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register reg = Adafruit_BusIO_Register(i2c_dev, addr);
   d5026:	2301      	movs	r3, #1
void Adafruit_AS7341::writeRegister(byte addr, byte val) {
   d5028:	b089      	sub	sp, #36	; 0x24
  Adafruit_BusIO_Register reg = Adafruit_BusIO_Register(i2c_dev, addr);
   d502a:	2500      	movs	r5, #0
   d502c:	e9cd 5300 	strd	r5, r3, [sp]
void Adafruit_AS7341::writeRegister(byte addr, byte val) {
   d5030:	4614      	mov	r4, r2
  Adafruit_BusIO_Register reg = Adafruit_BusIO_Register(i2c_dev, addr);
   d5032:	460a      	mov	r2, r1
   d5034:	6881      	ldr	r1, [r0, #8]
   d5036:	a802      	add	r0, sp, #8
   d5038:	f000 fa1d 	bl	d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  reg.write(val);
   d503c:	462a      	mov	r2, r5
   d503e:	4621      	mov	r1, r4
   d5040:	a802      	add	r0, sp, #8
   d5042:	f000 fa6f 	bl	d5524 <_ZN23Adafruit_BusIO_Register5writeEmh>
   d5046:	b009      	add	sp, #36	; 0x24
   d5048:	bd30      	pop	{r4, r5, pc}

000d504a <_ZN15Adafruit_AS734120setup_F1F4_Clear_NIREv>:
void Adafruit_AS7341::setup_F1F4_Clear_NIR() {
   d504a:	b510      	push	{r4, lr}
  writeRegister(byte(0x00), byte(0x30)); // F3 left set to ADC2
   d504c:	2230      	movs	r2, #48	; 0x30
   d504e:	2100      	movs	r1, #0
void Adafruit_AS7341::setup_F1F4_Clear_NIR() {
   d5050:	4604      	mov	r4, r0
  writeRegister(byte(0x00), byte(0x30)); // F3 left set to ADC2
   d5052:	f7ff ffe7 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x01), byte(0x01)); // F1 left set to ADC0
   d5056:	2201      	movs	r2, #1
   d5058:	4611      	mov	r1, r2
   d505a:	4620      	mov	r0, r4
   d505c:	f7ff ffe2 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x02), byte(0x00)); // Reserved or disabled
   d5060:	4620      	mov	r0, r4
   d5062:	2200      	movs	r2, #0
   d5064:	2102      	movs	r1, #2
   d5066:	f7ff ffdd 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x03), byte(0x00)); // F8 left disabled
   d506a:	4620      	mov	r0, r4
   d506c:	2200      	movs	r2, #0
   d506e:	2103      	movs	r1, #3
   d5070:	f7ff ffd8 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x04), byte(0x00)); // F6 left disabled
   d5074:	4620      	mov	r0, r4
   d5076:	2200      	movs	r2, #0
   d5078:	2104      	movs	r1, #4
   d507a:	f7ff ffd3 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(
   d507e:	4620      	mov	r0, r4
   d5080:	2242      	movs	r2, #66	; 0x42
   d5082:	2105      	movs	r1, #5
   d5084:	f7ff ffce 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x06), byte(0x00)); // F5 left disbled
   d5088:	4620      	mov	r0, r4
   d508a:	2200      	movs	r2, #0
   d508c:	2106      	movs	r1, #6
   d508e:	f7ff ffc9 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x07), byte(0x00)); // F7 left disbled
   d5092:	4620      	mov	r0, r4
   d5094:	2200      	movs	r2, #0
   d5096:	2107      	movs	r1, #7
   d5098:	f7ff ffc4 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x08), byte(0x50)); // CLEAR connected to ADC4
   d509c:	4620      	mov	r0, r4
   d509e:	2250      	movs	r2, #80	; 0x50
   d50a0:	2108      	movs	r1, #8
   d50a2:	f7ff ffbf 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x09), byte(0x00)); // F5 right disabled
   d50a6:	4620      	mov	r0, r4
   d50a8:	2200      	movs	r2, #0
   d50aa:	2109      	movs	r1, #9
   d50ac:	f7ff ffba 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0A), byte(0x00)); // F7 right disabled
   d50b0:	4620      	mov	r0, r4
   d50b2:	2200      	movs	r2, #0
   d50b4:	210a      	movs	r1, #10
   d50b6:	f7ff ffb5 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0B), byte(0x00)); // Reserved or disabled
   d50ba:	4620      	mov	r0, r4
   d50bc:	2200      	movs	r2, #0
   d50be:	210b      	movs	r1, #11
   d50c0:	f7ff ffb0 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0C), byte(0x20)); // F2 right connected to ADC1
   d50c4:	4620      	mov	r0, r4
   d50c6:	2220      	movs	r2, #32
   d50c8:	210c      	movs	r1, #12
   d50ca:	f7ff ffab 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0D), byte(0x04)); // F4 right connected to ADC3
   d50ce:	4620      	mov	r0, r4
   d50d0:	2204      	movs	r2, #4
   d50d2:	210d      	movs	r1, #13
   d50d4:	f7ff ffa6 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0E), byte(0x00)); // F6/F8 right disabled
   d50d8:	4620      	mov	r0, r4
   d50da:	2200      	movs	r2, #0
   d50dc:	210e      	movs	r1, #14
   d50de:	f7ff ffa1 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0F), byte(0x30)); // F3 right connected to AD2
   d50e2:	4620      	mov	r0, r4
   d50e4:	2230      	movs	r2, #48	; 0x30
   d50e6:	210f      	movs	r1, #15
   d50e8:	f7ff ff9c 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x10), byte(0x01)); // F1 right connected to AD0
   d50ec:	4620      	mov	r0, r4
   d50ee:	2201      	movs	r2, #1
   d50f0:	2110      	movs	r1, #16
   d50f2:	f7ff ff97 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x11), byte(0x50)); // CLEAR right connected to AD4
   d50f6:	4620      	mov	r0, r4
   d50f8:	2250      	movs	r2, #80	; 0x50
   d50fa:	2111      	movs	r1, #17
   d50fc:	f7ff ff92 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x12), byte(0x00)); // Reserved or disabled
   d5100:	4620      	mov	r0, r4
   d5102:	2200      	movs	r2, #0
   d5104:	2112      	movs	r1, #18
   d5106:	f7ff ff8d 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   d510a:	4620      	mov	r0, r4
   d510c:	2206      	movs	r2, #6
}
   d510e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   d5112:	2113      	movs	r1, #19
   d5114:	f7ff bf86 	b.w	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>

000d5118 <_ZN15Adafruit_AS734120setup_F5F8_Clear_NIREv>:
  writeRegister(byte(0x00), byte(0x00)); // F3 left disable
   d5118:	2200      	movs	r2, #0
void Adafruit_AS7341::setup_F5F8_Clear_NIR() {
   d511a:	b510      	push	{r4, lr}
  writeRegister(byte(0x00), byte(0x00)); // F3 left disable
   d511c:	4611      	mov	r1, r2
void Adafruit_AS7341::setup_F5F8_Clear_NIR() {
   d511e:	4604      	mov	r4, r0
  writeRegister(byte(0x00), byte(0x00)); // F3 left disable
   d5120:	f7ff ff80 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x01), byte(0x00)); // F1 left disable
   d5124:	4620      	mov	r0, r4
   d5126:	2200      	movs	r2, #0
   d5128:	2101      	movs	r1, #1
   d512a:	f7ff ff7b 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x02), byte(0x00)); // reserved/disable
   d512e:	4620      	mov	r0, r4
   d5130:	2200      	movs	r2, #0
   d5132:	2102      	movs	r1, #2
   d5134:	f7ff ff76 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x03), byte(0x40)); // F8 left connected to ADC3
   d5138:	4620      	mov	r0, r4
   d513a:	2240      	movs	r2, #64	; 0x40
   d513c:	2103      	movs	r1, #3
   d513e:	f7ff ff71 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x04), byte(0x02)); // F6 left connected to ADC1
   d5142:	4620      	mov	r0, r4
   d5144:	2202      	movs	r2, #2
   d5146:	2104      	movs	r1, #4
   d5148:	f7ff ff6c 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x05), byte(0x00)); // F4/ F2 disabled
   d514c:	4620      	mov	r0, r4
   d514e:	2200      	movs	r2, #0
   d5150:	2105      	movs	r1, #5
   d5152:	f7ff ff67 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x06), byte(0x10)); // F5 left connected to ADC0
   d5156:	4620      	mov	r0, r4
   d5158:	2210      	movs	r2, #16
   d515a:	2106      	movs	r1, #6
   d515c:	f7ff ff62 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x07), byte(0x03)); // F7 left connected to ADC2
   d5160:	4620      	mov	r0, r4
   d5162:	2203      	movs	r2, #3
   d5164:	2107      	movs	r1, #7
   d5166:	f7ff ff5d 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x08), byte(0x50)); // CLEAR Connected to ADC4
   d516a:	4620      	mov	r0, r4
   d516c:	2250      	movs	r2, #80	; 0x50
   d516e:	2108      	movs	r1, #8
   d5170:	f7ff ff58 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x09), byte(0x10)); // F5 right connected to ADC0
   d5174:	4620      	mov	r0, r4
   d5176:	2210      	movs	r2, #16
   d5178:	2109      	movs	r1, #9
   d517a:	f7ff ff53 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0A), byte(0x03)); // F7 right connected to ADC2
   d517e:	4620      	mov	r0, r4
   d5180:	2203      	movs	r2, #3
   d5182:	210a      	movs	r1, #10
   d5184:	f7ff ff4e 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0B), byte(0x00)); // Reserved or disabled
   d5188:	4620      	mov	r0, r4
   d518a:	2200      	movs	r2, #0
   d518c:	210b      	movs	r1, #11
   d518e:	f7ff ff49 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0C), byte(0x00)); // F2 right disabled
   d5192:	4620      	mov	r0, r4
   d5194:	2200      	movs	r2, #0
   d5196:	210c      	movs	r1, #12
   d5198:	f7ff ff44 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0D), byte(0x00)); // F4 right disabled
   d519c:	4620      	mov	r0, r4
   d519e:	2200      	movs	r2, #0
   d51a0:	210d      	movs	r1, #13
   d51a2:	f7ff ff3f 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(
   d51a6:	4620      	mov	r0, r4
   d51a8:	2224      	movs	r2, #36	; 0x24
   d51aa:	210e      	movs	r1, #14
   d51ac:	f7ff ff3a 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0F), byte(0x00)); // F3 right disabled
   d51b0:	4620      	mov	r0, r4
   d51b2:	2200      	movs	r2, #0
   d51b4:	210f      	movs	r1, #15
   d51b6:	f7ff ff35 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x10), byte(0x00)); // F1 right disabled
   d51ba:	4620      	mov	r0, r4
   d51bc:	2200      	movs	r2, #0
   d51be:	2110      	movs	r1, #16
   d51c0:	f7ff ff30 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x11), byte(0x50)); // CLEAR right connected to AD4
   d51c4:	4620      	mov	r0, r4
   d51c6:	2250      	movs	r2, #80	; 0x50
   d51c8:	2111      	movs	r1, #17
   d51ca:	f7ff ff2b 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x12), byte(0x00)); // Reserved or disabled
   d51ce:	4620      	mov	r0, r4
   d51d0:	2200      	movs	r2, #0
   d51d2:	2112      	movs	r1, #18
   d51d4:	f7ff ff26 	bl	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   d51d8:	4620      	mov	r0, r4
   d51da:	2206      	movs	r2, #6
}
   d51dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   d51e0:	2113      	movs	r1, #19
   d51e2:	f7ff bf1f 	b.w	d5024 <_ZN15Adafruit_AS734113writeRegisterEhh>

000d51e6 <_ZN15Adafruit_AS734118setSMUXLowChannelsEb>:
void Adafruit_AS7341::setSMUXLowChannels(bool f1_f4) {
   d51e6:	b538      	push	{r3, r4, r5, lr}
   d51e8:	4604      	mov	r4, r0
   d51ea:	460d      	mov	r5, r1
  enableSpectralMeasurement(false);
   d51ec:	2100      	movs	r1, #0
   d51ee:	f7ff fdd6 	bl	d4d9e <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>
  setSMUXCommand(AS7341_SMUX_CMD_WRITE);
   d51f2:	2102      	movs	r1, #2
   d51f4:	4620      	mov	r0, r4
   d51f6:	f7ff fe16 	bl	d4e26 <_ZN15Adafruit_AS734114setSMUXCommandE17as7341_smux_cmd_t>
    setup_F1F4_Clear_NIR();
   d51fa:	4620      	mov	r0, r4
  if (f1_f4) {
   d51fc:	b135      	cbz	r5, d520c <_ZN15Adafruit_AS734118setSMUXLowChannelsEb+0x26>
    setup_F1F4_Clear_NIR();
   d51fe:	f7ff ff24 	bl	d504a <_ZN15Adafruit_AS734120setup_F1F4_Clear_NIREv>
  enableSMUX();
   d5202:	4620      	mov	r0, r4
}
   d5204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  enableSMUX();
   d5208:	f7ff bde1 	b.w	d4dce <_ZN15Adafruit_AS734110enableSMUXEv>
    setup_F5F8_Clear_NIR();
   d520c:	f7ff ff84 	bl	d5118 <_ZN15Adafruit_AS734120setup_F5F8_Clear_NIREv>
   d5210:	e7f7      	b.n	d5202 <_ZN15Adafruit_AS734118setSMUXLowChannelsEb+0x1c>

000d5212 <_ZN15Adafruit_AS734115readAllChannelsEPt>:
bool Adafruit_AS7341::readAllChannels(uint16_t *readings_buffer) {
   d5212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5216:	4604      	mov	r4, r0
   d5218:	b088      	sub	sp, #32
   d521a:	460e      	mov	r6, r1
  setSMUXLowChannels(true);        // Configure SMUX to read low channels
   d521c:	2101      	movs	r1, #1
   d521e:	f7ff ffe2 	bl	d51e6 <_ZN15Adafruit_AS734118setSMUXLowChannelsEb>
  enableSpectralMeasurement(true); // Start integration
   d5222:	2101      	movs	r1, #1
   d5224:	4620      	mov	r0, r4
   d5226:	f7ff fdba 	bl	d4d9e <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>
      Adafruit_BusIO_Register(i2c_dev, AS7341_CH0_DATA_L, 2);
   d522a:	f04f 0800 	mov.w	r8, #0
   d522e:	4620      	mov	r0, r4
   d5230:	2701      	movs	r7, #1
   d5232:	f7ff fe2a 	bl	d4e8a <_ZN15Adafruit_AS734112delayForDataEi.part.0>
   d5236:	2302      	movs	r3, #2
   d5238:	68a1      	ldr	r1, [r4, #8]
   d523a:	2295      	movs	r2, #149	; 0x95
   d523c:	e9cd 8700 	strd	r8, r7, [sp]
   d5240:	a802      	add	r0, sp, #8
   d5242:	f000 f918 	bl	d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  bool low_success = channel_data_reg.read((uint8_t *)readings_buffer, 12);
   d5246:	220c      	movs	r2, #12
   d5248:	4631      	mov	r1, r6
   d524a:	a802      	add	r0, sp, #8
   d524c:	f000 f988 	bl	d5560 <_ZN23Adafruit_BusIO_Register4readEPhh>
  setSMUXLowChannels(false);       // Configure SMUX to read high channels
   d5250:	4641      	mov	r1, r8
  bool low_success = channel_data_reg.read((uint8_t *)readings_buffer, 12);
   d5252:	4605      	mov	r5, r0
  setSMUXLowChannels(false);       // Configure SMUX to read high channels
   d5254:	4620      	mov	r0, r4
   d5256:	f7ff ffc6 	bl	d51e6 <_ZN15Adafruit_AS734118setSMUXLowChannelsEb>
  enableSpectralMeasurement(true); // Start integration
   d525a:	4639      	mov	r1, r7
   d525c:	4620      	mov	r0, r4
   d525e:	f7ff fd9e 	bl	d4d9e <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>
  if (waitTime == 0) // Wait forever
   d5262:	4620      	mov	r0, r4
   d5264:	f7ff fe11 	bl	d4e8a <_ZN15Adafruit_AS734112delayForDataEi.part.0>
  return low_success &&
   d5268:	b12d      	cbz	r5, d5276 <_ZN15Adafruit_AS734115readAllChannelsEPt+0x64>
         channel_data_reg.read((uint8_t *)&readings_buffer[6], 12);
   d526a:	220c      	movs	r2, #12
   d526c:	18b1      	adds	r1, r6, r2
   d526e:	a802      	add	r0, sp, #8
   d5270:	f000 f976 	bl	d5560 <_ZN23Adafruit_BusIO_Register4readEPhh>
   d5274:	4605      	mov	r5, r0
}
   d5276:	4628      	mov	r0, r5
   d5278:	b008      	add	sp, #32
   d527a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d527e <_ZN15Adafruit_AW9523C1Ev>:
#include "Adafruit_AW9523.h"

/*!
 *    @brief  Instantiates a new AW9523 class
 */
Adafruit_AW9523::Adafruit_AW9523(void) {}
   d527e:	2200      	movs	r2, #0
   d5280:	6002      	str	r2, [r0, #0]
   d5282:	4770      	bx	lr

000d5284 <_ZN15Adafruit_AW95235resetEv>:

/*!
 *    @brief  Perform a soft reset over I2C
 *    @return True I2C reset command was acknowledged
 */
bool Adafruit_AW9523::reset(void) {
   d5284:	b510      	push	{r4, lr}
  Adafruit_I2CRegister resetreg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_SOFTRESET);
   d5286:	2301      	movs	r3, #1
bool Adafruit_AW9523::reset(void) {
   d5288:	b088      	sub	sp, #32
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_SOFTRESET);
   d528a:	2400      	movs	r4, #0
   d528c:	e9cd 4300 	strd	r4, r3, [sp]
   d5290:	227f      	movs	r2, #127	; 0x7f
   d5292:	6801      	ldr	r1, [r0, #0]
   d5294:	a802      	add	r0, sp, #8
   d5296:	f000 f8ee 	bl	d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return resetreg.write(0);
   d529a:	4622      	mov	r2, r4
   d529c:	4621      	mov	r1, r4
   d529e:	a802      	add	r0, sp, #8
   d52a0:	f000 f940 	bl	d5524 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   d52a4:	b008      	add	sp, #32
   d52a6:	bd10      	pop	{r4, pc}

000d52a8 <_ZN15Adafruit_AW952319interruptEnableGPIOEt>:
/*!
 *    @brief  Sets interrupt watch for all 16 GPIO, 1 == enabled
 *    @param  pins 16-bits of pins we may want INT enabled
 *    @return True I2C write command was acknowledged
 */
bool Adafruit_AW9523::interruptEnableGPIO(uint16_t pins) {
   d52a8:	b530      	push	{r4, r5, lr}
  Adafruit_I2CRegister int0reg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_INTENABLE0, 2, LSBFIRST);
   d52aa:	2301      	movs	r3, #1
bool Adafruit_AW9523::interruptEnableGPIO(uint16_t pins) {
   d52ac:	b089      	sub	sp, #36	; 0x24
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_INTENABLE0, 2, LSBFIRST);
   d52ae:	2500      	movs	r5, #0
   d52b0:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AW9523::interruptEnableGPIO(uint16_t pins) {
   d52b4:	460c      	mov	r4, r1
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_INTENABLE0, 2, LSBFIRST);
   d52b6:	2302      	movs	r3, #2
   d52b8:	6801      	ldr	r1, [r0, #0]
   d52ba:	2206      	movs	r2, #6
   d52bc:	a802      	add	r0, sp, #8
   d52be:	f000 f8da 	bl	d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (!int0reg.write(~pins)) {
   d52c2:	462a      	mov	r2, r5
   d52c4:	43e1      	mvns	r1, r4
   d52c6:	a802      	add	r0, sp, #8
   d52c8:	f000 f92c 	bl	d5524 <_ZN23Adafruit_BusIO_Register5writeEmh>
    return false;
  }
  return true;
}
   d52cc:	b009      	add	sp, #36	; 0x24
   d52ce:	bd30      	pop	{r4, r5, pc}

000d52d0 <_ZN15Adafruit_AW952318configureDirectionEt>:
/*!
 *    @brief  Sets direction for all 16 GPIO, 1 == output, 0 == input
 *    @param  pins 16-bits of pins we want to set direction
 *    @return True I2C write command was acknowledged
 */
bool Adafruit_AW9523::configureDirection(uint16_t pins) {
   d52d0:	b530      	push	{r4, r5, lr}
  Adafruit_I2CRegister conf0reg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   d52d2:	2301      	movs	r3, #1
bool Adafruit_AW9523::configureDirection(uint16_t pins) {
   d52d4:	b089      	sub	sp, #36	; 0x24
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   d52d6:	2500      	movs	r5, #0
   d52d8:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AW9523::configureDirection(uint16_t pins) {
   d52dc:	460c      	mov	r4, r1
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   d52de:	2302      	movs	r3, #2
   d52e0:	6801      	ldr	r1, [r0, #0]
   d52e2:	2204      	movs	r2, #4
   d52e4:	a802      	add	r0, sp, #8
   d52e6:	f000 f8c6 	bl	d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (!conf0reg.write(~pins)) {
   d52ea:	462a      	mov	r2, r5
   d52ec:	43e1      	mvns	r1, r4
   d52ee:	a802      	add	r0, sp, #8
   d52f0:	f000 f918 	bl	d5524 <_ZN23Adafruit_BusIO_Register5writeEmh>
    return false;
  }

  return true;
}
   d52f4:	b009      	add	sp, #36	; 0x24
   d52f6:	bd30      	pop	{r4, r5, pc}

000d52f8 <_ZN15Adafruit_AW952311analogWriteEhh>:
/*!
 *    @brief  Sets constant-current setting for one pin
 *    @param  pin GPIO to set, from 0 to 15 inclusive
 *    @param  val Ratio to set, from 0 (off) to 255 (max current)
 */
void Adafruit_AW9523::analogWrite(uint8_t pin, uint8_t val) {
   d52f8:	b530      	push	{r4, r5, lr}
  uint8_t reg;

  // See Table 13. 256 step dimming control register
  if ((pin >= 0) && (pin <= 7)) {
   d52fa:	2907      	cmp	r1, #7
void Adafruit_AW9523::analogWrite(uint8_t pin, uint8_t val) {
   d52fc:	4614      	mov	r4, r2
   d52fe:	b089      	sub	sp, #36	; 0x24
   d5300:	f04f 0200 	mov.w	r2, #0
  if ((pin >= 0) && (pin <= 7)) {
   d5304:	d810      	bhi.n	d5328 <_ZN15Adafruit_AW952311analogWriteEhh+0x30>
    reg = 0x24 + pin;
   d5306:	3124      	adds	r1, #36	; 0x24
  }
  if ((pin >= 8) && (pin <= 11)) {
    reg = 0x20 + pin - 8;
  }
  if ((pin >= 12) && (pin <= 15)) {
    reg = 0x2C + pin - 12;
   d5308:	b2ca      	uxtb	r2, r1
  }

  Adafruit_I2CRegister ledCCreg = Adafruit_I2CRegister(i2c_dev, reg);
   d530a:	2301      	movs	r3, #1
   d530c:	2500      	movs	r5, #0
   d530e:	e9cd 5300 	strd	r5, r3, [sp]
   d5312:	6801      	ldr	r1, [r0, #0]
   d5314:	a802      	add	r0, sp, #8
   d5316:	f000 f8ae 	bl	d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  ledCCreg.write(val);
   d531a:	462a      	mov	r2, r5
   d531c:	4621      	mov	r1, r4
   d531e:	a802      	add	r0, sp, #8
   d5320:	f000 f900 	bl	d5524 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   d5324:	b009      	add	sp, #36	; 0x24
   d5326:	bd30      	pop	{r4, r5, pc}
  if ((pin >= 8) && (pin <= 11)) {
   d5328:	f1a1 0308 	sub.w	r3, r1, #8
   d532c:	2b03      	cmp	r3, #3
   d532e:	d801      	bhi.n	d5334 <_ZN15Adafruit_AW952311analogWriteEhh+0x3c>
    reg = 0x20 + pin - 8;
   d5330:	3118      	adds	r1, #24
   d5332:	e7e9      	b.n	d5308 <_ZN15Adafruit_AW952311analogWriteEhh+0x10>
  if ((pin >= 12) && (pin <= 15)) {
   d5334:	f1a1 030c 	sub.w	r3, r1, #12
   d5338:	2b03      	cmp	r3, #3
   d533a:	d8e6      	bhi.n	d530a <_ZN15Adafruit_AW952311analogWriteEhh+0x12>
    reg = 0x2C + pin - 12;
   d533c:	3120      	adds	r1, #32
   d533e:	e7e3      	b.n	d5308 <_ZN15Adafruit_AW952311analogWriteEhh+0x10>

000d5340 <_ZN15Adafruit_AW95237pinModeEhh>:
 *    @brief  Sets pin mode / direction for one pin
 *    @param  pin GPIO to set, from 0 to 15 inclusive
 *    @param  mode Can be INPUT, OUTPUT for GPIO digital, or AW9523_LED_MODE for
 * constant current LED drive
 */
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   d5340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // GPIO Direction
  Adafruit_I2CRegister conf0reg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   d5344:	2401      	movs	r4, #1
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   d5346:	b092      	sub	sp, #72	; 0x48
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   d5348:	2600      	movs	r6, #0
   d534a:	e9cd 6400 	strd	r6, r4, [sp]
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   d534e:	460f      	mov	r7, r1
   d5350:	4680      	mov	r8, r0
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   d5352:	6801      	ldr	r1, [r0, #0]
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   d5354:	4615      	mov	r5, r2
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   d5356:	2302      	movs	r3, #2
   d5358:	2204      	movs	r2, #4
   d535a:	a806      	add	r0, sp, #24
   d535c:	f000 f88b 	bl	d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_I2CRegisterBits confbit =
      Adafruit_I2CRegisterBits(&conf0reg, 1, pin); // # bits, bit_shift
   d5360:	463b      	mov	r3, r7
   d5362:	4622      	mov	r2, r4
   d5364:	a906      	add	r1, sp, #24
   d5366:	a802      	add	r0, sp, #8
   d5368:	f000 f956 	bl	d5618 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  // GPIO mode or LED mode?
  Adafruit_I2CRegister ledmodereg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_LEDMODE, 2, LSBFIRST);
   d536c:	f8d8 1000 	ldr.w	r1, [r8]
   d5370:	2302      	movs	r3, #2
   d5372:	2212      	movs	r2, #18
   d5374:	e9cd 6400 	strd	r6, r4, [sp]
   d5378:	a80c      	add	r0, sp, #48	; 0x30
   d537a:	f000 f87c 	bl	d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_I2CRegisterBits modebit =
      Adafruit_I2CRegisterBits(&ledmodereg, 1, pin); // # bits, bit_shift
   d537e:	463b      	mov	r3, r7
   d5380:	4622      	mov	r2, r4
   d5382:	a90c      	add	r1, sp, #48	; 0x30
   d5384:	a804      	add	r0, sp, #16
   d5386:	f000 f947 	bl	d5618 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  if (mode == OUTPUT) {
   d538a:	42a5      	cmp	r5, r4
   d538c:	d10a      	bne.n	d53a4 <_ZN15Adafruit_AW95237pinModeEhh+0x64>
    confbit.write(0);
   d538e:	4631      	mov	r1, r6
   d5390:	a802      	add	r0, sp, #8
   d5392:	f000 f953 	bl	d563c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
    modebit.write(1);
   d5396:	4629      	mov	r1, r5
    modebit.write(1);
  }

  if (mode == AW9523_LED_MODE) {
    confbit.write(0);
    modebit.write(0);
   d5398:	a804      	add	r0, sp, #16
   d539a:	f000 f94f 	bl	d563c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  }
}
   d539e:	b012      	add	sp, #72	; 0x48
   d53a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (mode == INPUT) {
   d53a4:	b13d      	cbz	r5, d53b6 <_ZN15Adafruit_AW95237pinModeEhh+0x76>
  if (mode == AW9523_LED_MODE) {
   d53a6:	2d03      	cmp	r5, #3
   d53a8:	d1f9      	bne.n	d539e <_ZN15Adafruit_AW95237pinModeEhh+0x5e>
    confbit.write(0);
   d53aa:	4631      	mov	r1, r6
   d53ac:	a802      	add	r0, sp, #8
   d53ae:	f000 f945 	bl	d563c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
    modebit.write(0);
   d53b2:	4631      	mov	r1, r6
   d53b4:	e7f0      	b.n	d5398 <_ZN15Adafruit_AW95237pinModeEhh+0x58>
    confbit.write(1);
   d53b6:	4621      	mov	r1, r4
   d53b8:	a802      	add	r0, sp, #8
   d53ba:	f000 f93f 	bl	d563c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
    modebit.write(1);
   d53be:	4621      	mov	r1, r4
   d53c0:	e7ea      	b.n	d5398 <_ZN15Adafruit_AW95237pinModeEhh+0x58>

000d53c2 <_ZN15Adafruit_AW952314openDrainPort0Eb>:
/*!
 *    @brief  Turns on/off open drain output for ALL port 0 pins (GPIO 0-7)
 *    @param  od True to enable open drain, False for push-pull
 *    @return True I2C write command was acknowledged
 */
bool Adafruit_AW9523::openDrainPort0(bool od) {
   d53c2:	b530      	push	{r4, r5, lr}
  Adafruit_I2CRegister gcrreg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_GCR, 1);
   d53c4:	2300      	movs	r3, #0
bool Adafruit_AW9523::openDrainPort0(bool od) {
   d53c6:	b08b      	sub	sp, #44	; 0x2c
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_GCR, 1);
   d53c8:	2501      	movs	r5, #1
   d53ca:	e9cd 3500 	strd	r3, r5, [sp]
bool Adafruit_AW9523::openDrainPort0(bool od) {
   d53ce:	460c      	mov	r4, r1
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_GCR, 1);
   d53d0:	462b      	mov	r3, r5
   d53d2:	6801      	ldr	r1, [r0, #0]
   d53d4:	2211      	movs	r2, #17
   d53d6:	a804      	add	r0, sp, #16
   d53d8:	f000 f84d 	bl	d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  Adafruit_I2CRegisterBits opendrain =
      Adafruit_I2CRegisterBits(&gcrreg, 1, 4); // # bits, bit_shift
   d53dc:	2304      	movs	r3, #4
   d53de:	462a      	mov	r2, r5
   d53e0:	a904      	add	r1, sp, #16
   d53e2:	a802      	add	r0, sp, #8
   d53e4:	f000 f918 	bl	d5618 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  return opendrain.write(!od);
   d53e8:	ea84 0105 	eor.w	r1, r4, r5
   d53ec:	a802      	add	r0, sp, #8
   d53ee:	f000 f925 	bl	d563c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   d53f2:	b00b      	add	sp, #44	; 0x2c
   d53f4:	bd30      	pop	{r4, r5, pc}

000d53f6 <_ZN15Adafruit_AW95235beginEhP7TwoWire>:
bool Adafruit_AW9523::begin(uint8_t addr, TwoWire *wire) {
   d53f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   d53f8:	4604      	mov	r4, r0
  if (i2c_dev) {
   d53fa:	6800      	ldr	r0, [r0, #0]
bool Adafruit_AW9523::begin(uint8_t addr, TwoWire *wire) {
   d53fc:	b089      	sub	sp, #36	; 0x24
   d53fe:	460e      	mov	r6, r1
   d5400:	4617      	mov	r7, r2
  if (i2c_dev) {
   d5402:	b110      	cbz	r0, d540a <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x14>
    delete i2c_dev; // remove old interface
   d5404:	2110      	movs	r1, #16
   d5406:	f002 ffab 	bl	d8360 <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(addr, wire);
   d540a:	2010      	movs	r0, #16
   d540c:	f7fe fe43 	bl	d4096 <_Znwj>
   d5410:	4605      	mov	r5, r0
   d5412:	b118      	cbz	r0, d541c <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x26>
   d5414:	463a      	mov	r2, r7
   d5416:	4631      	mov	r1, r6
   d5418:	f000 f929 	bl	d566e <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d541c:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
   d541e:	2101      	movs	r1, #1
   d5420:	4628      	mov	r0, r5
   d5422:	f000 f940 	bl	d56a6 <_ZN18Adafruit_I2CDevice5beginEb>
   d5426:	b918      	cbnz	r0, d5430 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x3a>
    return false;
   d5428:	2500      	movs	r5, #0
}
   d542a:	4628      	mov	r0, r5
   d542c:	b009      	add	sp, #36	; 0x24
   d542e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!reset()) {
   d5430:	4620      	mov	r0, r4
   d5432:	f7ff ff27 	bl	d5284 <_ZN15Adafruit_AW95235resetEv>
   d5436:	4605      	mov	r5, r0
   d5438:	2800      	cmp	r0, #0
   d543a:	d0f5      	beq.n	d5428 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x32>
  Adafruit_I2CRegister idreg = Adafruit_I2CRegister(i2c_dev, AW9523_REG_CHIPID);
   d543c:	2301      	movs	r3, #1
   d543e:	2600      	movs	r6, #0
   d5440:	e9cd 6300 	strd	r6, r3, [sp]
   d5444:	6821      	ldr	r1, [r4, #0]
   d5446:	2210      	movs	r2, #16
   d5448:	a802      	add	r0, sp, #8
   d544a:	f000 f814 	bl	d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (idreg.read() != 0x23) {
   d544e:	a802      	add	r0, sp, #8
   d5450:	f000 f8c6 	bl	d55e0 <_ZN23Adafruit_BusIO_Register4readEv>
   d5454:	2823      	cmp	r0, #35	; 0x23
   d5456:	d10c      	bne.n	d5472 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x7c>
  configureDirection(0x0); // all inputs!
   d5458:	4631      	mov	r1, r6
   d545a:	4620      	mov	r0, r4
   d545c:	f7ff ff38 	bl	d52d0 <_ZN15Adafruit_AW952318configureDirectionEt>
  openDrainPort0(false);   // push pull default
   d5460:	4631      	mov	r1, r6
   d5462:	4620      	mov	r0, r4
   d5464:	f7ff ffad 	bl	d53c2 <_ZN15Adafruit_AW952314openDrainPort0Eb>
  interruptEnableGPIO(0);  // no interrupt
   d5468:	4631      	mov	r1, r6
   d546a:	4620      	mov	r0, r4
   d546c:	f7ff ff1c 	bl	d52a8 <_ZN15Adafruit_AW952319interruptEnableGPIOEt>
  return true;
   d5470:	e7db      	b.n	d542a <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x34>
    return false;
   d5472:	4635      	mov	r5, r6
   d5474:	e7d9      	b.n	d542a <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x34>

000d5476 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
   d5476:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
   d5478:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = NULL;
   d547a:	e9c0 1500 	strd	r1, r5, [r0]
  _addrwidth = address_width;
  _address = reg_addr;
   d547e:	8142      	strh	r2, [r0, #10]
  _addrwidth = address_width;
   d5480:	f89d 1010 	ldrb.w	r1, [sp, #16]
  _byteorder = byteorder;
   d5484:	f89d 200c 	ldrb.w	r2, [sp, #12]
                                                 uint8_t address_width) {
   d5488:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
   d548a:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
   d548c:	7382      	strb	r2, [r0, #14]
  _width = width;
   d548e:	7303      	strb	r3, [r0, #12]
}
   d5490:	bd30      	pop	{r4, r5, pc}

000d5492 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   d5492:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5494:	4603      	mov	r3, r0
   d5496:	b085      	sub	sp, #20

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   d5498:	8940      	ldrh	r0, [r0, #10]
                           (uint8_t)(_address >> 8)};
   d549a:	f8ad 000c 	strh.w	r0, [sp, #12]
   d549e:	ea4f 2e10 	mov.w	lr, r0, lsr #8

  if (_i2cdevice) {
   d54a2:	6818      	ldr	r0, [r3, #0]
                           (uint8_t)(_address >> 8)};
   d54a4:	7a9c      	ldrb	r4, [r3, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   d54a6:	460e      	mov	r6, r1
   d54a8:	4617      	mov	r7, r2
  if (_i2cdevice) {
   d54aa:	b140      	cbz	r0, d54be <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2c>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   d54ac:	7b5b      	ldrb	r3, [r3, #13]
   d54ae:	9301      	str	r3, [sp, #4]
   d54b0:	ab03      	add	r3, sp, #12
   d54b2:	9300      	str	r3, [sp, #0]
   d54b4:	2301      	movs	r3, #1
   d54b6:	f000 f905 	bl	d56c4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   d54ba:	b005      	add	sp, #20
   d54bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   d54be:	6858      	ldr	r0, [r3, #4]
   d54c0:	2800      	cmp	r0, #0
   d54c2:	d0fa      	beq.n	d54ba <_ZN23Adafruit_BusIO_Register5writeEPhh+0x28>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   d54c4:	f893 c008 	ldrb.w	ip, [r3, #8]
   d54c8:	7b5d      	ldrb	r5, [r3, #13]
   d54ca:	f1bc 0f03 	cmp.w	ip, #3
   d54ce:	d10b      	bne.n	d54e8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   d54d0:	f02e 0e01 	bic.w	lr, lr, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   d54d4:	3501      	adds	r5, #1
      addrbuffer[0] =
   d54d6:	f88d e00c 	strb.w	lr, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   d54da:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   d54de:	9500      	str	r5, [sp, #0]
   d54e0:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   d54e2:	f000 fa28 	bl	d5936 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d54e6:	e7e8      	b.n	d54ba <_ZN23Adafruit_BusIO_Register5writeEPhh+0x28>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   d54e8:	f1bc 0f00 	cmp.w	ip, #0
   d54ec:	d108      	bne.n	d5500 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6e>
      addrbuffer[0] &= ~0x80;
   d54ee:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   d54f2:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   d54f6:	9500      	str	r5, [sp, #0]
   d54f8:	ab03      	add	r3, sp, #12
   d54fa:	463a      	mov	r2, r7
   d54fc:	4631      	mov	r1, r6
   d54fe:	e7f0      	b.n	d54e2 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x50>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   d5500:	f1bc 0f02 	cmp.w	ip, #2
   d5504:	d102      	bne.n	d550c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x7a>
      addrbuffer[0] |= 0x80;
   d5506:	f064 047f 	orn	r4, r4, #127	; 0x7f
   d550a:	e7f2      	b.n	d54f2 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x60>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   d550c:	f1bc 0f01 	cmp.w	ip, #1
      addrbuffer[0] &= ~0x80;
   d5510:	bf01      	itttt	eq
   d5512:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   d5516:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   d551a:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   d551e:	f88d 300c 	strbeq.w	r3, [sp, #12]
   d5522:	e7e8      	b.n	d54f6 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x64>

000d5524 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   d5524:	b4f0      	push	{r4, r5, r6, r7}
   d5526:	460b      	mov	r3, r1
  if (numbytes == 0) {
   d5528:	b902      	cbnz	r2, d552c <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   d552a:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   d552c:	2a04      	cmp	r2, #4
   d552e:	d814      	bhi.n	d555a <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   d5530:	f100 050f 	add.w	r5, r0, #15
   d5534:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   d5536:	1884      	adds	r4, r0, r2
   d5538:	4629      	mov	r1, r5
   d553a:	4284      	cmp	r4, r0
   d553c:	d009      	beq.n	d5552 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   d553e:	7b87      	ldrb	r7, [r0, #14]
   d5540:	b2de      	uxtb	r6, r3
   d5542:	b927      	cbnz	r7, d554e <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   d5544:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   d5546:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   d5548:	3501      	adds	r5, #1
   d554a:	3c01      	subs	r4, #1
   d554c:	e7f5      	b.n	d553a <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   d554e:	73a6      	strb	r6, [r4, #14]
   d5550:	e7f9      	b.n	d5546 <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   d5552:	4620      	mov	r0, r4
}
   d5554:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   d5556:	f7ff bf9c 	b.w	d5492 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   d555a:	2000      	movs	r0, #0
   d555c:	bcf0      	pop	{r4, r5, r6, r7}
   d555e:	4770      	bx	lr

000d5560 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   d5560:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5562:	4604      	mov	r4, r0
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
                           (uint8_t)(_address >> 8)};
   d5564:	7a85      	ldrb	r5, [r0, #10]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   d5566:	460b      	mov	r3, r1
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   d5568:	8941      	ldrh	r1, [r0, #10]

  if (_i2cdevice) {
   d556a:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   d556c:	f8ad 100c 	strh.w	r1, [sp, #12]
   d5570:	0a0e      	lsrs	r6, r1, #8
  if (_i2cdevice) {
   d5572:	b140      	cbz	r0, d5586 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   d5574:	2100      	movs	r1, #0
   d5576:	e9cd 2100 	strd	r2, r1, [sp]
   d557a:	a903      	add	r1, sp, #12
   d557c:	7b62      	ldrb	r2, [r4, #13]
   d557e:	f000 f90f 	bl	d57a0 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   d5582:	b004      	add	sp, #16
   d5584:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   d5586:	6860      	ldr	r0, [r4, #4]
   d5588:	2800      	cmp	r0, #0
   d558a:	d0fa      	beq.n	d5582 <_ZN23Adafruit_BusIO_Register4readEPhh+0x22>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   d558c:	7a21      	ldrb	r1, [r4, #8]
   d558e:	7b64      	ldrb	r4, [r4, #13]
   d5590:	2903      	cmp	r1, #3
   d5592:	d10d      	bne.n	d55b0 <_ZN23Adafruit_BusIO_Register4readEPhh+0x50>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   d5594:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   d5598:	21ff      	movs	r1, #255	; 0xff
   d559a:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   d559e:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   d55a2:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   d55a6:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   d55a8:	a903      	add	r1, sp, #12
   d55aa:	f000 f9f6 	bl	d599a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   d55ae:	e7e8      	b.n	d5582 <_ZN23Adafruit_BusIO_Register4readEPhh+0x22>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   d55b0:	b941      	cbnz	r1, d55c4 <_ZN23Adafruit_BusIO_Register4readEPhh+0x64>
      addrbuffer[0] |= 0x80;
   d55b2:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   d55b6:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   d55ba:	21ff      	movs	r1, #255	; 0xff
   d55bc:	e9cd 2100 	strd	r2, r1, [sp]
   d55c0:	4622      	mov	r2, r4
   d55c2:	e7f1      	b.n	d55a8 <_ZN23Adafruit_BusIO_Register4readEPhh+0x48>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   d55c4:	2902      	cmp	r1, #2
   d55c6:	d102      	bne.n	d55ce <_ZN23Adafruit_BusIO_Register4readEPhh+0x6e>
      addrbuffer[0] &= ~0x80;
   d55c8:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   d55cc:	e7f3      	b.n	d55b6 <_ZN23Adafruit_BusIO_Register4readEPhh+0x56>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   d55ce:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   d55d0:	bf02      	ittt	eq
   d55d2:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   d55d6:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   d55da:	f88d 100c 	strbeq.w	r1, [sp, #12]
   d55de:	e7ec      	b.n	d55ba <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>

000d55e0 <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   d55e0:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   d55e2:	f100 050f 	add.w	r5, r0, #15
   d55e6:	7b02      	ldrb	r2, [r0, #12]
   d55e8:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   d55ea:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   d55ec:	f7ff ffb8 	bl	d5560 <_ZN23Adafruit_BusIO_Register4readEPhh>
   d55f0:	b178      	cbz	r0, d5612 <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   d55f2:	7b22      	ldrb	r2, [r4, #12]
   d55f4:	4629      	mov	r1, r5
   d55f6:	4422      	add	r2, r4
  uint32_t value = 0;
   d55f8:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   d55fa:	42a2      	cmp	r2, r4
   d55fc:	d00b      	beq.n	d5616 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   d55fe:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   d5600:	7ba0      	ldrb	r0, [r4, #14]
   d5602:	b920      	cbnz	r0, d560e <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   d5604:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   d5606:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   d5608:	3a01      	subs	r2, #1
   d560a:	3101      	adds	r1, #1
   d560c:	e7f5      	b.n	d55fa <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   d560e:	7808      	ldrb	r0, [r1, #0]
   d5610:	e7f9      	b.n	d5606 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   d5612:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5616:	bd38      	pop	{r3, r4, r5, pc}

000d5618 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   d5618:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   d561a:	6001      	str	r1, [r0, #0]
  _bits = bits;
   d561c:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   d561e:	7143      	strb	r3, [r0, #5]
}
   d5620:	bd10      	pop	{r4, pc}

000d5622 <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   d5622:	b510      	push	{r4, lr}
   d5624:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   d5626:	6800      	ldr	r0, [r0, #0]
   d5628:	f7ff ffda 	bl	d55e0 <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   d562c:	7922      	ldrb	r2, [r4, #4]
   d562e:	2301      	movs	r3, #1
   d5630:	4093      	lsls	r3, r2
  val >>= _shift;
   d5632:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   d5634:	3b01      	subs	r3, #1
  val >>= _shift;
   d5636:	40d0      	lsrs	r0, r2
}
   d5638:	4018      	ands	r0, r3
   d563a:	bd10      	pop	{r4, pc}

000d563c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   d563c:	b570      	push	{r4, r5, r6, lr}
   d563e:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   d5640:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   d5642:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   d5644:	f7ff ffcc 	bl	d55e0 <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   d5648:	7923      	ldrb	r3, [r4, #4]
   d564a:	2201      	movs	r2, #1
   d564c:	409a      	lsls	r2, r3
   d564e:	1e53      	subs	r3, r2, #1
  data &= mask;

  mask <<= _shift;
   d5650:	7962      	ldrb	r2, [r4, #5]
   d5652:	fa03 f502 	lsl.w	r5, r3, r2
  val &= ~mask;          // remove the current data at that spot
   d5656:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   d565a:	ea03 0106 	and.w	r1, r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   d565e:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   d5660:	4091      	lsls	r1, r2
  return _register->write(val, _register->width());
   d5662:	4329      	orrs	r1, r5
   d5664:	7b02      	ldrb	r2, [r0, #12]
}
   d5666:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   d566a:	f7ff bf5b 	b.w	d5524 <_ZN23Adafruit_BusIO_Register5writeEmh>

000d566e <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   d566e:	6042      	str	r2, [r0, #4]
  _begun = false;
   d5670:	2200      	movs	r2, #0
   d5672:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   d5674:	2220      	movs	r2, #32
  _addr = addr;
   d5676:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   d5678:	60c2      	str	r2, [r0, #12]
#endif
}
   d567a:	4770      	bx	lr

000d567c <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   d567c:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   d567e:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   d5680:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   d5682:	b153      	cbz	r3, d569a <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   d5684:	7821      	ldrb	r1, [r4, #0]
   d5686:	6860      	ldr	r0, [r4, #4]
   d5688:	f002 f86e 	bl	d7768 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   d568c:	6860      	ldr	r0, [r4, #4]
   d568e:	f002 f876 	bl	d777e <_ZN7TwoWire15endTransmissionEv>
   d5692:	fab0 f080 	clz	r0, r0
   d5696:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   d5698:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   d569a:	2101      	movs	r1, #1
   d569c:	f000 f803 	bl	d56a6 <_ZN18Adafruit_I2CDevice5beginEb>
   d56a0:	2800      	cmp	r0, #0
   d56a2:	d1ef      	bne.n	d5684 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   d56a4:	e7f8      	b.n	d5698 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000d56a6 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d56a6:	b538      	push	{r3, r4, r5, lr}
   d56a8:	4604      	mov	r4, r0
  _wire->begin();
   d56aa:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d56ac:	460d      	mov	r5, r1
  _wire->begin();
   d56ae:	f002 f829 	bl	d7704 <_ZN7TwoWire5beginEv>
  _begun = true;
   d56b2:	2001      	movs	r0, #1
   d56b4:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   d56b6:	b125      	cbz	r5, d56c2 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   d56b8:	4620      	mov	r0, r4
}
   d56ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   d56be:	f7ff bfdd 	b.w	d567c <_ZN18Adafruit_I2CDevice8detectedEv>
}
   d56c2:	bd38      	pop	{r3, r4, r5, pc}

000d56c4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   d56c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d56c8:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   d56cc:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   d56ce:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   d56d0:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   d56d2:	4432      	add	r2, r6
   d56d4:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   d56d6:	4604      	mov	r4, r0
   d56d8:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   d56da:	d902      	bls.n	d56e2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   d56dc:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   d56de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   d56e2:	7801      	ldrb	r1, [r0, #0]
   d56e4:	6840      	ldr	r0, [r0, #4]
   d56e6:	f002 f83f 	bl	d7768 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d56ea:	b97e      	cbnz	r6, d570c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   d56ec:	6860      	ldr	r0, [r4, #4]
   d56ee:	6803      	ldr	r3, [r0, #0]
   d56f0:	462a      	mov	r2, r5
   d56f2:	68db      	ldr	r3, [r3, #12]
   d56f4:	4641      	mov	r1, r8
   d56f6:	4798      	blx	r3
   d56f8:	4285      	cmp	r5, r0
   d56fa:	d1ef      	bne.n	d56dc <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   d56fc:	6860      	ldr	r0, [r4, #4]
   d56fe:	4639      	mov	r1, r7
   d5700:	f002 f839 	bl	d7776 <_ZN7TwoWire15endTransmissionEh>
   d5704:	fab0 f080 	clz	r0, r0
   d5708:	0940      	lsrs	r0, r0, #5
   d570a:	e7e8      	b.n	d56de <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d570c:	f1b9 0f00 	cmp.w	r9, #0
   d5710:	d0ec      	beq.n	d56ec <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
   d5712:	6860      	ldr	r0, [r4, #4]
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   d5714:	6803      	ldr	r3, [r0, #0]
   d5716:	4632      	mov	r2, r6
   d5718:	68db      	ldr	r3, [r3, #12]
   d571a:	4649      	mov	r1, r9
   d571c:	4798      	blx	r3
   d571e:	42b0      	cmp	r0, r6
   d5720:	d1dc      	bne.n	d56dc <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   d5722:	e7e3      	b.n	d56ec <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000d5724 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   d5724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5728:	4615      	mov	r5, r2
   d572a:	4604      	mov	r4, r0
   d572c:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   d572e:	b2d2      	uxtb	r2, r2
   d5730:	7801      	ldrb	r1, [r0, #0]
   d5732:	6840      	ldr	r0, [r0, #4]
   d5734:	f002 f803 	bl	d773e <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   d5738:	4285      	cmp	r5, r0
   d573a:	d10d      	bne.n	d5758 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   d573c:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   d573e:	fa1f f887 	uxth.w	r8, r7
   d5742:	45a8      	cmp	r8, r5
   d5744:	f107 0701 	add.w	r7, r7, #1
   d5748:	d209      	bcs.n	d575e <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   d574a:	6860      	ldr	r0, [r4, #4]
   d574c:	6803      	ldr	r3, [r0, #0]
   d574e:	695b      	ldr	r3, [r3, #20]
   d5750:	4798      	blx	r3
   d5752:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   d5756:	e7f2      	b.n	d573e <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   d5758:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d575a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d575e:	2001      	movs	r0, #1
   d5760:	e7fb      	b.n	d575a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000d5762 <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   d5762:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5766:	4607      	mov	r7, r0
   d5768:	4688      	mov	r8, r1
   d576a:	4616      	mov	r6, r2
   d576c:	4699      	mov	r9, r3
  size_t pos = 0;
   d576e:	2500      	movs	r5, #0
  while (pos < len) {
   d5770:	42b5      	cmp	r5, r6
   d5772:	d212      	bcs.n	d579a <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   d5774:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   d5776:	1b74      	subs	r4, r6, r5
   d5778:	4294      	cmp	r4, r2
   d577a:	bf28      	it	cs
   d577c:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   d577e:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   d5780:	42ab      	cmp	r3, r5
   d5782:	bf94      	ite	ls
   d5784:	464b      	movls	r3, r9
   d5786:	2300      	movhi	r3, #0
   d5788:	4622      	mov	r2, r4
   d578a:	eb08 0105 	add.w	r1, r8, r5
   d578e:	4638      	mov	r0, r7
   d5790:	f7ff ffc8 	bl	d5724 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   d5794:	b110      	cbz	r0, d579c <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   d5796:	4425      	add	r5, r4
  while (pos < len) {
   d5798:	e7ea      	b.n	d5770 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   d579a:	2001      	movs	r0, #1
}
   d579c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d57a0 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   d57a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d57a2:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   d57a4:	2300      	movs	r3, #0
   d57a6:	e9cd 3300 	strd	r3, r3, [sp]
   d57aa:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   d57ae:	9e06      	ldr	r6, [sp, #24]
   d57b0:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   d57b2:	f7ff ff87 	bl	d56c4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   d57b6:	b140      	cbz	r0, d57ca <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   d57b8:	2301      	movs	r3, #1
   d57ba:	4632      	mov	r2, r6
   d57bc:	4629      	mov	r1, r5
   d57be:	4620      	mov	r0, r4
}
   d57c0:	b002      	add	sp, #8
   d57c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   d57c6:	f7ff bfcc 	b.w	d5762 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   d57ca:	b002      	add	sp, #8
   d57cc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d57d0 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d57d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57d4:	4604      	mov	r4, r0
  if (_spi) {
   d57d6:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d57d8:	b085      	sub	sp, #20
   d57da:	460d      	mov	r5, r1
  if (_spi) {
   d57dc:	b140      	cbz	r0, d57f0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   d57de:	2300      	movs	r3, #0
   d57e0:	9300      	str	r3, [sp, #0]
   d57e2:	4613      	mov	r3, r2
   d57e4:	460a      	mov	r2, r1
   d57e6:	f002 fb07 	bl	d7df8 <_ZN8SPIClass8transferEPvS0_jPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   d57ea:	b005      	add	sp, #20
   d57ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   d57f0:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d57f2:	68a0      	ldr	r0, [r4, #8]
   d57f4:	4f48      	ldr	r7, [pc, #288]	; (d5918 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   d57f6:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   d57fa:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d57fc:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   d57fe:	bf0c      	ite	eq
   d5800:	f04f 0b01 	moveq.w	fp, #1
   d5804:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d5808:	ea1b 0f03 	tst.w	fp, r3
   d580c:	eb01 0302 	add.w	r3, r1, r2
   d5810:	bf0c      	ite	eq
   d5812:	f04f 0901 	moveq.w	r9, #1
   d5816:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d581a:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   d581c:	9303      	str	r3, [sp, #12]
   d581e:	9b03      	ldr	r3, [sp, #12]
   d5820:	42ab      	cmp	r3, r5
   d5822:	d0e2      	beq.n	d57ea <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   d5824:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   d5828:	465e      	mov	r6, fp
    uint8_t reply = 0;
   d582a:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   d582e:	b117      	cbz	r7, d5836 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d5830:	4638      	mov	r0, r7
   d5832:	f001 fcb3 	bl	d719c <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   d5836:	7b63      	ldrb	r3, [r4, #13]
   d5838:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   d583c:	d141      	bne.n	d58c2 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d583e:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d5842:	1c5a      	adds	r2, r3, #1
   d5844:	d00f      	beq.n	d5866 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   d5846:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d584a:	bf14      	ite	ne
   d584c:	2301      	movne	r3, #1
   d584e:	2300      	moveq	r3, #0
   d5850:	454b      	cmp	r3, r9
   d5852:	d008      	beq.n	d5866 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
          if (towrite)
   d5854:	6963      	ldr	r3, [r4, #20]
   d5856:	6a60      	ldr	r0, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d5858:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   d585a:	2900      	cmp	r1, #0
   d585c:	d02c      	beq.n	d58b8 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   d585e:	4302      	orrs	r2, r0
   d5860:	601a      	str	r2, [r3, #0]
   d5862:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   d5866:	69a1      	ldr	r1, [r4, #24]
   d5868:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d586a:	680a      	ldr	r2, [r1, #0]
   d586c:	4313      	orrs	r3, r2
   d586e:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d5870:	b117      	cbz	r7, d5878 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   d5872:	4638      	mov	r0, r7
   d5874:	f001 fc92 	bl	d719c <HAL_Delay_Microseconds>
        if (_miso != -1) {
   d5878:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d587c:	3301      	adds	r3, #1
   d587e:	d006      	beq.n	d588e <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   d5880:	69e3      	ldr	r3, [r4, #28]
   d5882:	681a      	ldr	r2, [r3, #0]
   d5884:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5886:	421a      	tst	r2, r3
            reply |= b;
   d5888:	bf18      	it	ne
   d588a:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   d588e:	69a1      	ldr	r1, [r4, #24]
   d5890:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d5892:	680a      	ldr	r2, [r1, #0]
   d5894:	ea22 0303 	bic.w	r3, r2, r3
   d5898:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   d589a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d589e:	3301      	adds	r3, #1
        buffer[i] = reply;
   d58a0:	bf18      	it	ne
   d58a2:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   d58a6:	7b23      	ldrb	r3, [r4, #12]
   d58a8:	2b00      	cmp	r3, #0
   d58aa:	d132      	bne.n	d5912 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   d58ac:	0076      	lsls	r6, r6, #1
   d58ae:	b2f6      	uxtb	r6, r6
   d58b0:	2e00      	cmp	r6, #0
   d58b2:	d1bc      	bne.n	d582e <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   d58b4:	3501      	adds	r5, #1
   d58b6:	e7b2      	b.n	d581e <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   d58b8:	ea22 0200 	bic.w	r2, r2, r0
   d58bc:	601a      	str	r2, [r3, #0]
   d58be:	4689      	mov	r9, r1
   d58c0:	e7d1      	b.n	d5866 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   d58c2:	69a1      	ldr	r1, [r4, #24]
   d58c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d58c6:	680a      	ldr	r2, [r1, #0]
   d58c8:	4313      	orrs	r3, r2
   d58ca:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d58cc:	b117      	cbz	r7, d58d4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   d58ce:	4638      	mov	r0, r7
   d58d0:	f001 fc64 	bl	d719c <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   d58d4:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d58d8:	3301      	adds	r3, #1
   d58da:	d008      	beq.n	d58ee <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
          if (send & b)
   d58dc:	6963      	ldr	r3, [r4, #20]
   d58de:	6a61      	ldr	r1, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d58e0:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   d58e2:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   d58e6:	bf14      	ite	ne
   d58e8:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   d58ea:	438a      	biceq	r2, r1
   d58ec:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   d58ee:	69a1      	ldr	r1, [r4, #24]
   d58f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d58f2:	680a      	ldr	r2, [r1, #0]
   d58f4:	ea22 0303 	bic.w	r3, r2, r3
   d58f8:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   d58fa:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d58fe:	3301      	adds	r3, #1
   d5900:	d0cb      	beq.n	d589a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   d5902:	69e3      	ldr	r3, [r4, #28]
   d5904:	681a      	ldr	r2, [r3, #0]
   d5906:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5908:	421a      	tst	r2, r3
            reply |= b;
   d590a:	bf18      	it	ne
   d590c:	ea46 0808 	orrne.w	r8, r6, r8
   d5910:	e7c3      	b.n	d589a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   d5912:	0876      	lsrs	r6, r6, #1
   d5914:	e7cc      	b.n	d58b0 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   d5916:	bf00      	nop
   d5918:	0007a120 	.word	0x0007a120

000d591c <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   d591c:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   d591e:	2201      	movs	r2, #1
  uint8_t data = send;
   d5920:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   d5924:	f10d 0107 	add.w	r1, sp, #7
   d5928:	f7ff ff52 	bl	d57d0 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   d592c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5930:	b003      	add	sp, #12
   d5932:	f85d fb04 	ldr.w	pc, [sp], #4

000d5936 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d5936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d593a:	4604      	mov	r4, r0
  if (_spi) {
   d593c:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d593e:	460e      	mov	r6, r1
   d5940:	4617      	mov	r7, r2
   d5942:	461d      	mov	r5, r3
  if (_spi) {
   d5944:	b110      	cbz	r0, d594c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   d5946:	6861      	ldr	r1, [r4, #4]
   d5948:	f002 f9e2 	bl	d7d10 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   d594c:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d5950:	2100      	movs	r1, #0
   d5952:	b280      	uxth	r0, r0
   d5954:	f002 fcad 	bl	d82b2 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   d5958:	9b06      	ldr	r3, [sp, #24]
   d595a:	eb05 0803 	add.w	r8, r5, r3
   d595e:	4545      	cmp	r5, r8
   d5960:	d108      	bne.n	d5974 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   d5962:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   d5964:	42b7      	cmp	r7, r6
   d5966:	d00b      	beq.n	d5980 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   d5968:	f816 1b01 	ldrb.w	r1, [r6], #1
   d596c:	4620      	mov	r0, r4
   d596e:	f7ff ffd5 	bl	d591c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   d5972:	e7f7      	b.n	d5964 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   d5974:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5978:	4620      	mov	r0, r4
   d597a:	f7ff ffcf 	bl	d591c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   d597e:	e7ee      	b.n	d595e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   d5980:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d5984:	2101      	movs	r1, #1
   d5986:	b280      	uxth	r0, r0
   d5988:	f002 fc93 	bl	d82b2 <digitalWrite>

  if (_spi) {
   d598c:	6820      	ldr	r0, [r4, #0]
   d598e:	b108      	cbz	r0, d5994 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   d5990:	f002 f9a5 	bl	d7cde <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d5994:	2001      	movs	r0, #1
   d5996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d599a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   d599a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d599e:	4604      	mov	r4, r0
  if (_spi) {
   d59a0:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   d59a2:	f89d 801c 	ldrb.w	r8, [sp, #28]
   d59a6:	460e      	mov	r6, r1
   d59a8:	4617      	mov	r7, r2
   d59aa:	461d      	mov	r5, r3
  if (_spi) {
   d59ac:	b110      	cbz	r0, d59b4 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   d59ae:	6861      	ldr	r1, [r4, #4]
   d59b0:	f002 f9ae 	bl	d7d10 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   d59b4:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d59b8:	2100      	movs	r1, #0
   d59ba:	b280      	uxth	r0, r0
   d59bc:	f002 fc79 	bl	d82b2 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   d59c0:	4437      	add	r7, r6
   d59c2:	42be      	cmp	r6, r7
   d59c4:	d10a      	bne.n	d59dc <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   d59c6:	9b06      	ldr	r3, [sp, #24]
   d59c8:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   d59ca:	42ae      	cmp	r6, r5
   d59cc:	d00c      	beq.n	d59e8 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   d59ce:	4641      	mov	r1, r8
   d59d0:	4620      	mov	r0, r4
   d59d2:	f7ff ffa3 	bl	d591c <_ZN18Adafruit_SPIDevice8transferEh>
   d59d6:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   d59da:	e7f6      	b.n	d59ca <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   d59dc:	f816 1b01 	ldrb.w	r1, [r6], #1
   d59e0:	4620      	mov	r0, r4
   d59e2:	f7ff ff9b 	bl	d591c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   d59e6:	e7ec      	b.n	d59c2 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   d59e8:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d59ec:	2101      	movs	r1, #1
   d59ee:	b280      	uxth	r0, r0
   d59f0:	f002 fc5f 	bl	d82b2 <digitalWrite>

  if (_spi) {
   d59f4:	6820      	ldr	r0, [r4, #0]
   d59f6:	b108      	cbz	r0, d59fc <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   d59f8:	f002 f971 	bl	d7cde <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   d59fc:	2001      	movs	r0, #1
   d59fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5a04 <_ZL9date2daysthh>:
// utility code, some of this could be exposed in the DateTime API if needed

const uint8_t daysInMonth [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };

// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
   d5a04:	b530      	push	{r4, r5, lr}
   d5a06:	4c0f      	ldr	r4, [pc, #60]	; (d5a44 <_ZL9date2daysthh+0x40>)
    if (y >= 2000)
        y -= 2000;
    uint16_t days = d;
   d5a08:	2300      	movs	r3, #0
    for (uint8_t i = 1; i < m; ++i)
   d5a0a:	3301      	adds	r3, #1
   d5a0c:	b2dd      	uxtb	r5, r3
   d5a0e:	42a9      	cmp	r1, r5
   d5a10:	d904      	bls.n	d5a1c <_ZL9date2daysthh+0x18>
        days += pgm_read_byte(daysInMonth + i - 1);
   d5a12:	f814 5b01 	ldrb.w	r5, [r4], #1
   d5a16:	442a      	add	r2, r5
   d5a18:	b292      	uxth	r2, r2
    for (uint8_t i = 1; i < m; ++i)
   d5a1a:	e7f6      	b.n	d5a0a <_ZL9date2daysthh+0x6>
    if (m > 2 && y % 4 == 0)
   d5a1c:	2902      	cmp	r1, #2
   d5a1e:	d903      	bls.n	d5a28 <_ZL9date2daysthh+0x24>
   d5a20:	0783      	lsls	r3, r0, #30
        ++days;
   d5a22:	bf04      	itt	eq
   d5a24:	3201      	addeq	r2, #1
   d5a26:	b292      	uxtheq	r2, r2
    return days + 365 * y + (y + 3) / 4 - 1;
   d5a28:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
   d5a2c:	1cc3      	adds	r3, r0, #3
   d5a2e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   d5a32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d5a36:	3801      	subs	r0, #1
   d5a38:	eb00 0093 	add.w	r0, r0, r3, lsr #2
   d5a3c:	4410      	add	r0, r2
}
   d5a3e:	b280      	uxth	r0, r0
   d5a40:	bd30      	pop	{r4, r5, pc}
   d5a42:	bf00      	nop
   d5a44:	000d9220 	.word	0x000d9220

000d5a48 <_ZNK8DateTime12dayOfTheWeekEv>:
    hh = conv2d(buff);
    mm = conv2d(buff + 3);
    ss = conv2d(buff + 6);
}

uint8_t DateTime::dayOfTheWeek() const {    
   d5a48:	b508      	push	{r3, lr}
    uint16_t day = date2days(yOff, m, d);
   d5a4a:	7882      	ldrb	r2, [r0, #2]
   d5a4c:	7841      	ldrb	r1, [r0, #1]
   d5a4e:	7800      	ldrb	r0, [r0, #0]
   d5a50:	f7ff ffd8 	bl	d5a04 <_ZL9date2daysthh>
    return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
   d5a54:	2307      	movs	r3, #7
   d5a56:	3006      	adds	r0, #6
   d5a58:	fbb0 f3f3 	udiv	r3, r0, r3
   d5a5c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d5a60:	1ac0      	subs	r0, r0, r3
}
   d5a62:	b2c0      	uxtb	r0, r0
   d5a64:	bd08      	pop	{r3, pc}

000d5a66 <_ZN10RTC_DS13075beginEv>:
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }

boolean RTC_DS1307::begin(void) {
   d5a66:	b508      	push	{r3, lr}
  Wire.begin();
   d5a68:	f002 fc56 	bl	d8318 <_Z19__fetch_global_Wirev>
   d5a6c:	f001 fe4a 	bl	d7704 <_ZN7TwoWire5beginEv>
  return true;
}
   d5a70:	2001      	movs	r0, #1
   d5a72:	bd08      	pop	{r3, pc}

000d5a74 <_ZN11RTC_PCF85235beginEv>:
   d5a74:	f7ff bff7 	b.w	d5a66 <_ZN10RTC_DS13075beginEv>

000d5a78 <_ZN11RTC_PCF852311initializedEv>:
boolean RTC_PCF8523::begin(void) {
  Wire.begin();
  return true;
}

boolean RTC_PCF8523::initialized(void) {
   d5a78:	b508      	push	{r3, lr}
  Wire.beginTransmission(PCF8523_ADDRESS);
   d5a7a:	f002 fc4d 	bl	d8318 <_Z19__fetch_global_Wirev>
   d5a7e:	2168      	movs	r1, #104	; 0x68
   d5a80:	f001 fe76 	bl	d7770 <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)PCF8523_CONTROL_3);
   d5a84:	f002 fc48 	bl	d8318 <_Z19__fetch_global_Wirev>
   d5a88:	6803      	ldr	r3, [r0, #0]
   d5a8a:	2102      	movs	r1, #2
   d5a8c:	689b      	ldr	r3, [r3, #8]
   d5a8e:	4798      	blx	r3
  Wire.endTransmission();
   d5a90:	f002 fc42 	bl	d8318 <_Z19__fetch_global_Wirev>
   d5a94:	f001 fe73 	bl	d777e <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(PCF8523_ADDRESS, 1);
   d5a98:	f002 fc3e 	bl	d8318 <_Z19__fetch_global_Wirev>
   d5a9c:	2201      	movs	r2, #1
   d5a9e:	2168      	movs	r1, #104	; 0x68
   d5aa0:	f001 fe5f 	bl	d7762 <_ZN7TwoWire11requestFromEhj>
  uint8_t ss = Wire._I2C_READ();
   d5aa4:	f002 fc38 	bl	d8318 <_Z19__fetch_global_Wirev>
   d5aa8:	6803      	ldr	r3, [r0, #0]
   d5aaa:	695b      	ldr	r3, [r3, #20]
   d5aac:	4798      	blx	r3
  return ((ss & 0xE0) != 0xE0);
   d5aae:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
}
   d5ab2:	38e0      	subs	r0, #224	; 0xe0
   d5ab4:	bf18      	it	ne
   d5ab6:	2001      	movne	r0, #1
   d5ab8:	bd08      	pop	{r3, pc}

000d5aba <_ZN11RTC_PCF85233nowEv>:
  Wire._I2C_WRITE((byte)PCF8523_CONTROL_3);
  Wire._I2C_WRITE((byte)0x00);
  Wire.endTransmission();
}

DateTime RTC_PCF8523::now() {
   d5aba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5abe:	4604      	mov	r4, r0
  Wire.beginTransmission(PCF8523_ADDRESS);
   d5ac0:	f002 fc2a 	bl	d8318 <_Z19__fetch_global_Wirev>
   d5ac4:	2168      	movs	r1, #104	; 0x68
   d5ac6:	f001 fe53 	bl	d7770 <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)3);	
   d5aca:	f002 fc25 	bl	d8318 <_Z19__fetch_global_Wirev>
   d5ace:	6803      	ldr	r3, [r0, #0]
   d5ad0:	2103      	movs	r1, #3
   d5ad2:	689b      	ldr	r3, [r3, #8]
   d5ad4:	4798      	blx	r3
  Wire.endTransmission();
   d5ad6:	f002 fc1f 	bl	d8318 <_Z19__fetch_global_Wirev>
   d5ada:	f001 fe50 	bl	d777e <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(PCF8523_ADDRESS, 7);
   d5ade:	f002 fc1b 	bl	d8318 <_Z19__fetch_global_Wirev>
   d5ae2:	2207      	movs	r2, #7
   d5ae4:	2168      	movs	r1, #104	; 0x68
   d5ae6:	f001 fe3c 	bl	d7762 <_ZN7TwoWire11requestFromEhj>
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   d5aea:	f002 fc15 	bl	d8318 <_Z19__fetch_global_Wirev>
   d5aee:	6803      	ldr	r3, [r0, #0]
   d5af0:	695b      	ldr	r3, [r3, #20]
   d5af2:	4798      	blx	r3
   d5af4:	f000 097f 	and.w	r9, r0, #127	; 0x7f
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d5af8:	f3c0 1002 	ubfx	r0, r0, #4, #3
   d5afc:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
   d5b00:	eb09 0040 	add.w	r0, r9, r0, lsl #1
   d5b04:	fa5f f980 	uxtb.w	r9, r0
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   d5b08:	f002 fc06 	bl	d8318 <_Z19__fetch_global_Wirev>
   d5b0c:	6803      	ldr	r3, [r0, #0]
   d5b0e:	695b      	ldr	r3, [r3, #20]
   d5b10:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d5b12:	f3c0 1503 	ubfx	r5, r0, #4, #4
   d5b16:	eba5 0585 	sub.w	r5, r5, r5, lsl #2
   d5b1a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
   d5b1e:	b2c5      	uxtb	r5, r0
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   d5b20:	f002 fbfa 	bl	d8318 <_Z19__fetch_global_Wirev>
   d5b24:	6803      	ldr	r3, [r0, #0]
   d5b26:	695b      	ldr	r3, [r3, #20]
   d5b28:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d5b2a:	f3c0 1603 	ubfx	r6, r0, #4, #4
   d5b2e:	eba6 0686 	sub.w	r6, r6, r6, lsl #2
   d5b32:	eb00 0046 	add.w	r0, r0, r6, lsl #1
   d5b36:	b2c6      	uxtb	r6, r0
  uint8_t d = bcd2bin(Wire._I2C_READ());
   d5b38:	f002 fbee 	bl	d8318 <_Z19__fetch_global_Wirev>
   d5b3c:	6803      	ldr	r3, [r0, #0]
   d5b3e:	695b      	ldr	r3, [r3, #20]
   d5b40:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d5b42:	f3c0 1703 	ubfx	r7, r0, #4, #4
   d5b46:	eba7 0787 	sub.w	r7, r7, r7, lsl #2
   d5b4a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
   d5b4e:	b2c7      	uxtb	r7, r0
  Wire._I2C_READ();  // skip 'weekdays'
   d5b50:	f002 fbe2 	bl	d8318 <_Z19__fetch_global_Wirev>
   d5b54:	6803      	ldr	r3, [r0, #0]
   d5b56:	695b      	ldr	r3, [r3, #20]
   d5b58:	4798      	blx	r3
  uint8_t m = bcd2bin(Wire._I2C_READ());
   d5b5a:	f002 fbdd 	bl	d8318 <_Z19__fetch_global_Wirev>
   d5b5e:	6803      	ldr	r3, [r0, #0]
   d5b60:	695b      	ldr	r3, [r3, #20]
   d5b62:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d5b64:	f3c0 1803 	ubfx	r8, r0, #4, #4
   d5b68:	eba8 0888 	sub.w	r8, r8, r8, lsl #2
   d5b6c:	eb00 0048 	add.w	r0, r0, r8, lsl #1
   d5b70:	fa5f f880 	uxtb.w	r8, r0
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   d5b74:	f002 fbd0 	bl	d8318 <_Z19__fetch_global_Wirev>
   d5b78:	6803      	ldr	r3, [r0, #0]
   d5b7a:	695b      	ldr	r3, [r3, #20]
   d5b7c:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d5b7e:	f3c0 1303 	ubfx	r3, r0, #4, #4
   d5b82:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   d5b86:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    yOff = year;
   d5b8a:	7020      	strb	r0, [r4, #0]
    m = month;
   d5b8c:	f884 8001 	strb.w	r8, [r4, #1]
    d = day;
   d5b90:	70a7      	strb	r7, [r4, #2]
    hh = hour;
   d5b92:	70e6      	strb	r6, [r4, #3]
    mm = min;
   d5b94:	7125      	strb	r5, [r4, #4]
    ss = sec;
   d5b96:	f884 9005 	strb.w	r9, [r4, #5]
  
  return DateTime (y, m, d, hh, mm, ss);
}
   d5b9a:	4620      	mov	r0, r4
   d5b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5ba0 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d5ba0:	b510      	push	{r4, lr}
   d5ba2:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5ba4:	3024      	adds	r0, #36	; 0x24
   d5ba6:	f000 fe77 	bl	d6898 <_ZN8FatCache4syncEv>
   d5baa:	b128      	cbz	r0, d5bb8 <_ZN9FatVolume9cacheSyncEv+0x18>
   d5bac:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d5bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5bb4:	f000 be70 	b.w	d6898 <_ZN8FatCache4syncEv>
  }
   d5bb8:	bd10      	pop	{r4, pc}

000d5bba <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5bba:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5bbc:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   d5bbe:	f043 0304 	orr.w	r3, r3, #4
   d5bc2:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5bc4:	f100 0210 	add.w	r2, r0, #16
   d5bc8:	6880      	ldr	r0, [r0, #8]
   d5bca:	f000 bf1b 	b.w	d6a04 <_ZN9FatVolume15allocateClusterEmPm>
	...

000d5bd0 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5bd4:	7801      	ldrb	r1, [r0, #0]
   d5bd6:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   d5bda:	4604      	mov	r4, r0
  if (isRootFixed()) {
   d5bdc:	d003      	beq.n	d5be6 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d5bde:	2600      	movs	r6, #0
}
   d5be0:	4630      	mov	r0, r6
   d5be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   d5be6:	6942      	ldr	r2, [r0, #20]
   d5be8:	4b17      	ldr	r3, [pc, #92]	; (d5c48 <_ZN7FatFile13addDirClusterEv+0x78>)
   d5bea:	429a      	cmp	r2, r3
   d5bec:	d2f7      	bcs.n	d5bde <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   d5bee:	f7ff ffe4 	bl	d5bba <_ZN7FatFile10addClusterEv>
   d5bf2:	4606      	mov	r6, r0
   d5bf4:	2800      	cmp	r0, #0
   d5bf6:	d0f2      	beq.n	d5bde <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   d5bf8:	6921      	ldr	r1, [r4, #16]
   d5bfa:	68a0      	ldr	r0, [r4, #8]
   d5bfc:	f000 fe97 	bl	d692e <_ZNK9FatVolume17clusterFirstBlockEm>
   d5c00:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5c02:	68a0      	ldr	r0, [r4, #8]
   d5c04:	2205      	movs	r2, #5
   d5c06:	4639      	mov	r1, r7
   d5c08:	3024      	adds	r0, #36	; 0x24
   d5c0a:	f000 fe6d 	bl	d68e8 <_ZN8FatCache4readEmh>
  if (!pc) {
   d5c0e:	4680      	mov	r8, r0
   d5c10:	2800      	cmp	r0, #0
   d5c12:	d0e4      	beq.n	d5bde <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   d5c14:	4629      	mov	r1, r5
   d5c16:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5c1a:	f003 f8cb 	bl	d8db4 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5c1e:	2501      	movs	r5, #1
   d5c20:	68a3      	ldr	r3, [r4, #8]
   d5c22:	791a      	ldrb	r2, [r3, #4]
   d5c24:	42aa      	cmp	r2, r5
   d5c26:	d909      	bls.n	d5c3c <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   d5c28:	6818      	ldr	r0, [r3, #0]
   d5c2a:	4642      	mov	r2, r8
   d5c2c:	19e9      	adds	r1, r5, r7
   d5c2e:	f001 f9c4 	bl	d6fba <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d5c32:	2800      	cmp	r0, #0
   d5c34:	d0d3      	beq.n	d5bde <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5c36:	3501      	adds	r5, #1
   d5c38:	b2ed      	uxtb	r5, r5
   d5c3a:	e7f1      	b.n	d5c20 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d5c3c:	6963      	ldr	r3, [r4, #20]
   d5c3e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d5c42:	6163      	str	r3, [r4, #20]
  return true;
   d5c44:	e7cc      	b.n	d5be0 <_ZN7FatFile13addDirClusterEv+0x10>
   d5c46:	bf00      	nop
   d5c48:	001ffe00 	.word	0x001ffe00

000d5c4c <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d5c4c:	b510      	push	{r4, lr}
   d5c4e:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   d5c50:	6880      	ldr	r0, [r0, #8]
   d5c52:	460a      	mov	r2, r1
   d5c54:	3024      	adds	r0, #36	; 0x24
   d5c56:	69a1      	ldr	r1, [r4, #24]
   d5c58:	f000 fe46 	bl	d68e8 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d5c5c:	b120      	cbz	r0, d5c68 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d5c5e:	88a3      	ldrh	r3, [r4, #4]
   d5c60:	f003 030f 	and.w	r3, r3, #15
   d5c64:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d5c68:	bd10      	pop	{r4, pc}

000d5c6a <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5c6a:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d5c6c:	7804      	ldrb	r4, [r0, #0]
bool FatFile::openRoot(FatVolume* vol) {
   d5c6e:	4605      	mov	r5, r0
   d5c70:	460e      	mov	r6, r1
  if (isOpen()) {
   d5c72:	b94c      	cbnz	r4, d5c88 <_ZN7FatFile8openRootEP9FatVolume+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d5c74:	2224      	movs	r2, #36	; 0x24
   d5c76:	4621      	mov	r1, r4
   d5c78:	f003 f89c 	bl	d8db4 <memset>

  m_vol = vol;
   d5c7c:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d5c7e:	79f3      	ldrb	r3, [r6, #7]
   d5c80:	2b10      	cmp	r3, #16
   d5c82:	d003      	beq.n	d5c8c <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d5c84:	2b20      	cmp	r3, #32
   d5c86:	d007      	beq.n	d5c98 <_ZN7FatFile8openRootEP9FatVolume+0x2e>
  // read only
  m_flags = F_READ;
  return true;

fail:
  return false;
   d5c88:	2000      	movs	r0, #0
   d5c8a:	e004      	b.n	d5c96 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    m_attr = FILE_ATTR_ROOT_FIXED;
   d5c8c:	2320      	movs	r3, #32
  m_flags = F_READ;
   d5c8e:	2401      	movs	r4, #1
    m_attr = FILE_ATTR_ROOT32;
   d5c90:	702b      	strb	r3, [r5, #0]
  m_flags = F_READ;
   d5c92:	70ac      	strb	r4, [r5, #2]
  return true;
   d5c94:	4620      	mov	r0, r4
}
   d5c96:	bd70      	pop	{r4, r5, r6, pc}
    m_attr = FILE_ATTR_ROOT32;
   d5c98:	2340      	movs	r3, #64	; 0x40
   d5c9a:	e7f8      	b.n	d5c8e <_ZN7FatFile8openRootEP9FatVolume+0x24>

000d5c9c <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d5c9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d5ca0:	7803      	ldrb	r3, [r0, #0]
int FatFile::read(void* buf, size_t nbyte) {
   d5ca2:	4604      	mov	r4, r0
   d5ca4:	4688      	mov	r8, r1
   d5ca6:	4615      	mov	r5, r2
  if (!isOpen() || !(m_flags & F_READ)) {
   d5ca8:	2b00      	cmp	r3, #0
   d5caa:	d05d      	beq.n	d5d68 <_ZN7FatFile4readEPvj+0xcc>
   d5cac:	7882      	ldrb	r2, [r0, #2]
   d5cae:	07d1      	lsls	r1, r2, #31
   d5cb0:	d55a      	bpl.n	d5d68 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d5cb2:	071a      	lsls	r2, r3, #28
   d5cb4:	d52d      	bpl.n	d5d12 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d5cb6:	69c3      	ldr	r3, [r0, #28]
   d5cb8:	6942      	ldr	r2, [r0, #20]
   d5cba:	1a9b      	subs	r3, r3, r2
   d5cbc:	429d      	cmp	r5, r3
   d5cbe:	bf28      	it	cs
   d5cc0:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d5cc2:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   d5cc4:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5cc8:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   d5ccc:	2e00      	cmp	r6, #0
   d5cce:	f000 808f 	beq.w	d5df0 <_ZN7FatFile4readEPvj+0x154>
    if (isRootFixed()) {
   d5cd2:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   d5cd4:	6963      	ldr	r3, [r4, #20]
   d5cd6:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d5cd8:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   d5cda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
    return m_attr & FILE_ATTR_ROOT_FIXED;
   d5cde:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d5ce2:	d51f      	bpl.n	d5d24 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d5ce4:	6a00      	ldr	r0, [r0, #32]
   d5ce6:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d5ce8:	68a0      	ldr	r0, [r4, #8]
   d5cea:	f1ba 0f00 	cmp.w	sl, #0
   d5cee:	d142      	bne.n	d5d76 <_ZN7FatFile4readEPvj+0xda>
   d5cf0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5cf4:	d33f      	bcc.n	d5d76 <_ZN7FatFile4readEPvj+0xda>
  }
  cache_t *cacheAddress() {
    return m_cache.block();
  }
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
   d5cf6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5cf8:	4299      	cmp	r1, r3
   d5cfa:	d03c      	beq.n	d5d76 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d5cfc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5d00:	d252      	bcs.n	d5da8 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   d5d02:	6800      	ldr	r0, [r0, #0]
   d5d04:	4642      	mov	r2, r8
   d5d06:	f001 f8cf 	bl	d6ea8 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d5d0a:	b368      	cbz	r0, d5d68 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   d5d0c:	f44f 7700 	mov.w	r7, #512	; 0x200
   d5d10:	e044      	b.n	d5d9c <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   d5d12:	069b      	lsls	r3, r3, #26
   d5d14:	d5d5      	bpl.n	d5cc2 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d5d16:	6883      	ldr	r3, [r0, #8]
   d5d18:	891a      	ldrh	r2, [r3, #8]
   d5d1a:	6943      	ldr	r3, [r0, #20]
   d5d1c:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   d5d20:	b29b      	uxth	r3, r3
   d5d22:	e7cb      	b.n	d5cbc <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5d24:	f890 9005 	ldrb.w	r9, [r0, #5]
   d5d28:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   d5d2c:	f1ba 0f00 	cmp.w	sl, #0
   d5d30:	d108      	bne.n	d5d44 <_ZN7FatFile4readEPvj+0xa8>
   d5d32:	f1b9 0f00 	cmp.w	r9, #0
   d5d36:	d105      	bne.n	d5d44 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   d5d38:	b95b      	cbnz	r3, d5d52 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5d3a:	0651      	lsls	r1, r2, #25
   d5d3c:	bf4c      	ite	mi
   d5d3e:	6a03      	ldrmi	r3, [r0, #32]
   d5d40:	6a23      	ldrpl	r3, [r4, #32]
   d5d42:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5d44:	6921      	ldr	r1, [r4, #16]
   d5d46:	68a0      	ldr	r0, [r4, #8]
   d5d48:	f000 fdf1 	bl	d692e <_ZNK9FatVolume17clusterFirstBlockEm>
   d5d4c:	eb09 0100 	add.w	r1, r9, r0
   d5d50:	e7ca      	b.n	d5ce8 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5d52:	6921      	ldr	r1, [r4, #16]
   d5d54:	465a      	mov	r2, fp
   d5d56:	f000 fdf0 	bl	d693a <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d5d5a:	2800      	cmp	r0, #0
   d5d5c:	db04      	blt.n	d5d68 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   d5d5e:	d1f1      	bne.n	d5d44 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   d5d60:	7823      	ldrb	r3, [r4, #0]
   d5d62:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5d66:	d143      	bne.n	d5df0 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d5d68:	7863      	ldrb	r3, [r4, #1]
   d5d6a:	f043 0302 	orr.w	r3, r3, #2
   d5d6e:	7063      	strb	r3, [r4, #1]
  return -1;
   d5d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5d74:	e03d      	b.n	d5df2 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   d5d76:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   d5d7a:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   d5d7c:	f04f 0200 	mov.w	r2, #0
   d5d80:	f100 0024 	add.w	r0, r0, #36	; 0x24
   d5d84:	bf28      	it	cs
   d5d86:	4637      	movcs	r7, r6
   d5d88:	f000 fdae 	bl	d68e8 <_ZN8FatCache4readEmh>
      if (!pc) {
   d5d8c:	2800      	cmp	r0, #0
   d5d8e:	d0eb      	beq.n	d5d68 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   d5d90:	eb00 010a 	add.w	r1, r0, sl
   d5d94:	463a      	mov	r2, r7
   d5d96:	4640      	mov	r0, r8
   d5d98:	f002 fffe 	bl	d8d98 <memcpy>
    m_curPosition += n;
   d5d9c:	6963      	ldr	r3, [r4, #20]
   d5d9e:	443b      	add	r3, r7
    dst += n;
   d5da0:	44b8      	add	r8, r7
    m_curPosition += n;
   d5da2:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d5da4:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   d5da6:	e791      	b.n	d5ccc <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   d5da8:	7822      	ldrb	r2, [r4, #0]
   d5daa:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   d5dac:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d5db0:	d406      	bmi.n	d5dc0 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   d5db2:	7902      	ldrb	r2, [r0, #4]
   d5db4:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   d5db8:	b2d2      	uxtb	r2, r2
   d5dba:	4592      	cmp	sl, r2
   d5dbc:	bf28      	it	cs
   d5dbe:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5dc0:	4299      	cmp	r1, r3
      n = 512*nb;
   d5dc2:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5dc6:	d208      	bcs.n	d5dda <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   d5dc8:	68a0      	ldr	r0, [r4, #8]
   d5dca:	4653      	mov	r3, sl
   d5dcc:	6800      	ldr	r0, [r0, #0]
   d5dce:	4642      	mov	r2, r8
   d5dd0:	f001 f8b2 	bl	d6f38 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   d5dd4:	2800      	cmp	r0, #0
   d5dd6:	d1e1      	bne.n	d5d9c <_ZN7FatFile4readEPvj+0x100>
   d5dd8:	e7c6      	b.n	d5d68 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5dda:	4453      	add	r3, sl
   d5ddc:	428b      	cmp	r3, r1
   d5dde:	d9f3      	bls.n	d5dc8 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   d5de0:	3024      	adds	r0, #36	; 0x24
   d5de2:	9101      	str	r1, [sp, #4]
   d5de4:	f000 fd58 	bl	d6898 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   d5de8:	9901      	ldr	r1, [sp, #4]
   d5dea:	2800      	cmp	r0, #0
   d5dec:	d1ec      	bne.n	d5dc8 <_ZN7FatFile4readEPvj+0x12c>
   d5dee:	e7bb      	b.n	d5d68 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   d5df0:	1ba8      	subs	r0, r5, r6
}
   d5df2:	b003      	add	sp, #12
   d5df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5df8 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   d5df8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   d5dfa:	2201      	movs	r2, #1
   d5dfc:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   d5e00:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   d5e04:	4604      	mov	r4, r0
   d5e06:	f7ff ff49 	bl	d5c9c <_ZN7FatFile4readEPvj>
   d5e0a:	2801      	cmp	r0, #1
   d5e0c:	bf0a      	itet	eq
   d5e0e:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d5e12:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   d5e16:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   d5e1a:	b002      	add	sp, #8
   d5e1c:	bd70      	pop	{r4, r5, r6, pc}

000d5e1e <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5e1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d5e20:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   d5e22:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5e26:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d5e28:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   d5e2c:	d000      	beq.n	d5e30 <_ZN7FatFile12readDirCacheEb+0x12>
   d5e2e:	b999      	cbnz	r1, d5e58 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   d5e30:	2201      	movs	r2, #1
   d5e32:	f10d 0107 	add.w	r1, sp, #7
   d5e36:	4620      	mov	r0, r4
   d5e38:	f7ff ff30 	bl	d5c9c <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   d5e3c:	b240      	sxtb	r0, r0
   d5e3e:	2801      	cmp	r0, #1
   d5e40:	d002      	beq.n	d5e48 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   d5e42:	2000      	movs	r0, #0
}
   d5e44:	b003      	add	sp, #12
   d5e46:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   d5e48:	6963      	ldr	r3, [r4, #20]
   d5e4a:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   d5e4c:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   d5e4e:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   d5e50:	3030      	adds	r0, #48	; 0x30
   d5e52:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   d5e56:	e7f5      	b.n	d5e44 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   d5e58:	3320      	adds	r3, #32
   d5e5a:	e7f7      	b.n	d5e4c <_ZN7FatFile12readDirCacheEb+0x2e>

000d5e5c <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   d5e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isOpen()) {
   d5e60:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   d5e62:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   d5e64:	4604      	mov	r4, r0
   d5e66:	460d      	mov	r5, r1
  if (!isOpen()) {
   d5e68:	b162      	cbz	r2, d5e84 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   d5e6a:	6940      	ldr	r0, [r0, #20]
   d5e6c:	4288      	cmp	r0, r1
   d5e6e:	d002      	beq.n	d5e76 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   d5e70:	b919      	cbnz	r1, d5e7a <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   d5e72:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   d5e74:	6165      	str	r5, [r4, #20]
    return true;
   d5e76:	2001      	movs	r0, #1
   d5e78:	e006      	b.n	d5e88 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   d5e7a:	0716      	lsls	r6, r2, #28
   d5e7c:	d506      	bpl.n	d5e8c <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   d5e7e:	69e3      	ldr	r3, [r4, #28]
   d5e80:	428b      	cmp	r3, r1
   d5e82:	d20b      	bcs.n	d5e9c <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   d5e84:	6127      	str	r7, [r4, #16]
  return false;
   d5e86:	2000      	movs	r0, #0
}
   d5e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   d5e8c:	0691      	lsls	r1, r2, #26
   d5e8e:	d505      	bpl.n	d5e9c <_ZN7FatFile7seekSetEm+0x40>
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d5e90:	68a3      	ldr	r3, [r4, #8]
   d5e92:	891b      	ldrh	r3, [r3, #8]
   d5e94:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   d5e98:	d9ec      	bls.n	d5e74 <_ZN7FatFile7seekSetEm+0x18>
   d5e9a:	e7f3      	b.n	d5e84 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5e9c:	f8d4 c008 	ldr.w	ip, [r4, #8]
   d5ea0:	f89c 6006 	ldrb.w	r6, [ip, #6]
   d5ea4:	1e43      	subs	r3, r0, #1
   d5ea6:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5eaa:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5eac:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5eae:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   d5eb0:	42b3      	cmp	r3, r6
   d5eb2:	d800      	bhi.n	d5eb6 <_ZN7FatFile7seekSetEm+0x5a>
   d5eb4:	b998      	cbnz	r0, d5ede <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5eb6:	0653      	lsls	r3, r2, #25
   d5eb8:	bf4c      	ite	mi
   d5eba:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   d5ebe:	6a23      	ldrpl	r3, [r4, #32]
   d5ec0:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5ec2:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   d5ec6:	2e00      	cmp	r6, #0
   d5ec8:	d0d4      	beq.n	d5e74 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5eca:	6921      	ldr	r1, [r4, #16]
   d5ecc:	68a0      	ldr	r0, [r4, #8]
   d5ece:	4642      	mov	r2, r8
   d5ed0:	f000 fd33 	bl	d693a <_ZN9FatVolume6fatGetEmPm>
   d5ed4:	2800      	cmp	r0, #0
   d5ed6:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   d5eda:	dcf4      	bgt.n	d5ec6 <_ZN7FatFile7seekSetEm+0x6a>
   d5edc:	e7d2      	b.n	d5e84 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   d5ede:	1af6      	subs	r6, r6, r3
   d5ee0:	e7ef      	b.n	d5ec2 <_ZN7FatFile7seekSetEm+0x66>

000d5ee2 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   d5ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5ee4:	460f      	mov	r7, r1
   d5ee6:	4616      	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
   d5ee8:	2100      	movs	r1, #0
   d5eea:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   d5eec:	4604      	mov	r4, r0
   d5eee:	461d      	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
   d5ef0:	f002 ff60 	bl	d8db4 <memset>
  m_vol = dirFile->m_vol;
   d5ef4:	68b8      	ldr	r0, [r7, #8]
   d5ef6:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   d5ef8:	80a6      	strh	r6, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5efa:	f100 0230 	add.w	r2, r0, #48	; 0x30
   d5efe:	f006 060f 	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
   d5f02:	6a3b      	ldr	r3, [r7, #32]
   d5f04:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5f06:	0171      	lsls	r1, r6, #5
   d5f08:	eb02 1646 	add.w	r6, r2, r6, lsl #5
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5f0c:	7af3      	ldrb	r3, [r6, #11]
   d5f0e:	071f      	lsls	r7, r3, #28
   d5f10:	d446      	bmi.n	d5fa0 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d5f12:	1843      	adds	r3, r0, r1
   d5f14:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d5f18:	f003 0317 	and.w	r3, r3, #23
   d5f1c:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d5f1e:	7af2      	ldrb	r2, [r6, #11]
   d5f20:	f012 0f18 	tst.w	r2, #24
    m_attr |= FILE_ATTR_FILE;
   d5f24:	bf04      	itt	eq
   d5f26:	f043 0308 	orreq.w	r3, r3, #8
   d5f2a:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   d5f2c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5f30:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   d5f32:	f005 0303 	and.w	r3, r5, #3
   d5f36:	2b01      	cmp	r3, #1
   d5f38:	d02c      	beq.n	d5f94 <_ZN7FatFile15openCachedEntryEPS_tih+0xb2>
   d5f3a:	2b02      	cmp	r3, #2
   d5f3c:	d028      	beq.n	d5f90 <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
   d5f3e:	bb7b      	cbnz	r3, d5fa0 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      if (oflag & O_TRUNC) {
   d5f40:	056a      	lsls	r2, r5, #21
   d5f42:	d42d      	bmi.n	d5fa0 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      m_flags = F_READ;
   d5f44:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   d5f46:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   d5f48:	78a2      	ldrb	r2, [r4, #2]
   d5f4a:	0793      	lsls	r3, r2, #30
   d5f4c:	d504      	bpl.n	d5f58 <_ZN7FatFile15openCachedEntryEPS_tih+0x76>
    if (isSubDir() || isReadOnly()) {
   d5f4e:	7823      	ldrb	r3, [r4, #0]
   d5f50:	06df      	lsls	r7, r3, #27
   d5f52:	d425      	bmi.n	d5fa0 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
   d5f54:	07de      	lsls	r6, r3, #31
   d5f56:	d423      	bmi.n	d5fa0 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d5f58:	11ab      	asrs	r3, r5, #6
   d5f5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d5f5e:	f005 0608 	and.w	r6, r5, #8
   d5f62:	4333      	orrs	r3, r6
   d5f64:	4313      	orrs	r3, r2
   d5f66:	70a3      	strb	r3, [r4, #2]
    return m_cache.lbn();
   d5f68:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   d5f6a:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d5f6c:	1843      	adds	r3, r0, r1
   d5f6e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   d5f72:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d5f76:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   d5f7a:	056a      	lsls	r2, r5, #21
   d5f7c:	d513      	bpl.n	d5fa6 <_ZN7FatFile15openCachedEntryEPS_tih+0xc4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d5f7e:	b959      	cbnz	r1, d5f98 <_ZN7FatFile15openCachedEntryEPS_tih+0xb6>
    m_flags |= F_FILE_DIR_DIRTY;
   d5f80:	78a3      	ldrb	r3, [r4, #2]
   d5f82:	f043 0304 	orr.w	r3, r3, #4
   d5f86:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d5f88:	046b      	lsls	r3, r5, #17
   d5f8a:	d410      	bmi.n	d5fae <_ZN7FatFile15openCachedEntryEPS_tih+0xcc>
  return true;
   d5f8c:	2001      	movs	r0, #1
}
   d5f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   d5f90:	2303      	movs	r3, #3
   d5f92:	e7d8      	b.n	d5f46 <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
      m_flags = F_WRITE;
   d5f94:	2302      	movs	r3, #2
   d5f96:	e7d6      	b.n	d5f46 <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d5f98:	f000 fd6f 	bl	d6a7a <_ZN9FatVolume9freeChainEm>
   d5f9c:	2800      	cmp	r0, #0
   d5f9e:	d1ef      	bne.n	d5f80 <_ZN7FatFile15openCachedEntryEPS_tih+0x9e>
  m_attr = FILE_ATTR_CLOSED;
   d5fa0:	2000      	movs	r0, #0
   d5fa2:	7020      	strb	r0, [r4, #0]
  return false;
   d5fa4:	e7f3      	b.n	d5f8e <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
    m_firstCluster = firstCluster;
   d5fa6:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d5fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5faa:	61e3      	str	r3, [r4, #28]
   d5fac:	e7ec      	b.n	d5f88 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d5fae:	69e1      	ldr	r1, [r4, #28]
   d5fb0:	4620      	mov	r0, r4
   d5fb2:	f7ff ff53 	bl	d5e5c <_ZN7FatFile7seekSetEm>
   d5fb6:	2800      	cmp	r0, #0
   d5fb8:	d1e8      	bne.n	d5f8c <_ZN7FatFile15openCachedEntryEPS_tih+0xaa>
   d5fba:	e7f1      	b.n	d5fa0 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>

000d5fbc <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5fbc:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d5fbe:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   d5fc0:	4604      	mov	r4, r0
  if (!isOpen()) {
   d5fc2:	b90b      	cbnz	r3, d5fc8 <_ZN7FatFile4syncEv+0xc>
    return true;
   d5fc4:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   d5fc6:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   d5fc8:	7883      	ldrb	r3, [r0, #2]
   d5fca:	075a      	lsls	r2, r3, #29
   d5fcc:	d523      	bpl.n	d6016 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d5fce:	2101      	movs	r1, #1
   d5fd0:	f7ff fe3c 	bl	d5c4c <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5fd4:	4605      	mov	r5, r0
   d5fd6:	b928      	cbnz	r0, d5fe4 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   d5fd8:	7863      	ldrb	r3, [r4, #1]
   d5fda:	f043 0301 	orr.w	r3, r3, #1
   d5fde:	7063      	strb	r3, [r4, #1]
  return false;
   d5fe0:	2000      	movs	r0, #0
   d5fe2:	e7f0      	b.n	d5fc6 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5fe4:	7803      	ldrb	r3, [r0, #0]
   d5fe6:	2be5      	cmp	r3, #229	; 0xe5
   d5fe8:	d0f6      	beq.n	d5fd8 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   d5fea:	7823      	ldrb	r3, [r4, #0]
   d5fec:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d5fee:	bf44      	itt	mi
   d5ff0:	69e3      	ldrmi	r3, [r4, #28]
   d5ff2:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d5ff4:	8c23      	ldrh	r3, [r4, #32]
   d5ff6:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d5ff8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5ffa:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   d5ffc:	4b09      	ldr	r3, [pc, #36]	; (d6024 <_ZN7FatFile4syncEv+0x68>)
   d5ffe:	681b      	ldr	r3, [r3, #0]
   d6000:	b12b      	cbz	r3, d600e <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d6002:	f100 0116 	add.w	r1, r0, #22
   d6006:	3018      	adds	r0, #24
   d6008:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d600a:	8b2b      	ldrh	r3, [r5, #24]
   d600c:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   d600e:	78a3      	ldrb	r3, [r4, #2]
   d6010:	f023 0304 	bic.w	r3, r3, #4
   d6014:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   d6016:	68a0      	ldr	r0, [r4, #8]
   d6018:	f7ff fdc2 	bl	d5ba0 <_ZN9FatVolume9cacheSyncEv>
   d601c:	2800      	cmp	r0, #0
   d601e:	d0db      	beq.n	d5fd8 <_ZN7FatFile4syncEv+0x1c>
   d6020:	e7d0      	b.n	d5fc4 <_ZN7FatFile4syncEv+0x8>
   d6022:	bf00      	nop
   d6024:	2003e5a4 	.word	0x2003e5a4

000d6028 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   d6028:	b510      	push	{r4, lr}
   d602a:	4604      	mov	r4, r0
  bool rtn = sync();
   d602c:	f7ff ffc6 	bl	d5fbc <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d6030:	2300      	movs	r3, #0
   d6032:	7023      	strb	r3, [r4, #0]
}
   d6034:	bd10      	pop	{r4, pc}

000d6036 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d6036:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6038:	b093      	sub	sp, #76	; 0x4c
   d603a:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d603c:	2300      	movs	r3, #0
   d603e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   d6042:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d6044:	9201      	str	r2, [sp, #4]
   d6046:	4606      	mov	r6, r0
   d6048:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   d604a:	b113      	cbz	r3, d6052 <_ZN7FatFile4openEPS_PKci+0x1c>
  return false;
   d604c:	2000      	movs	r0, #0
}
   d604e:	b013      	add	sp, #76	; 0x4c
   d6050:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   d6052:	780b      	ldrb	r3, [r1, #0]
   d6054:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6058:	d0f8      	beq.n	d604c <_ZN7FatFile4openEPS_PKci+0x16>
  if (isDirSeparator(*path)) {
   d605a:	7813      	ldrb	r3, [r2, #0]
   d605c:	2b2f      	cmp	r3, #47	; 0x2f
   d605e:	d112      	bne.n	d6086 <_ZN7FatFile4openEPS_PKci+0x50>
    while (isDirSeparator(*path)) {
   d6060:	9a01      	ldr	r2, [sp, #4]
   d6062:	7813      	ldrb	r3, [r2, #0]
   d6064:	2b2f      	cmp	r3, #47	; 0x2f
   d6066:	d102      	bne.n	d606e <_ZN7FatFile4openEPS_PKci+0x38>
      path++;
   d6068:	3201      	adds	r2, #1
   d606a:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   d606c:	e7f8      	b.n	d6060 <_ZN7FatFile4openEPS_PKci+0x2a>
    if (*path == 0) {
   d606e:	68a1      	ldr	r1, [r4, #8]
   d6070:	b91b      	cbnz	r3, d607a <_ZN7FatFile4openEPS_PKci+0x44>
      return openRoot(dirFile->m_vol);
   d6072:	4630      	mov	r0, r6
   d6074:	f7ff fdf9 	bl	d5c6a <_ZN7FatFile8openRootEP9FatVolume>
   d6078:	e7e9      	b.n	d604e <_ZN7FatFile4openEPS_PKci+0x18>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d607a:	a809      	add	r0, sp, #36	; 0x24
   d607c:	f7ff fdf5 	bl	d5c6a <_ZN7FatFile8openRootEP9FatVolume>
   d6080:	2800      	cmp	r0, #0
   d6082:	d0e3      	beq.n	d604c <_ZN7FatFile4openEPS_PKci+0x16>
    dirFile = &tmpDir;
   d6084:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   d6086:	9801      	ldr	r0, [sp, #4]
   d6088:	aa01      	add	r2, sp, #4
   d608a:	a903      	add	r1, sp, #12
   d608c:	f000 f8f6 	bl	d627c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d6090:	2800      	cmp	r0, #0
   d6092:	d0db      	beq.n	d604c <_ZN7FatFile4openEPS_PKci+0x16>
    if (*path == 0) {
   d6094:	9b01      	ldr	r3, [sp, #4]
   d6096:	781b      	ldrb	r3, [r3, #0]
   d6098:	b19b      	cbz	r3, d60c2 <_ZN7FatFile4openEPS_PKci+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
   d609a:	2300      	movs	r3, #0
   d609c:	aa03      	add	r2, sp, #12
   d609e:	4621      	mov	r1, r4
   d60a0:	4630      	mov	r0, r6
   d60a2:	f000 fa1f 	bl	d64e4 <_ZN7FatFile4openEPS_P7fname_ti>
   d60a6:	2800      	cmp	r0, #0
   d60a8:	d0d0      	beq.n	d604c <_ZN7FatFile4openEPS_PKci+0x16>
    tmpDir = *this;
   d60aa:	4635      	mov	r5, r6
   d60ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d60ae:	ac09      	add	r4, sp, #36	; 0x24
   d60b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d60b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d60b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d60b6:	682b      	ldr	r3, [r5, #0]
   d60b8:	6023      	str	r3, [r4, #0]
    close();
   d60ba:	4630      	mov	r0, r6
   d60bc:	f7ff ffb4 	bl	d6028 <_ZN7FatFile5closeEv>
  while (1) {
   d60c0:	e7e0      	b.n	d6084 <_ZN7FatFile4openEPS_PKci+0x4e>
  return open(dirFile, &fname, oflag);
   d60c2:	463b      	mov	r3, r7
   d60c4:	aa03      	add	r2, sp, #12
   d60c6:	4621      	mov	r1, r4
   d60c8:	4630      	mov	r0, r6
   d60ca:	f000 fa0b 	bl	d64e4 <_ZN7FatFile4openEPS_P7fname_ti>
   d60ce:	e7be      	b.n	d604e <_ZN7FatFile4openEPS_PKci+0x18>

000d60d0 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d60d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d60d4:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   d60d6:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   d60d8:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   d60da:	4604      	mov	r4, r0
   d60dc:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   d60de:	d55b      	bpl.n	d6198 <_ZN7FatFile5writeEPKvj+0xc8>
   d60e0:	7883      	ldrb	r3, [r0, #2]
   d60e2:	079a      	lsls	r2, r3, #30
   d60e4:	d558      	bpl.n	d6198 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d60e6:	071b      	lsls	r3, r3, #28
   d60e8:	d451      	bmi.n	d618e <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d60ea:	6963      	ldr	r3, [r4, #20]
   d60ec:	43db      	mvns	r3, r3
   d60ee:	42bb      	cmp	r3, r7
   d60f0:	d352      	bcc.n	d6198 <_ZN7FatFile5writeEPKvj+0xc8>
   d60f2:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d60f4:	f104 0a10 	add.w	sl, r4, #16
  while (nToWrite) {
   d60f8:	6966      	ldr	r6, [r4, #20]
   d60fa:	f1b8 0f00 	cmp.w	r8, #0
   d60fe:	f000 8091 	beq.w	d6224 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d6102:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   d6104:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d6106:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d610a:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   d610e:	d10e      	bne.n	d612e <_ZN7FatFile5writeEPKvj+0x5e>
   d6110:	b96d      	cbnz	r5, d612e <_ZN7FatFile5writeEPKvj+0x5e>
   d6112:	6921      	ldr	r1, [r4, #16]
      if (m_curCluster != 0) {
   d6114:	2900      	cmp	r1, #0
   d6116:	d046      	beq.n	d61a6 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6118:	4652      	mov	r2, sl
   d611a:	f000 fc0e 	bl	d693a <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d611e:	2800      	cmp	r0, #0
   d6120:	db3a      	blt.n	d6198 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d6122:	d104      	bne.n	d612e <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   d6124:	4620      	mov	r0, r4
   d6126:	f7ff fd48 	bl	d5bba <_ZN7FatFile10addClusterEv>
   d612a:	2800      	cmp	r0, #0
   d612c:	d034      	beq.n	d6198 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d612e:	6921      	ldr	r1, [r4, #16]
   d6130:	68a0      	ldr	r0, [r4, #8]
   d6132:	f000 fbfc 	bl	d692e <_ZNK9FatVolume17clusterFirstBlockEm>
   d6136:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d6138:	68a0      	ldr	r0, [r4, #8]
   d613a:	b915      	cbnz	r5, d6142 <_ZN7FatFile5writeEPKvj+0x72>
   d613c:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   d6140:	d23f      	bcs.n	d61c2 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d6142:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   d6146:	4546      	cmp	r6, r8
   d6148:	bf28      	it	cs
   d614a:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d614c:	2d00      	cmp	r5, #0
   d614e:	d136      	bne.n	d61be <_ZN7FatFile5writeEPKvj+0xee>
   d6150:	6962      	ldr	r2, [r4, #20]
   d6152:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d6154:	429a      	cmp	r2, r3
   d6156:	bf34      	ite	cc
   d6158:	2201      	movcc	r2, #1
   d615a:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   d615c:	3024      	adds	r0, #36	; 0x24
   d615e:	f000 fbc3 	bl	d68e8 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d6162:	b1c8      	cbz	r0, d6198 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d6164:	4428      	add	r0, r5
   d6166:	4632      	mov	r2, r6
   d6168:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d616a:	4435      	add	r5, r6
      memcpy(dst, src, n);
   d616c:	f002 fe14 	bl	d8d98 <memcpy>
      if (512 == (n + blockOffset)) {
   d6170:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   d6174:	d104      	bne.n	d6180 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   d6176:	68a0      	ldr	r0, [r4, #8]
   d6178:	3024      	adds	r0, #36	; 0x24
   d617a:	f000 fb8d 	bl	d6898 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d617e:	b158      	cbz	r0, d6198 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d6180:	6963      	ldr	r3, [r4, #20]
   d6182:	4433      	add	r3, r6
   d6184:	6163      	str	r3, [r4, #20]
    src += n;
   d6186:	44b1      	add	r9, r6
    nToWrite -= n;
   d6188:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   d618c:	e7b4      	b.n	d60f8 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   d618e:	69c1      	ldr	r1, [r0, #28]
   d6190:	f7ff fe64 	bl	d5e5c <_ZN7FatFile7seekSetEm>
   d6194:	2800      	cmp	r0, #0
   d6196:	d1a8      	bne.n	d60ea <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d6198:	7863      	ldrb	r3, [r4, #1]
   d619a:	f043 0301 	orr.w	r3, r3, #1
   d619e:	7063      	strb	r3, [r4, #1]
  return -1;
   d61a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d61a4:	e050      	b.n	d6248 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   d61a6:	6a23      	ldr	r3, [r4, #32]
   d61a8:	b93b      	cbnz	r3, d61ba <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   d61aa:	4620      	mov	r0, r4
   d61ac:	f7ff fd05 	bl	d5bba <_ZN7FatFile10addClusterEv>
   d61b0:	2800      	cmp	r0, #0
   d61b2:	d0f1      	beq.n	d6198 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   d61b4:	6923      	ldr	r3, [r4, #16]
   d61b6:	6223      	str	r3, [r4, #32]
   d61b8:	e7b9      	b.n	d612e <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   d61ba:	6123      	str	r3, [r4, #16]
   d61bc:	e7b7      	b.n	d612e <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d61be:	2201      	movs	r2, #1
   d61c0:	e7cc      	b.n	d615c <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   d61c2:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d61c6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   d61c8:	d31b      	bcc.n	d6202 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   d61ca:	f890 c004 	ldrb.w	ip, [r0, #4]
   d61ce:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   d61d2:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   d61d4:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   d61d8:	4573      	cmp	r3, lr
   d61da:	bf28      	it	cs
   d61dc:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d61de:	4291      	cmp	r1, r2
      n = 512*nb;
   d61e0:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d61e4:	d307      	bcc.n	d61f6 <_ZN7FatFile5writeEPKvj+0x126>
   d61e6:	441a      	add	r2, r3
   d61e8:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   d61ea:	bf82      	ittt	hi
   d61ec:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   d61f0:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d61f4:	62c2      	strhi	r2, [r0, #44]	; 0x2c
      if (!m_vol->writeBlocks(block, src, nb)) {
   d61f6:	68a5      	ldr	r5, [r4, #8]
    return m_blockDev->writeBlocks(block, src, nb);
   d61f8:	464a      	mov	r2, r9
   d61fa:	6828      	ldr	r0, [r5, #0]
   d61fc:	f000 ff53 	bl	d70a6 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   d6200:	e7bd      	b.n	d617e <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   d6202:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   d6204:	bf02      	ittt	eq
   d6206:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   d620a:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d620e:	62c3      	streq	r3, [r0, #44]	; 0x2c
      if (!m_vol->writeBlock(block, src)) {
   d6210:	68a3      	ldr	r3, [r4, #8]
    return m_blockDev->writeBlock(block, src);
   d6212:	464a      	mov	r2, r9
   d6214:	6818      	ldr	r0, [r3, #0]
   d6216:	f000 fed0 	bl	d6fba <_ZN9SdSpiCard10writeBlockEmPKh>
   d621a:	2800      	cmp	r0, #0
   d621c:	d0bc      	beq.n	d6198 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   d621e:	f44f 7600 	mov.w	r6, #512	; 0x200
   d6222:	e7ad      	b.n	d6180 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   d6224:	69e2      	ldr	r2, [r4, #28]
   d6226:	78a3      	ldrb	r3, [r4, #2]
   d6228:	42b2      	cmp	r2, r6
   d622a:	d204      	bcs.n	d6236 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   d622c:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   d622e:	f043 0304 	orr.w	r3, r3, #4
   d6232:	70a3      	strb	r3, [r4, #2]
   d6234:	e003      	b.n	d623e <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   d6236:	4a08      	ldr	r2, [pc, #32]	; (d6258 <_ZN7FatFile5writeEPKvj+0x188>)
   d6238:	6812      	ldr	r2, [r2, #0]
   d623a:	2a00      	cmp	r2, #0
   d623c:	d1f7      	bne.n	d622e <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   d623e:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d6242:	2b00      	cmp	r3, #0
   d6244:	db02      	blt.n	d624c <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   d6246:	4638      	mov	r0, r7
}
   d6248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   d624c:	4620      	mov	r0, r4
   d624e:	f7ff feb5 	bl	d5fbc <_ZN7FatFile4syncEv>
   d6252:	2800      	cmp	r0, #0
   d6254:	d1f7      	bne.n	d6246 <_ZN7FatFile5writeEPKvj+0x176>
   d6256:	e79f      	b.n	d6198 <_ZN7FatFile5writeEPKvj+0xc8>
   d6258:	2003e5a4 	.word	0x2003e5a4

000d625c <_ZN7FatFile11lfnChecksumEPh>:
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d625c:	1e41      	subs	r1, r0, #1
   d625e:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   d6262:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d6264:	0842      	lsrs	r2, r0, #1
   d6266:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   d626a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d626e:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   d6272:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d6274:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   d6276:	d1f5      	bne.n	d6264 <_ZN7FatFile11lfnChecksumEPh+0x8>
  }
  return sum;
}
   d6278:	4770      	bx	lr
	...

000d627c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d627c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6280:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d6282:	f810 3b01 	ldrb.w	r3, [r0], #1
   d6286:	2b20      	cmp	r3, #32
   d6288:	d0fa      	beq.n	d6280 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d628a:	4d6b      	ldr	r5, [pc, #428]	; (d6438 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1bc>)
    path++;
  }
  fname->lfn = path;
   d628c:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   d628e:	2400      	movs	r4, #0
    c = path[len];
   d6290:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   d6292:	b1c3      	cbz	r3, d62c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   d6294:	2b2f      	cmp	r3, #47	; 0x2f
   d6296:	d016      	beq.n	d62c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6298:	2b5c      	cmp	r3, #92	; 0x5c
   d629a:	d102      	bne.n	d62a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d629c:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   d629e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d62a2:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   d62a6:	b2c0      	uxtb	r0, r0
   d62a8:	281d      	cmp	r0, #29
   d62aa:	d803      	bhi.n	d62b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   d62ac:	fa25 f000 	lsr.w	r0, r5, r0
   d62b0:	07c0      	lsls	r0, r0, #31
   d62b2:	d4f3      	bmi.n	d629c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d62b4:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   d62b8:	283c      	cmp	r0, #60	; 0x3c
   d62ba:	d0ef      	beq.n	d629c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   d62bc:	3b20      	subs	r3, #32
   d62be:	2b5e      	cmp	r3, #94	; 0x5e
   d62c0:	d8ec      	bhi.n	d629c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   d62c2:	3401      	adds	r4, #1
    c = path[len];
   d62c4:	e7e4      	b.n	d6290 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   d62c6:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   d62c8:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d62ca:	4607      	mov	r7, r0
   d62cc:	f810 5b01 	ldrb.w	r5, [r0], #1
   d62d0:	2d20      	cmp	r5, #32
   d62d2:	d0fa      	beq.n	d62ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   d62d4:	2d2f      	cmp	r5, #47	; 0x2f
   d62d6:	d0f8      	beq.n	d62ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   d62d8:	6017      	str	r7, [r2, #0]
  while (len) {
   d62da:	b14c      	cbz	r4, d62f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   d62dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d62e0:	2a2e      	cmp	r2, #46	; 0x2e
   d62e2:	d001      	beq.n	d62e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   d62e4:	2a20      	cmp	r2, #32
   d62e6:	d101      	bne.n	d62ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   d62e8:	3c01      	subs	r4, #1
  while (len) {
   d62ea:	e7f6      	b.n	d62da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   d62ec:	2cff      	cmp	r4, #255	; 0xff
   d62ee:	dcd5      	bgt.n	d629c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  fname->len = len;
   d62f0:	604c      	str	r4, [r1, #4]
  for (uint8_t k = 0; k < 11; k++) {
   d62f2:	f101 030d 	add.w	r3, r1, #13
   d62f6:	f101 0218 	add.w	r2, r1, #24
    fname->sfn[k] = ' ';
   d62fa:	2020      	movs	r0, #32
   d62fc:	f803 0b01 	strb.w	r0, [r3], #1
  for (uint8_t k = 0; k < 11; k++) {
   d6300:	4293      	cmp	r3, r2
   d6302:	d1fb      	bne.n	d62fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x80>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d6304:	f04f 0800 	mov.w	r8, #0
   d6308:	f816 3008 	ldrb.w	r3, [r6, r8]
   d630c:	2b2e      	cmp	r3, #46	; 0x2e
   d630e:	d001      	beq.n	d6314 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d6310:	2b20      	cmp	r3, #32
   d6312:	d102      	bne.n	d631a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9e>
   d6314:	f108 0801 	add.w	r8, r8, #1
   d6318:	e7f6      	b.n	d6308 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8c>
  is83 = !si;
   d631a:	fab8 f088 	clz	r0, r8
   d631e:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d6320:	1e65      	subs	r5, r4, #1
   d6322:	1c6b      	adds	r3, r5, #1
   d6324:	d002      	beq.n	d632c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb0>
   d6326:	5d73      	ldrb	r3, [r6, r5]
   d6328:	2b2e      	cmp	r3, #46	; 0x2e
   d632a:	d114      	bne.n	d6356 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d632c:	f04f 0900 	mov.w	r9, #0
   d6330:	2707      	movs	r7, #7
   d6332:	464a      	mov	r2, r9
   d6334:	46ca      	mov	sl, r9
   d6336:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   d633a:	45a0      	cmp	r8, r4
   d633c:	da69      	bge.n	d6412 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x196>
    c = path[si];
   d633e:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   d6342:	2b20      	cmp	r3, #32
   d6344:	d003      	beq.n	d634e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
   d6346:	2b2e      	cmp	r3, #46	; 0x2e
   d6348:	d107      	bne.n	d635a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d634a:	45a8      	cmp	r8, r5
   d634c:	d012      	beq.n	d6374 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
      is83 = false;
   d634e:	2000      	movs	r0, #0
  for (; si < len; si++) {
   d6350:	f108 0801 	add.w	r8, r8, #1
   d6354:	e7f1      	b.n	d633a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d6356:	3d01      	subs	r5, #1
   d6358:	e7e3      	b.n	d6322 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa6>
    if (c == '"' || c == '|') {
   d635a:	2b22      	cmp	r3, #34	; 0x22
   d635c:	d008      	beq.n	d6370 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   d635e:	2b7c      	cmp	r3, #124	; 0x7c
   d6360:	d006      	beq.n	d6370 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d6362:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d6366:	f1bc 0f05 	cmp.w	ip, #5
   d636a:	d80b      	bhi.n	d6384 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d636c:	2b2d      	cmp	r3, #45	; 0x2d
   d636e:	d013      	beq.n	d6398 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x11c>
    if (!legal83Char(c) && si != dot) {
   d6370:	45a8      	cmp	r8, r5
   d6372:	d15c      	bne.n	d642e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b2>
      if (in == 10) {
   d6374:	2f0a      	cmp	r7, #10
   d6376:	d04b      	beq.n	d6410 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
   d6378:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   d637a:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   d637c:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d637e:	f04f 0e10 	mov.w	lr, #16
   d6382:	e7e5      	b.n	d6350 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
    if (0X3A <= c && c <= 0X3F) {
   d6384:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d6388:	f1bc 0f05 	cmp.w	ip, #5
   d638c:	d9f0      	bls.n	d6370 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X5B <= c && c <= 0X5D) {
   d638e:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d6392:	f1bc 0f02 	cmp.w	ip, #2
   d6396:	d9eb      	bls.n	d6370 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (!legal83Char(c) && si != dot) {
   d6398:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d639c:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d63a0:	d8e6      	bhi.n	d6370 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (si == dot || i > in) {
   d63a2:	45a8      	cmp	r8, r5
   d63a4:	d0e6      	beq.n	d6374 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
   d63a6:	42ba      	cmp	r2, r7
   d63a8:	d830      	bhi.n	d640c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      if ('a' <= c && c <= 'z') {
   d63aa:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d63ae:	f1bc 0f19 	cmp.w	ip, #25
   d63b2:	d81a      	bhi.n	d63ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16e>
        c += 'A' - 'a';
   d63b4:	3b20      	subs	r3, #32
        lc |= bit;
   d63b6:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   d63ba:	b2db      	uxtb	r3, r3
        lc |= bit;
   d63bc:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   d63c0:	f102 0c01 	add.w	ip, r2, #1
   d63c4:	fa5f fc8c 	uxtb.w	ip, ip
   d63c8:	440a      	add	r2, r1
      if (i < 7) {
   d63ca:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   d63ce:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   d63d0:	d801      	bhi.n	d63d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15a>
        fname->seqPos = i;
   d63d2:	f881 c00c 	strb.w	ip, [r1, #12]
   d63d6:	4662      	mov	r2, ip
   d63d8:	e7ba      	b.n	d6350 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
      if (si > dot) {
   d63da:	45a8      	cmp	r8, r5
   d63dc:	dc18      	bgt.n	d6410 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
   d63de:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   d63e0:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   d63e2:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d63e4:	f04f 0e10 	mov.w	lr, #16
   d63e8:	e7b1      	b.n	d634e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
      } else if ('A' <= c && c <= 'Z') {
   d63ea:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d63ee:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d63f2:	bf98      	it	ls
   d63f4:	ea4e 0a0a 	orrls.w	sl, lr, sl
   d63f8:	e7e2      	b.n	d63c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
    fname->sfn[fname->seqPos] = '~';
   d63fa:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d63fc:	2001      	movs	r0, #1
   d63fe:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d6400:	4419      	add	r1, r3
   d6402:	237e      	movs	r3, #126	; 0x7e
   d6404:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d6406:	2331      	movs	r3, #49	; 0x31
   d6408:	738b      	strb	r3, [r1, #14]
   d640a:	e748      	b.n	d629e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   d640c:	2f0a      	cmp	r7, #10
   d640e:	d1e4      	bne.n	d63da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
        is83 = false;
   d6410:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   d6412:	7b4b      	ldrb	r3, [r1, #13]
   d6414:	2b20      	cmp	r3, #32
   d6416:	f43f af41 	beq.w	d629c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   d641a:	2800      	cmp	r0, #0
   d641c:	d0ed      	beq.n	d63fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d641e:	ea1a 0f09 	tst.w	sl, r9
   d6422:	bf18      	it	ne
   d6424:	f04f 0902 	movne.w	r9, #2
   d6428:	f881 9000 	strb.w	r9, [r1]
   d642c:	e737      	b.n	d629e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   d642e:	42ba      	cmp	r2, r7
   d6430:	d8ec      	bhi.n	d640c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      c = '_';
   d6432:	235f      	movs	r3, #95	; 0x5f
      is83 = false;
   d6434:	2000      	movs	r0, #0
   d6436:	e7c3      	b.n	d63c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
   d6438:	31000101 	.word	0x31000101

000d643c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d643c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d6440:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6444:	4606      	mov	r6, r0
   d6446:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   d6448:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d644a:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d644c:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d6450:	6861      	ldr	r1, [r4, #4]
   d6452:	68a2      	ldr	r2, [r4, #8]
   d6454:	186b      	adds	r3, r5, r1
   d6456:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   d6458:	4411      	add	r1, r2
   d645a:	4291      	cmp	r1, r2
   d645c:	d006      	beq.n	d646c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   d645e:	f812 0b01 	ldrb.w	r0, [r2], #1
   d6462:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d6466:	4043      	eors	r3, r0
   d6468:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   d646a:	e7f6      	b.n	d645a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   d646c:	f1b9 0f03 	cmp.w	r9, #3
   d6470:	bf28      	it	cs
   d6472:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6476:	f109 0204 	add.w	r2, r9, #4
   d647a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d647c:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6480:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6482:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6484:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6486:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6488:	bf94      	ite	ls
   d648a:	3130      	addls	r1, #48	; 0x30
   d648c:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d648e:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6490:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d6492:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6496:	d1f1      	bne.n	d647c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   d6498:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   d649c:	2100      	movs	r1, #0
   d649e:	735f      	strb	r7, [r3, #13]
   d64a0:	4630      	mov	r0, r6
   d64a2:	f7ff fcdb 	bl	d5e5c <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   d64a6:	2101      	movs	r1, #1
   d64a8:	4630      	mov	r0, r6
   d64aa:	f7ff fcb8 	bl	d5e1e <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d64ae:	4601      	mov	r1, r0
   d64b0:	b928      	cbnz	r0, d64be <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d64b2:	7870      	ldrb	r0, [r6, #1]
   d64b4:	fab0 f080 	clz	r0, r0
   d64b8:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   d64ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   d64be:	7803      	ldrb	r3, [r0, #0]
   d64c0:	b16b      	cbz	r3, d64de <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d64c2:	7ac3      	ldrb	r3, [r0, #11]
   d64c4:	071b      	lsls	r3, r3, #28
   d64c6:	d4ee      	bmi.n	d64a6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d64c8:	220b      	movs	r2, #11
   d64ca:	4640      	mov	r0, r8
   d64cc:	f002 fc56 	bl	d8d7c <memcmp>
   d64d0:	2800      	cmp	r0, #0
   d64d2:	d1e8      	bne.n	d64a6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   d64d4:	3501      	adds	r5, #1
   d64d6:	b2ad      	uxth	r5, r5
   d64d8:	2d64      	cmp	r5, #100	; 0x64
   d64da:	d1b9      	bne.n	d6450 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   d64dc:	e7ed      	b.n	d64ba <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   d64de:	2001      	movs	r0, #1
   d64e0:	e7eb      	b.n	d64ba <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000d64e4 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d64e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d64e8:	ed2d 8b02 	vpush	{d8}
   d64ec:	b089      	sub	sp, #36	; 0x24
   d64ee:	460d      	mov	r5, r1
   d64f0:	9305      	str	r3, [sp, #20]
  if (!dirFile->isDir() || isOpen()) {
   d64f2:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d64f4:	9006      	str	r0, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   d64f6:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d64fa:	4690      	mov	r8, r2
  if (!dirFile->isDir() || isOpen()) {
   d64fc:	d105      	bne.n	d650a <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   d64fe:	2000      	movs	r0, #0
}
   d6500:	b009      	add	sp, #36	; 0x24
   d6502:	ecbd 8b02 	vpop	{d8}
   d6506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
   d650a:	9b06      	ldr	r3, [sp, #24]
   d650c:	781b      	ldrb	r3, [r3, #0]
   d650e:	2b00      	cmp	r3, #0
   d6510:	d1f5      	bne.n	d64fe <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   d6512:	6853      	ldr	r3, [r2, #4]
   d6514:	9304      	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6516:	7813      	ldrb	r3, [r2, #0]
   d6518:	0799      	lsls	r1, r3, #30
   d651a:	bf1c      	itt	ne
   d651c:	9b04      	ldrne	r3, [sp, #16]
   d651e:	f103 070c 	addne.w	r7, r3, #12
   d6522:	f04f 0100 	mov.w	r1, #0
   d6526:	bf18      	it	ne
   d6528:	230d      	movne	r3, #13
   d652a:	4628      	mov	r0, r5
   d652c:	bf1d      	ittte	ne
   d652e:	fbb7 f7f3 	udivne	r7, r7, r3
   d6532:	3701      	addne	r7, #1
   d6534:	b2ff      	uxtbne	r7, r7
   d6536:	2701      	moveq	r7, #1
   d6538:	f7ff fc90 	bl	d5e5c <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d653c:	f108 020d 	add.w	r2, r8, #13
  }
   d6540:	2300      	movs	r3, #0
   d6542:	ee08 2a10 	vmov	s16, r2
   d6546:	469b      	mov	fp, r3
   d6548:	461c      	mov	r4, r3
   d654a:	461e      	mov	r6, r3
   d654c:	9303      	str	r3, [sp, #12]
   d654e:	469a      	mov	sl, r3
    curIndex = dirFile->m_curPosition/32;
   d6550:	696a      	ldr	r2, [r5, #20]
   d6552:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d6554:	2101      	movs	r1, #1
   d6556:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   d6558:	f3c2 194f 	ubfx	r9, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d655c:	f7ff fc5f 	bl	d5e1e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6560:	9b07      	ldr	r3, [sp, #28]
   d6562:	2800      	cmp	r0, #0
   d6564:	d16e      	bne.n	d6644 <_ZN7FatFile4openEPS_P7fname_ti+0x160>
      if (dirFile->getError()) {
   d6566:	786b      	ldrb	r3, [r5, #1]
   d6568:	2b00      	cmp	r3, #0
   d656a:	d1c8      	bne.n	d64fe <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d656c:	9b05      	ldr	r3, [sp, #20]
   d656e:	059a      	lsls	r2, r3, #22
   d6570:	d5c5      	bpl.n	d64fe <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   d6572:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   d6576:	3b01      	subs	r3, #1
   d6578:	2b01      	cmp	r3, #1
   d657a:	d8c0      	bhi.n	d64fe <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   d657c:	9b03      	ldr	r3, [sp, #12]
   d657e:	2c00      	cmp	r4, #0
   d6580:	bf08      	it	eq
   d6582:	464b      	moveq	r3, r9
   d6584:	9303      	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
   d6586:	42bc      	cmp	r4, r7
   d6588:	f0c0 8103 	bcc.w	d6792 <_ZN7FatFile4openEPS_P7fname_ti+0x2ae>
  if (fnameFound) {
   d658c:	f1ba 0f00 	cmp.w	sl, #0
   d6590:	f040 811b 	bne.w	d67ca <_ZN7FatFile4openEPS_P7fname_ti+0x2e6>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d6594:	9b03      	ldr	r3, [sp, #12]
   d6596:	4628      	mov	r0, r5
   d6598:	0159      	lsls	r1, r3, #5
   d659a:	f7ff fc5f 	bl	d5e5c <_ZN7FatFile7seekSetEm>
   d659e:	2800      	cmp	r0, #0
   d65a0:	d0ad      	beq.n	d64fe <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   d65a2:	3f01      	subs	r7, #1
   d65a4:	fa5f fa87 	uxtb.w	sl, r7
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d65a8:	4656      	mov	r6, sl
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d65aa:	f04f 0900 	mov.w	r9, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   d65ae:	270f      	movs	r7, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d65b0:	2e00      	cmp	r6, #0
   d65b2:	f000 8121 	beq.w	d67f8 <_ZN7FatFile4openEPS_P7fname_ti+0x314>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d65b6:	2100      	movs	r1, #0
   d65b8:	4628      	mov	r0, r5
   d65ba:	f7ff fc30 	bl	d5e1e <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d65be:	4604      	mov	r4, r0
   d65c0:	2800      	cmp	r0, #0
   d65c2:	d09c      	beq.n	d64fe <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   d65c4:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   d65c6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d65ca:	4556      	cmp	r6, sl
   d65cc:	f043 0301 	orr.w	r3, r3, #1
   d65d0:	bf0c      	ite	eq
   d65d2:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   d65d6:	46b3      	movne	fp, r6
   d65d8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d65dc:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d65e0:	72c7      	strb	r7, [r0, #11]
    ldir->type = 0;
   d65e2:	f880 900c 	strb.w	r9, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d65e6:	f108 000d 	add.w	r0, r8, #13
   d65ea:	f7ff fe37 	bl	d625c <_ZN7FatFile11lfnChecksumEPh>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d65ee:	f00b 0b1f 	and.w	fp, fp, #31
    ldir->chksum = lfnChecksum(fname->sfn);
   d65f2:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   d65f4:	f884 901a 	strb.w	r9, [r4, #26]
   d65f8:	f884 901b 	strb.w	r9, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d65fc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   d6600:	220d      	movs	r2, #13
    lfnPutName(ldir, fname->lfn, len);
   d6602:	f8d8 c008 	ldr.w	ip, [r8, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6606:	fb02 f20b 	mul.w	r2, r2, fp
   d660a:	2300      	movs	r3, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d660c:	9904      	ldr	r1, [sp, #16]
   d660e:	4291      	cmp	r1, r2
   d6610:	f240 80e3 	bls.w	d67da <_ZN7FatFile4openEPS_P7fname_ti+0x2f6>
   d6614:	f81c 1002 	ldrb.w	r1, [ip, r2]
  if (i < LDIR_NAME1_DIM) {
   d6618:	2b04      	cmp	r3, #4
   d661a:	fa5f fe83 	uxtb.w	lr, r3
   d661e:	f103 0001 	add.w	r0, r3, #1
   d6622:	f200 80e0 	bhi.w	d67e6 <_ZN7FatFile4openEPS_P7fname_ti+0x302>
    ldir->name1[i] = c;
   d6626:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   d662a:	f8a3 1001 	strh.w	r1, [r3, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   d662e:	280d      	cmp	r0, #13
   d6630:	f102 0201 	add.w	r2, r2, #1
   d6634:	4603      	mov	r3, r0
   d6636:	d1e9      	bne.n	d660c <_ZN7FatFile4openEPS_P7fname_ti+0x128>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6638:	3e01      	subs	r6, #1
   d663a:	b2f6      	uxtb	r6, r6
   d663c:	e7b8      	b.n	d65b0 <_ZN7FatFile4openEPS_P7fname_ti+0xcc>
        fnameFound = true;
   d663e:	f04f 0a01 	mov.w	sl, #1
   d6642:	e785      	b.n	d6550 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d6644:	7802      	ldrb	r2, [r0, #0]
   d6646:	2ae5      	cmp	r2, #229	; 0xe5
   d6648:	d000      	beq.n	d664c <_ZN7FatFile4openEPS_P7fname_ti+0x168>
   d664a:	b97a      	cbnz	r2, d666c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
    curIndex = dirFile->m_curPosition/32;
   d664c:	9903      	ldr	r1, [sp, #12]
   d664e:	2c00      	cmp	r4, #0
   d6650:	bf08      	it	eq
   d6652:	4649      	moveq	r1, r9
      if (freeFound < freeNeed) {
   d6654:	42bc      	cmp	r4, r7
        freeFound++;
   d6656:	bf38      	it	cc
   d6658:	3401      	addcc	r4, #1
    curIndex = dirFile->m_curPosition/32;
   d665a:	9103      	str	r1, [sp, #12]
        freeFound++;
   d665c:	bf38      	it	cc
   d665e:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   d6660:	2a00      	cmp	r2, #0
   d6662:	d083      	beq.n	d656c <_ZN7FatFile4openEPS_P7fname_ti+0x88>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d6664:	2ae5      	cmp	r2, #229	; 0xe5
   d6666:	d104      	bne.n	d6672 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
      lfnOrd = 0;
   d6668:	2600      	movs	r6, #0
   d666a:	e771      	b.n	d6550 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   d666c:	42bc      	cmp	r4, r7
   d666e:	bf38      	it	cc
   d6670:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d6672:	2a2e      	cmp	r2, #46	; 0x2e
   d6674:	d0f8      	beq.n	d6668 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
    } else if (DIR_IS_LONG_NAME(dir)) {
   d6676:	7ac1      	ldrb	r1, [r0, #11]
   d6678:	290f      	cmp	r1, #15
   d667a:	d15d      	bne.n	d6738 <_ZN7FatFile4openEPS_P7fname_ti+0x254>
      if (!lfnOrd) {
   d667c:	bb3e      	cbnz	r6, d66ce <_ZN7FatFile4openEPS_P7fname_ti+0x1ea>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d667e:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   d6682:	f43f af65 	beq.w	d6550 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   d6686:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   d668a:	7b43      	ldrb	r3, [r0, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   d668c:	46b3      	mov	fp, r6
      size_t k = 13*(ord - 1);
   d668e:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   d6692:	f04f 0e0d 	mov.w	lr, #13
   d6696:	fb0e fe02 	mul.w	lr, lr, r2
      if (k >= len) {
   d669a:	9a04      	ldr	r2, [sp, #16]
   d669c:	4572      	cmp	r2, lr
   d669e:	d9e3      	bls.n	d6668 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d66a0:	eba2 020e 	sub.w	r2, r2, lr
   d66a4:	9207      	str	r2, [sp, #28]
   d66a6:	f04f 0c00 	mov.w	ip, #0
  if (i < LDIR_NAME1_DIM) {
   d66aa:	f1bc 0f04 	cmp.w	ip, #4
   d66ae:	eb0c 090e 	add.w	r9, ip, lr
   d66b2:	fa5f f28c 	uxtb.w	r2, ip
   d66b6:	d814      	bhi.n	d66e2 <_ZN7FatFile4openEPS_P7fname_ti+0x1fe>
    return ldir->name1[i];
   d66b8:	eb00 024c 	add.w	r2, r0, ip, lsl #1
   d66bc:	f8b2 2001 	ldrh.w	r2, [r2, #1]
        if (k == len) {
   d66c0:	9907      	ldr	r1, [sp, #28]
   d66c2:	458c      	cmp	ip, r1
   d66c4:	d11b      	bne.n	d66fe <_ZN7FatFile4openEPS_P7fname_ti+0x21a>
            lfnOrd = 0;
   d66c6:	2a00      	cmp	r2, #0
   d66c8:	bf18      	it	ne
   d66ca:	2600      	movne	r6, #0
   d66cc:	e740      	b.n	d6550 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d66ce:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   d66d2:	fa5f fb8b 	uxtb.w	fp, fp
   d66d6:	455a      	cmp	r2, fp
   d66d8:	d1c6      	bne.n	d6668 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d66da:	7b42      	ldrb	r2, [r0, #13]
   d66dc:	429a      	cmp	r2, r3
   d66de:	d0d6      	beq.n	d668e <_ZN7FatFile4openEPS_P7fname_ti+0x1aa>
   d66e0:	e7c2      	b.n	d6668 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d66e2:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d66e4:	bf95      	itete	ls
   d66e6:	f10c 32ff 	addls.w	r2, ip, #4294967295	; 0xffffffff
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d66ea:	f10c 0201 	addhi.w	r2, ip, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d66ee:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d66f2:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d66f6:	bf94      	ite	ls
   d66f8:	88d2      	ldrhls	r2, [r2, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d66fa:	8892      	ldrhhi	r2, [r2, #4]
   d66fc:	e7e0      	b.n	d66c0 <_ZN7FatFile4openEPS_P7fname_ti+0x1dc>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d66fe:	2aff      	cmp	r2, #255	; 0xff
   d6700:	d8b2      	bhi.n	d6668 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d6702:	b2d2      	uxtb	r2, r2
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6704:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d6708:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d670a:	f8d8 1008 	ldr.w	r1, [r8, #8]
   d670e:	f811 1009 	ldrb.w	r1, [r1, r9]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6712:	bf98      	it	ls
   d6714:	3220      	addls	r2, #32
   d6716:	f1a1 0941 	sub.w	r9, r1, #65	; 0x41
   d671a:	bf98      	it	ls
   d671c:	b2d2      	uxtbls	r2, r2
   d671e:	f1b9 0f19 	cmp.w	r9, #25
   d6722:	bf9c      	itt	ls
   d6724:	3120      	addls	r1, #32
   d6726:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6728:	4291      	cmp	r1, r2
   d672a:	d19d      	bne.n	d6668 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      for (uint8_t i = 0; i < 13; i++) {
   d672c:	f10c 0c01 	add.w	ip, ip, #1
   d6730:	f1bc 0f0d 	cmp.w	ip, #13
   d6734:	d1b9      	bne.n	d66aa <_ZN7FatFile4openEPS_P7fname_ti+0x1c6>
   d6736:	e70b      	b.n	d6550 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6738:	070a      	lsls	r2, r1, #28
   d673a:	d495      	bmi.n	d6668 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      if (lfnOrd) {
   d673c:	b166      	cbz	r6, d6758 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d673e:	f1bb 0f01 	cmp.w	fp, #1
   d6742:	9303      	str	r3, [sp, #12]
   d6744:	f47f aedb 	bne.w	d64fe <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   d6748:	f7ff fd88 	bl	d625c <_ZN7FatFile11lfnChecksumEPh>
   d674c:	9b03      	ldr	r3, [sp, #12]
   d674e:	4298      	cmp	r0, r3
   d6750:	f47f aed5 	bne.w	d64fe <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   d6754:	46b2      	mov	sl, r6
   d6756:	e00f      	b.n	d6778 <_ZN7FatFile4openEPS_P7fname_ti+0x294>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6758:	ee18 1a10 	vmov	r1, s16
   d675c:	220b      	movs	r2, #11
   d675e:	9307      	str	r3, [sp, #28]
   d6760:	f002 fb0c 	bl	d8d7c <memcmp>
   d6764:	9b07      	ldr	r3, [sp, #28]
   d6766:	2800      	cmp	r0, #0
   d6768:	f47f aef2 	bne.w	d6550 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d676c:	f898 a000 	ldrb.w	sl, [r8]
   d6770:	f01a 0a01 	ands.w	sl, sl, #1
   d6774:	f47f af63 	bne.w	d663e <_ZN7FatFile4openEPS_P7fname_ti+0x15a>
  if (oflag & O_EXCL) {
   d6778:	9b05      	ldr	r3, [sp, #20]
   d677a:	0519      	lsls	r1, r3, #20
   d677c:	f53f aebf 	bmi.w	d64fe <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d6780:	9b05      	ldr	r3, [sp, #20]
   d6782:	9806      	ldr	r0, [sp, #24]
   d6784:	f8cd a000 	str.w	sl, [sp]
   d6788:	464a      	mov	r2, r9
   d678a:	4629      	mov	r1, r5
   d678c:	f7ff fba9 	bl	d5ee2 <_ZN7FatFile15openCachedEntryEPS_tih>
   d6790:	e6b6      	b.n	d6500 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   d6792:	2100      	movs	r1, #0
   d6794:	4628      	mov	r0, r5
   d6796:	f7ff fb42 	bl	d5e1e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d679a:	b998      	cbnz	r0, d67c4 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
      if (dirFile->getError()) {
   d679c:	786b      	ldrb	r3, [r5, #1]
   d679e:	2b00      	cmp	r3, #0
   d67a0:	f47f aead 	bne.w	d64fe <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   d67a4:	4628      	mov	r0, r5
   d67a6:	f7ff fa13 	bl	d5bd0 <_ZN7FatFile13addDirClusterEv>
   d67aa:	2800      	cmp	r0, #0
   d67ac:	f43f aea7 	beq.w	d64fe <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d67b0:	68ab      	ldr	r3, [r5, #8]
   d67b2:	791b      	ldrb	r3, [r3, #4]
   d67b4:	2b01      	cmp	r3, #1
   d67b6:	f63f aee9 	bhi.w	d658c <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound += 16;
   d67ba:	3410      	adds	r4, #16
   d67bc:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   d67be:	42a7      	cmp	r7, r4
   d67c0:	d8f0      	bhi.n	d67a4 <_ZN7FatFile4openEPS_P7fname_ti+0x2c0>
   d67c2:	e6e3      	b.n	d658c <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   d67c4:	3401      	adds	r4, #1
   d67c6:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   d67c8:	e6dd      	b.n	d6586 <_ZN7FatFile4openEPS_P7fname_ti+0xa2>
    if (!dirFile->lfnUniqueSfn(fname)) {
   d67ca:	4641      	mov	r1, r8
   d67cc:	4628      	mov	r0, r5
   d67ce:	f7ff fe35 	bl	d643c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d67d2:	2800      	cmp	r0, #0
   d67d4:	f47f aede 	bne.w	d6594 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   d67d8:	e691      	b.n	d64fe <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d67da:	bf14      	ite	ne
   d67dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d67e0:	2100      	moveq	r1, #0
   d67e2:	b289      	uxth	r1, r1
   d67e4:	e718      	b.n	d6618 <_ZN7FatFile4openEPS_P7fname_ti+0x134>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d67e6:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d67ea:	bf94      	ite	ls
   d67ec:	eb04 0343 	addls.w	r3, r4, r3, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d67f0:	eb04 0340 	addhi.w	r3, r4, r0, lsl #1
   d67f4:	8099      	strh	r1, [r3, #4]
   d67f6:	e71a      	b.n	d662e <_ZN7FatFile4openEPS_P7fname_ti+0x14a>
  dir = dirFile->readDirCache();
   d67f8:	4631      	mov	r1, r6
   d67fa:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   d67fc:	696f      	ldr	r7, [r5, #20]
  dir = dirFile->readDirCache();
   d67fe:	f7ff fb0e 	bl	d5e1e <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d6802:	4604      	mov	r4, r0
   d6804:	2800      	cmp	r0, #0
   d6806:	f43f ae7a 	beq.w	d64fe <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   d680a:	2220      	movs	r2, #32
   d680c:	4631      	mov	r1, r6
   d680e:	f002 fad1 	bl	d8db4 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d6812:	4643      	mov	r3, r8
   d6814:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d6818:	6022      	str	r2, [r4, #0]
   d681a:	685a      	ldr	r2, [r3, #4]
   d681c:	6062      	str	r2, [r4, #4]
   d681e:	891a      	ldrh	r2, [r3, #8]
   d6820:	8122      	strh	r2, [r4, #8]
   d6822:	7a9b      	ldrb	r3, [r3, #10]
   d6824:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d6826:	f898 3000 	ldrb.w	r3, [r8]
   d682a:	f003 0318 	and.w	r3, r3, #24
   d682e:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   d6830:	4b0f      	ldr	r3, [pc, #60]	; (d6870 <_ZN7FatFile4openEPS_P7fname_ti+0x38c>)
   d6832:	681b      	ldr	r3, [r3, #0]
   d6834:	b19b      	cbz	r3, d685e <_ZN7FatFile4openEPS_P7fname_ti+0x37a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d6836:	f104 010e 	add.w	r1, r4, #14
   d683a:	f104 0010 	add.w	r0, r4, #16
   d683e:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   d6840:	8a23      	ldrh	r3, [r4, #16]
   d6842:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   d6844:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   d6846:	89e3      	ldrh	r3, [r4, #14]
   d6848:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   d684a:	68aa      	ldr	r2, [r5, #8]
   d684c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d6850:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   d6854:	f3c7 194f 	ubfx	r9, r7, #5, #16
   d6858:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   d685c:	e790      	b.n	d6780 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
    dir->creationDate = FAT_DEFAULT_DATE;
   d685e:	2321      	movs	r3, #33	; 0x21
   d6860:	7423      	strb	r3, [r4, #16]
   d6862:	2328      	movs	r3, #40	; 0x28
   d6864:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d6866:	2308      	movs	r3, #8
   d6868:	73a6      	strb	r6, [r4, #14]
   d686a:	73e3      	strb	r3, [r4, #15]
   d686c:	e7e8      	b.n	d6840 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
   d686e:	bf00      	nop
   d6870:	2003e5a4 	.word	0x2003e5a4

000d6874 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d6874:	b513      	push	{r0, r1, r4, lr}
   d6876:	4604      	mov	r4, r0
    }
   d6878:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d687a:	b159      	cbz	r1, d6894 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d687c:	9101      	str	r1, [sp, #4]
   d687e:	f002 fac5 	bl	d8e0c <strlen>
   d6882:	6823      	ldr	r3, [r4, #0]
   d6884:	9901      	ldr	r1, [sp, #4]
   d6886:	68db      	ldr	r3, [r3, #12]
   d6888:	4602      	mov	r2, r0
   d688a:	4620      	mov	r0, r4
    }
   d688c:	b002      	add	sp, #8
   d688e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d6892:	4718      	bx	r3
    }
   d6894:	b002      	add	sp, #8
   d6896:	bd10      	pop	{r4, pc}

000d6898 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d6898:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d689a:	7803      	ldrb	r3, [r0, #0]
   d689c:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   d689e:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d68a0:	d520      	bpl.n	d68e4 <_ZN8FatCache4syncEv+0x4c>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d68a2:	6843      	ldr	r3, [r0, #4]
    return m_blockDev->writeBlock(block, src);
   d68a4:	6881      	ldr	r1, [r0, #8]
   d68a6:	f100 020c 	add.w	r2, r0, #12
   d68aa:	6818      	ldr	r0, [r3, #0]
   d68ac:	9201      	str	r2, [sp, #4]
   d68ae:	f000 fb84 	bl	d6fba <_ZN9SdSpiCard10writeBlockEmPKh>
   d68b2:	9a01      	ldr	r2, [sp, #4]
   d68b4:	4605      	mov	r5, r0
   d68b6:	b918      	cbnz	r0, d68c0 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d68b8:	2500      	movs	r5, #0
}
   d68ba:	4628      	mov	r0, r5
   d68bc:	b003      	add	sp, #12
   d68be:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d68c0:	7823      	ldrb	r3, [r4, #0]
   d68c2:	079b      	lsls	r3, r3, #30
   d68c4:	d404      	bmi.n	d68d0 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   d68c6:	7823      	ldrb	r3, [r4, #0]
   d68c8:	f023 0301 	bic.w	r3, r3, #1
   d68cc:	7023      	strb	r3, [r4, #0]
   d68ce:	e7f4      	b.n	d68ba <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d68d0:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   d68d4:	6919      	ldr	r1, [r3, #16]
   d68d6:	4401      	add	r1, r0
   d68d8:	6818      	ldr	r0, [r3, #0]
   d68da:	f000 fb6e 	bl	d6fba <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d68de:	2800      	cmp	r0, #0
   d68e0:	d1f1      	bne.n	d68c6 <_ZN8FatCache4syncEv+0x2e>
   d68e2:	e7e9      	b.n	d68b8 <_ZN8FatCache4syncEv+0x20>
  return true;
   d68e4:	2501      	movs	r5, #1
   d68e6:	e7e8      	b.n	d68ba <_ZN8FatCache4syncEv+0x22>

000d68e8 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d68e8:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d68ea:	6883      	ldr	r3, [r0, #8]
   d68ec:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d68ee:	4604      	mov	r4, r0
   d68f0:	460e      	mov	r6, r1
   d68f2:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d68f4:	d009      	beq.n	d690a <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   d68f6:	f7ff ffcf 	bl	d6898 <_ZN8FatCache4syncEv>
   d68fa:	b908      	cbnz	r0, d6900 <_ZN8FatCache4readEmh+0x18>
  return 0;
   d68fc:	2000      	movs	r0, #0
}
   d68fe:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   d6900:	076b      	lsls	r3, r5, #29
   d6902:	d50a      	bpl.n	d691a <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   d6904:	2300      	movs	r3, #0
   d6906:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d6908:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   d690a:	7822      	ldrb	r2, [r4, #0]
   d690c:	f005 0503 	and.w	r5, r5, #3
   d6910:	4620      	mov	r0, r4
   d6912:	4315      	orrs	r5, r2
   d6914:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   d6918:	e7f1      	b.n	d68fe <_ZN8FatCache4readEmh+0x16>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d691a:	6863      	ldr	r3, [r4, #4]
    return m_blockDev->readBlock(block, dst);
   d691c:	f104 020c 	add.w	r2, r4, #12
   d6920:	6818      	ldr	r0, [r3, #0]
   d6922:	4631      	mov	r1, r6
   d6924:	f000 fac0 	bl	d6ea8 <_ZN9SdSpiCard9readBlockEmPh>
   d6928:	2800      	cmp	r0, #0
   d692a:	d1eb      	bne.n	d6904 <_ZN8FatCache4readEmh+0x1c>
   d692c:	e7e6      	b.n	d68fc <_ZN8FatCache4readEmh+0x14>

000d692e <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d692e:	7983      	ldrb	r3, [r0, #6]
   d6930:	6940      	ldr	r0, [r0, #20]
   d6932:	3902      	subs	r1, #2
   d6934:	4099      	lsls	r1, r3
}
   d6936:	4408      	add	r0, r1
   d6938:	4770      	bx	lr

000d693a <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d693a:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d693c:	b570      	push	{r4, r5, r6, lr}
   d693e:	4605      	mov	r5, r0
   d6940:	460c      	mov	r4, r1
   d6942:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d6944:	d802      	bhi.n	d694c <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d6946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d694a:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d694c:	69c3      	ldr	r3, [r0, #28]
   d694e:	428b      	cmp	r3, r1
   d6950:	d3f9      	bcc.n	d6946 <_ZN9FatVolume6fatGetEmPm+0xc>
  if (fatType() == 32) {
   d6952:	79c3      	ldrb	r3, [r0, #7]
   d6954:	2b20      	cmp	r3, #32
   d6956:	d116      	bne.n	d6986 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   d6958:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   d695a:	2202      	movs	r2, #2
   d695c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d6960:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6964:	f7ff ffc0 	bl	d68e8 <_ZN8FatCache4readEmh>
    if (!pc) {
   d6968:	2800      	cmp	r0, #0
   d696a:	d0ec      	beq.n	d6946 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d696c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d6970:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d6974:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   d6978:	69ea      	ldr	r2, [r5, #28]
   d697a:	429a      	cmp	r2, r3
  *value = next;
   d697c:	bf26      	itte	cs
   d697e:	6033      	strcs	r3, [r6, #0]
  return 1;
   d6980:	2001      	movcs	r0, #1
    return 0;
   d6982:	2000      	movcc	r0, #0
   d6984:	e7e1      	b.n	d694a <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   d6986:	2b10      	cmp	r3, #16
   d6988:	d1dd      	bne.n	d6946 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d698a:	6983      	ldr	r3, [r0, #24]
   d698c:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d6990:	2202      	movs	r2, #2
   d6992:	4419      	add	r1, r3
   d6994:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6998:	f7ff ffa6 	bl	d68e8 <_ZN8FatCache4readEmh>
    if (!pc) {
   d699c:	2800      	cmp	r0, #0
   d699e:	d0d2      	beq.n	d6946 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   d69a0:	b2e4      	uxtb	r4, r4
   d69a2:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   d69a6:	e7e7      	b.n	d6978 <_ZN9FatVolume6fatGetEmPm+0x3e>

000d69a8 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d69a8:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d69aa:	b538      	push	{r3, r4, r5, lr}
   d69ac:	460c      	mov	r4, r1
   d69ae:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d69b0:	d801      	bhi.n	d69b6 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d69b2:	2000      	movs	r0, #0
}
   d69b4:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d69b6:	69c3      	ldr	r3, [r0, #28]
   d69b8:	428b      	cmp	r3, r1
   d69ba:	d3fa      	bcc.n	d69b2 <_ZN9FatVolume6fatPutEmm+0xa>
  if (fatType() == 32) {
   d69bc:	79c3      	ldrb	r3, [r0, #7]
   d69be:	2b20      	cmp	r3, #32
   d69c0:	d10f      	bne.n	d69e2 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   d69c2:	6981      	ldr	r1, [r0, #24]
   d69c4:	2203      	movs	r2, #3
   d69c6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d69ca:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d69ce:	f7ff ff8b 	bl	d68e8 <_ZN8FatCache4readEmh>
    if (!pc) {
   d69d2:	2800      	cmp	r0, #0
   d69d4:	d0ed      	beq.n	d69b2 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   d69d6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d69da:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   d69de:	2001      	movs	r0, #1
   d69e0:	e7e8      	b.n	d69b4 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   d69e2:	2b10      	cmp	r3, #16
   d69e4:	d1e5      	bne.n	d69b2 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d69e6:	6983      	ldr	r3, [r0, #24]
   d69e8:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d69ec:	2203      	movs	r2, #3
   d69ee:	4419      	add	r1, r3
   d69f0:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d69f4:	f7ff ff78 	bl	d68e8 <_ZN8FatCache4readEmh>
    if (!pc) {
   d69f8:	2800      	cmp	r0, #0
   d69fa:	d0da      	beq.n	d69b2 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   d69fc:	b2e4      	uxtb	r4, r4
   d69fe:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   d6a02:	e7ec      	b.n	d69de <_ZN9FatVolume6fatPutEmm+0x36>

000d6a04 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d6a04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   d6a08:	68c4      	ldr	r4, [r0, #12]
   d6a0a:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d6a0c:	4605      	mov	r5, r0
   d6a0e:	460e      	mov	r6, r1
   d6a10:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   d6a12:	d301      	bcc.n	d6a18 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   d6a14:	2701      	movs	r7, #1
   d6a16:	e001      	b.n	d6a1c <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d6a18:	460c      	mov	r4, r1
    setStart = false;
   d6a1a:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   d6a1c:	69eb      	ldr	r3, [r5, #28]
    find++;
   d6a1e:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d6a20:	42a3      	cmp	r3, r4
   d6a22:	d202      	bcs.n	d6a2a <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   d6a24:	b9c7      	cbnz	r7, d6a58 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   d6a26:	68ec      	ldr	r4, [r5, #12]
   d6a28:	e7f4      	b.n	d6a14 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   d6a2a:	42a6      	cmp	r6, r4
   d6a2c:	d014      	beq.n	d6a58 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   d6a2e:	aa01      	add	r2, sp, #4
   d6a30:	4621      	mov	r1, r4
   d6a32:	4628      	mov	r0, r5
   d6a34:	f7ff ff81 	bl	d693a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d6a38:	2800      	cmp	r0, #0
   d6a3a:	db0d      	blt.n	d6a58 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   d6a3c:	d0ee      	beq.n	d6a1c <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d6a3e:	9b01      	ldr	r3, [sp, #4]
   d6a40:	2b00      	cmp	r3, #0
   d6a42:	d1eb      	bne.n	d6a1c <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   d6a44:	b107      	cbz	r7, d6a48 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   d6a46:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d6a48:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d6a4c:	4621      	mov	r1, r4
   d6a4e:	4628      	mov	r0, r5
   d6a50:	f7ff ffaa 	bl	d69a8 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   d6a54:	4607      	mov	r7, r0
   d6a56:	b920      	cbnz	r0, d6a62 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   d6a58:	2700      	movs	r7, #0
}
   d6a5a:	4638      	mov	r0, r7
   d6a5c:	b002      	add	sp, #8
   d6a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   d6a62:	b916      	cbnz	r6, d6a6a <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   d6a64:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d6a68:	e7f7      	b.n	d6a5a <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   d6a6a:	4622      	mov	r2, r4
   d6a6c:	4631      	mov	r1, r6
   d6a6e:	4628      	mov	r0, r5
   d6a70:	f7ff ff9a 	bl	d69a8 <_ZN9FatVolume6fatPutEmm>
   d6a74:	2800      	cmp	r0, #0
   d6a76:	d1f5      	bne.n	d6a64 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   d6a78:	e7ee      	b.n	d6a58 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000d6a7a <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d6a7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6a7c:	4605      	mov	r5, r0
   d6a7e:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d6a80:	aa01      	add	r2, sp, #4
   d6a82:	4621      	mov	r1, r4
   d6a84:	4628      	mov	r0, r5
   d6a86:	f7ff ff58 	bl	d693a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d6a8a:	1e06      	subs	r6, r0, #0
   d6a8c:	db10      	blt.n	d6ab0 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d6a8e:	2200      	movs	r2, #0
   d6a90:	4621      	mov	r1, r4
   d6a92:	4628      	mov	r0, r5
   d6a94:	f7ff ff88 	bl	d69a8 <_ZN9FatVolume6fatPutEmm>
   d6a98:	b150      	cbz	r0, d6ab0 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d6a9a:	68eb      	ldr	r3, [r5, #12]
   d6a9c:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   d6a9e:	bf24      	itt	cs
   d6aa0:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   d6aa4:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   d6aa6:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   d6aa8:	2e00      	cmp	r6, #0
   d6aaa:	d1e9      	bne.n	d6a80 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d6aac:	b002      	add	sp, #8
   d6aae:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d6ab0:	2000      	movs	r0, #0
   d6ab2:	e7fb      	b.n	d6aac <_ZN9FatVolume9freeChainEm+0x32>

000d6ab4 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d6ab4:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   d6ab6:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   d6ab8:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d6aba:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   d6abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   d6ac0:	4604      	mov	r4, r0
  m_fatType = 0;
   d6ac2:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   d6ac4:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   d6ac8:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   d6aca:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6ace:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   d6ad0:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   d6ad4:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d6ad8:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d6adc:	460d      	mov	r5, r1
   d6ade:	b1b9      	cbz	r1, d6b10 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   d6ae0:	2904      	cmp	r1, #4
   d6ae2:	d901      	bls.n	d6ae8 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d6ae4:	2000      	movs	r0, #0
}
   d6ae6:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   d6ae8:	4611      	mov	r1, r2
   d6aea:	4630      	mov	r0, r6
   d6aec:	f7ff fefc 	bl	d68e8 <_ZN8FatCache4readEmh>
    if (!pc) {
   d6af0:	2800      	cmp	r0, #0
   d6af2:	d0f7      	beq.n	d6ae4 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d6af4:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d6af8:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d6afc:	065b      	lsls	r3, r3, #25
   d6afe:	d1f1      	bne.n	d6ae4 <_ZN9FatVolume4initEh+0x30>
   d6b00:	f105 011b 	add.w	r1, r5, #27
   d6b04:	eb00 1101 	add.w	r1, r0, r1, lsl #4
   d6b08:	f8d1 5006 	ldr.w	r5, [r1, #6]
   d6b0c:	2d00      	cmp	r5, #0
   d6b0e:	d0e9      	beq.n	d6ae4 <_ZN9FatVolume4initEh+0x30>
   d6b10:	2200      	movs	r2, #0
   d6b12:	4629      	mov	r1, r5
   d6b14:	4630      	mov	r0, r6
   d6b16:	f7ff fee7 	bl	d68e8 <_ZN8FatCache4readEmh>
  if (!pc) {
   d6b1a:	2800      	cmp	r0, #0
   d6b1c:	d0e2      	beq.n	d6ae4 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   d6b1e:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d6b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d6b26:	d1dd      	bne.n	d6ae4 <_ZN9FatVolume4initEh+0x30>
   d6b28:	7c03      	ldrb	r3, [r0, #16]
   d6b2a:	2b02      	cmp	r3, #2
   d6b2c:	d1da      	bne.n	d6ae4 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   d6b2e:	89c3      	ldrh	r3, [r0, #14]
   d6b30:	2b00      	cmp	r3, #0
   d6b32:	d0d7      	beq.n	d6ae4 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d6b34:	7b41      	ldrb	r1, [r0, #13]
   d6b36:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d6b38:	1e4b      	subs	r3, r1, #1
   d6b3a:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   d6b3c:	2300      	movs	r3, #0
   d6b3e:	71a3      	strb	r3, [r4, #6]
   d6b40:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d6b42:	2301      	movs	r3, #1
   d6b44:	4299      	cmp	r1, r3
   d6b46:	d007      	beq.n	d6b58 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   d6b48:	3e01      	subs	r6, #1
   d6b4a:	d0cb      	beq.n	d6ae4 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d6b4c:	79a2      	ldrb	r2, [r4, #6]
   d6b4e:	005b      	lsls	r3, r3, #1
   d6b50:	3201      	adds	r2, #1
   d6b52:	b2db      	uxtb	r3, r3
   d6b54:	71a2      	strb	r2, [r4, #6]
   d6b56:	e7f5      	b.n	d6b44 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d6b58:	8ac1      	ldrh	r1, [r0, #22]
   d6b5a:	b901      	cbnz	r1, d6b5e <_ZN9FatVolume4initEh+0xaa>
   d6b5c:	6a41      	ldr	r1, [r0, #36]	; 0x24
   d6b5e:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d6b60:	89c3      	ldrh	r3, [r0, #14]
   d6b62:	442b      	add	r3, r5
   d6b64:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d6b66:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d6b6a:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d6b6c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d6b70:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d6b72:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   d6b76:	0149      	lsls	r1, r1, #5
   d6b78:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   d6b7c:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   d6b80:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   d6b82:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   d6b86:	b902      	cbnz	r2, d6b8a <_ZN9FatVolume4initEh+0xd6>
   d6b88:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d6b8a:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   d6b8c:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d6b8e:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   d6b90:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   d6b92:	1c4b      	adds	r3, r1, #1
   d6b94:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   d6b96:	f640 73f4 	movw	r3, #4084	; 0xff4
   d6b9a:	4299      	cmp	r1, r3
   d6b9c:	d802      	bhi.n	d6ba4 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   d6b9e:	230c      	movs	r3, #12
   d6ba0:	71e3      	strb	r3, [r4, #7]
   d6ba2:	e79f      	b.n	d6ae4 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   d6ba4:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d6ba8:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   d6baa:	bf85      	ittet	hi
   d6bac:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d6bae:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   d6bb0:	2310      	movls	r3, #16
    m_fatType = 32;
   d6bb2:	2320      	movhi	r3, #32
   d6bb4:	71e3      	strb	r3, [r4, #7]
  return true;
   d6bb6:	2001      	movs	r0, #1
   d6bb8:	e795      	b.n	d6ae6 <_ZN9FatVolume4initEh+0x32>
	...

000d6bbc <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6bbc:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6bbe:	4e0e      	ldr	r6, [pc, #56]	; (d6bf8 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6bc0:	460d      	mov	r5, r1
   d6bc2:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d6bc4:	f000 faf2 	bl	d71ac <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6bc8:	6833      	ldr	r3, [r6, #0]
   d6bca:	1ac0      	subs	r0, r0, r3
   d6bcc:	4b0b      	ldr	r3, [pc, #44]	; (d6bfc <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d6bce:	4298      	cmp	r0, r3
   d6bd0:	d908      	bls.n	d6be4 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6bd2:	f000 faf3 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6bd6:	4b0a      	ldr	r3, [pc, #40]	; (d6c00 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d6bd8:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   d6bda:	f000 fc7b 	bl	d74d4 <spark_process>
   d6bde:	f000 fae5 	bl	d71ac <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d6be2:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6be4:	f000 faea 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d6be8:	b280      	uxth	r0, r0
   d6bea:	1b40      	subs	r0, r0, r5
}
   d6bec:	42a0      	cmp	r0, r4
   d6bee:	bfd4      	ite	le
   d6bf0:	2000      	movle	r0, #0
   d6bf2:	2001      	movgt	r0, #1
   d6bf4:	bd70      	pop	{r4, r5, r6, pc}
   d6bf6:	bf00      	nop
   d6bf8:	2003e5ac 	.word	0x2003e5ac
   d6bfc:	000186a0 	.word	0x000186a0
   d6c00:	2003e738 	.word	0x2003e738

000d6c04 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d6c04:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d6c06:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   d6c08:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d6c0a:	b94d      	cbnz	r5, d6c20 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d6c0c:	6840      	ldr	r0, [r0, #4]
   d6c0e:	f000 fa6b 	bl	d70e8 <_ZN14SdSpiAltDriver8activateEv>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
  }
  void spiSelect() {
    m_spiDriver->select();
   d6c12:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d6c14:	4629      	mov	r1, r5
   d6c16:	7d18      	ldrb	r0, [r3, #20]
   d6c18:	f001 fb4b 	bl	d82b2 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d6c1c:	2301      	movs	r3, #1
   d6c1e:	7223      	strb	r3, [r4, #8]
  }
}
   d6c20:	bd38      	pop	{r3, r4, r5, pc}

000d6c22 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d6c22:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d6c24:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   d6c26:	4604      	mov	r4, r0
  if (m_spiActive) {
   d6c28:	b16b      	cbz	r3, d6c46 <_ZN9SdSpiCard7spiStopEv+0x24>
  }
  void spiUnselect() {
    m_spiDriver->unselect();
   d6c2a:	6843      	ldr	r3, [r0, #4]
    digitalWrite(m_csPin, HIGH);
   d6c2c:	2101      	movs	r1, #1
   d6c2e:	7d18      	ldrb	r0, [r3, #20]
   d6c30:	f001 fb3f 	bl	d82b2 <digitalWrite>
     m_spiDriver->send(data);
   d6c34:	6860      	ldr	r0, [r4, #4]
   d6c36:	21ff      	movs	r1, #255	; 0xff
   d6c38:	f000 fa88 	bl	d714c <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->deactivate();
   d6c3c:	6860      	ldr	r0, [r4, #4]
   d6c3e:	f000 fa67 	bl	d7110 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d6c42:	2300      	movs	r3, #0
   d6c44:	7223      	strb	r3, [r4, #8]
  }
}
   d6c46:	bd10      	pop	{r4, pc}

000d6c48 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d6c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c4a:	4604      	mov	r4, r0
   d6c4c:	460d      	mov	r5, r1
   d6c4e:	4616      	mov	r6, r2
   d6c50:	f000 fab4 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d6c54:	b287      	uxth	r7, r0
    return m_spiDriver->receive();
   d6c56:	6860      	ldr	r0, [r4, #4]
   d6c58:	f000 fa5d 	bl	d7116 <_ZN14SdSpiAltDriver7receiveEv>
  while ((m_status = spiReceive()) == 0XFF) {
   d6c5c:	28ff      	cmp	r0, #255	; 0xff
   d6c5e:	7260      	strb	r0, [r4, #9]
   d6c60:	d10e      	bne.n	d6c80 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d6c62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6c66:	4639      	mov	r1, r7
   d6c68:	4620      	mov	r0, r4
   d6c6a:	f7ff ffa7 	bl	d6bbc <_ZN9SdSpiCard10isTimedOutEtt>
   d6c6e:	2800      	cmp	r0, #0
   d6c70:	d0f1      	beq.n	d6c56 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   d6c72:	2355      	movs	r3, #85	; 0x55
  spiStop();
   d6c74:	4620      	mov	r0, r4
   d6c76:	7023      	strb	r3, [r4, #0]
   d6c78:	f7ff ffd3 	bl	d6c22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6c7c:	2000      	movs	r0, #0
}
   d6c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   d6c80:	28fe      	cmp	r0, #254	; 0xfe
   d6c82:	d001      	beq.n	d6c88 <_ZN9SdSpiCard8readDataEPhj+0x40>
   d6c84:	2350      	movs	r3, #80	; 0x50
   d6c86:	e7f5      	b.n	d6c74 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   d6c88:	6860      	ldr	r0, [r4, #4]
   d6c8a:	4632      	mov	r2, r6
   d6c8c:	4629      	mov	r1, r5
   d6c8e:	f000 fa47 	bl	d7120 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   d6c92:	7260      	strb	r0, [r4, #9]
   d6c94:	b108      	cbz	r0, d6c9a <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   d6c96:	2360      	movs	r3, #96	; 0x60
   d6c98:	e7ec      	b.n	d6c74 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return m_spiDriver->receive();
   d6c9a:	6860      	ldr	r0, [r4, #4]
   d6c9c:	f000 fa3b 	bl	d7116 <_ZN14SdSpiAltDriver7receiveEv>
   d6ca0:	6860      	ldr	r0, [r4, #4]
   d6ca2:	f000 fa38 	bl	d7116 <_ZN14SdSpiAltDriver7receiveEv>
   d6ca6:	2001      	movs	r0, #1
   d6ca8:	e7e9      	b.n	d6c7e <_ZN9SdSpiCard8readDataEPhj+0x36>

000d6caa <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d6caa:	b570      	push	{r4, r5, r6, lr}
   d6cac:	4604      	mov	r4, r0
   d6cae:	460e      	mov	r6, r1
   d6cb0:	f000 fa84 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
   d6cb4:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d6cb6:	4632      	mov	r2, r6
   d6cb8:	4629      	mov	r1, r5
   d6cba:	4620      	mov	r0, r4
   d6cbc:	f7ff ff7e 	bl	d6bbc <_ZN9SdSpiCard10isTimedOutEtt>
   d6cc0:	b930      	cbnz	r0, d6cd0 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d6cc2:	6860      	ldr	r0, [r4, #4]
   d6cc4:	f000 fa27 	bl	d7116 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d6cc8:	28ff      	cmp	r0, #255	; 0xff
   d6cca:	d1f4      	bne.n	d6cb6 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d6ccc:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d6cce:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d6cd0:	2000      	movs	r0, #0
   d6cd2:	e7fc      	b.n	d6cce <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000d6cd4 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   d6cd6:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6cd8:	9201      	str	r2, [sp, #4]
   d6cda:	4604      	mov	r4, r0
   d6cdc:	460d      	mov	r5, r1
  if (!m_spiActive) {
   d6cde:	b90b      	cbnz	r3, d6ce4 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d6ce0:	f7ff ff90 	bl	d6c04 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   d6ce4:	b125      	cbz	r5, d6cf0 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   d6ce6:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d6cea:	4620      	mov	r0, r4
   d6cec:	f7ff ffdd 	bl	d6caa <_ZN9SdSpiCard11waitNotBusyEt>
     m_spiDriver->send(data);
   d6cf0:	6860      	ldr	r0, [r4, #4]
   d6cf2:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d6cf6:	f000 fa29 	bl	d714c <_ZN14SdSpiAltDriver4sendEh>
   d6cfa:	2603      	movs	r6, #3
    spiSend(pa[i]);
   d6cfc:	af01      	add	r7, sp, #4
   d6cfe:	5db9      	ldrb	r1, [r7, r6]
   d6d00:	6860      	ldr	r0, [r4, #4]
   d6d02:	f000 fa23 	bl	d714c <_ZN14SdSpiAltDriver4sendEh>
  for (int8_t i = 3; i >= 0; i--) {
   d6d06:	3e01      	subs	r6, #1
   d6d08:	d2f9      	bcs.n	d6cfe <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d6d0a:	2d00      	cmp	r5, #0
   d6d0c:	6860      	ldr	r0, [r4, #4]
   d6d0e:	bf0c      	ite	eq
   d6d10:	2195      	moveq	r1, #149	; 0x95
   d6d12:	2187      	movne	r1, #135	; 0x87
   d6d14:	f000 fa1a 	bl	d714c <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d6d18:	6860      	ldr	r0, [r4, #4]
   d6d1a:	f000 f9fc 	bl	d7116 <_ZN14SdSpiAltDriver7receiveEv>
   d6d1e:	250b      	movs	r5, #11
   d6d20:	6860      	ldr	r0, [r4, #4]
   d6d22:	f000 f9f8 	bl	d7116 <_ZN14SdSpiAltDriver7receiveEv>
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d6d26:	0603      	lsls	r3, r0, #24
   d6d28:	7260      	strb	r0, [r4, #9]
   d6d2a:	d503      	bpl.n	d6d34 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   d6d2c:	3d01      	subs	r5, #1
   d6d2e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6d32:	d1f5      	bne.n	d6d20 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   d6d34:	b003      	add	sp, #12
   d6d36:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6d38 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d6d38:	b570      	push	{r4, r5, r6, lr}
   d6d3a:	4604      	mov	r4, r0
   d6d3c:	460d      	mov	r5, r1
   d6d3e:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d6d40:	2137      	movs	r1, #55	; 0x37
   d6d42:	2200      	movs	r2, #0
   d6d44:	f7ff ffc6 	bl	d6cd4 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d6d48:	4632      	mov	r2, r6
   d6d4a:	4629      	mov	r1, r5
   d6d4c:	4620      	mov	r0, r4
  }
   d6d4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   d6d52:	f7ff bfbf 	b.w	d6cd4 <_ZN9SdSpiCard11cardCommandEhm>
	...

000d6d58 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d6d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d6d5c:	2500      	movs	r5, #0
   d6d5e:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d6d60:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d6d62:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d6d64:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d6d66:	4604      	mov	r4, r0
   d6d68:	4690      	mov	r8, r2
   d6d6a:	461e      	mov	r6, r3
   d6d6c:	f000 fa26 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   d6d70:	4641      	mov	r1, r8
   d6d72:	4607      	mov	r7, r0
   d6d74:	6860      	ldr	r0, [r4, #4]
   d6d76:	f000 f9bb 	bl	d70f0 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d6d7a:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   d6d7c:	4a49      	ldr	r2, [pc, #292]	; (d6ea4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   d6d7e:	721d      	strb	r5, [r3, #8]
   d6d80:	2501      	movs	r5, #1
   d6d82:	60da      	str	r2, [r3, #12]
   d6d84:	821d      	strh	r5, [r3, #16]
  spiStart();
   d6d86:	4620      	mov	r0, r4
   d6d88:	f7ff ff3c 	bl	d6c04 <_ZN9SdSpiCard8spiStartEv>
    m_spiDriver->unselect();
   d6d8c:	6863      	ldr	r3, [r4, #4]
   d6d8e:	4629      	mov	r1, r5
   d6d90:	7d18      	ldrb	r0, [r3, #20]
   d6d92:	f001 fa8e 	bl	d82b2 <digitalWrite>
   d6d96:	250a      	movs	r5, #10
     m_spiDriver->send(data);
   d6d98:	6860      	ldr	r0, [r4, #4]
   d6d9a:	21ff      	movs	r1, #255	; 0xff
   d6d9c:	3d01      	subs	r5, #1
   d6d9e:	f000 f9d5 	bl	d714c <_ZN14SdSpiAltDriver4sendEh>
  for (uint8_t i = 0; i < 10; i++) {
   d6da2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6da6:	d1f7      	bne.n	d6d98 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
    m_spiDriver->select();
   d6da8:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d6daa:	4629      	mov	r1, r5
   d6dac:	7d18      	ldrb	r0, [r3, #20]
   d6dae:	f001 fa80 	bl	d82b2 <digitalWrite>
  }
   d6db2:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d6db4:	2200      	movs	r2, #0
   d6db6:	4611      	mov	r1, r2
   d6db8:	4620      	mov	r0, r4
   d6dba:	f7ff ff8b 	bl	d6cd4 <_ZN9SdSpiCard11cardCommandEhm>
   d6dbe:	2801      	cmp	r0, #1
   d6dc0:	4680      	mov	r8, r0
   d6dc2:	d018      	beq.n	d6df6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   d6dc4:	3d01      	subs	r5, #1
   d6dc6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6dca:	d107      	bne.n	d6ddc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   d6dcc:	2320      	movs	r3, #32
  spiStop();
   d6dce:	4620      	mov	r0, r4
   d6dd0:	7023      	strb	r3, [r4, #0]
   d6dd2:	f7ff ff26 	bl	d6c22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6dd6:	2000      	movs	r0, #0
}
   d6dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     m_spiDriver->send(data);
   d6ddc:	6860      	ldr	r0, [r4, #4]
   d6dde:	21fd      	movs	r1, #253	; 0xfd
   d6de0:	f000 f9b4 	bl	d714c <_ZN14SdSpiAltDriver4sendEh>
   d6de4:	f44f 7802 	mov.w	r8, #520	; 0x208
    return m_spiDriver->receive();
   d6de8:	6860      	ldr	r0, [r4, #4]
   d6dea:	f000 f994 	bl	d7116 <_ZN14SdSpiAltDriver7receiveEv>
    for (int i = 0; i < 520; i++) {
   d6dee:	f1b8 0801 	subs.w	r8, r8, #1
   d6df2:	d1f9      	bne.n	d6de8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   d6df4:	e7de      	b.n	d6db4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d6df6:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d6dfa:	2108      	movs	r1, #8
   d6dfc:	4620      	mov	r0, r4
   d6dfe:	f7ff ff69 	bl	d6cd4 <_ZN9SdSpiCard11cardCommandEhm>
   d6e02:	2805      	cmp	r0, #5
   d6e04:	d114      	bne.n	d6e30 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   d6e06:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d6e0a:	2500      	movs	r5, #0
   d6e0c:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d6e0e:	462a      	mov	r2, r5
   d6e10:	2129      	movs	r1, #41	; 0x29
   d6e12:	4620      	mov	r0, r4
   d6e14:	f7ff ff90 	bl	d6d38 <_ZN9SdSpiCard8cardAcmdEhm>
   d6e18:	4602      	mov	r2, r0
   d6e1a:	b1d8      	cbz	r0, d6e54 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d6e1c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d6e20:	4639      	mov	r1, r7
   d6e22:	4620      	mov	r0, r4
   d6e24:	f7ff feca 	bl	d6bbc <_ZN9SdSpiCard10isTimedOutEtt>
   d6e28:	2800      	cmp	r0, #0
   d6e2a:	d0f0      	beq.n	d6e0e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   d6e2c:	2343      	movs	r3, #67	; 0x43
   d6e2e:	e7ce      	b.n	d6dce <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   d6e30:	2504      	movs	r5, #4
    return m_spiDriver->receive();
   d6e32:	6860      	ldr	r0, [r4, #4]
   d6e34:	f000 f96f 	bl	d7116 <_ZN14SdSpiAltDriver7receiveEv>
   d6e38:	3d01      	subs	r5, #1
    for (uint8_t i = 0; i < 4; i++) {
   d6e3a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d6e3e:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   d6e40:	d1f7      	bne.n	d6e32 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   d6e42:	28aa      	cmp	r0, #170	; 0xaa
   d6e44:	d104      	bne.n	d6e50 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   d6e46:	2302      	movs	r3, #2
   d6e48:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d6e4a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   d6e4e:	e7dd      	b.n	d6e0c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   d6e50:	2325      	movs	r3, #37	; 0x25
   d6e52:	e7bc      	b.n	d6dce <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   d6e54:	7aa3      	ldrb	r3, [r4, #10]
   d6e56:	2b02      	cmp	r3, #2
   d6e58:	d118      	bne.n	d6e8c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   d6e5a:	213a      	movs	r1, #58	; 0x3a
   d6e5c:	4620      	mov	r0, r4
   d6e5e:	f7ff ff39 	bl	d6cd4 <_ZN9SdSpiCard11cardCommandEhm>
   d6e62:	b108      	cbz	r0, d6e68 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   d6e64:	2337      	movs	r3, #55	; 0x37
   d6e66:	e7b2      	b.n	d6dce <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    return m_spiDriver->receive();
   d6e68:	6860      	ldr	r0, [r4, #4]
   d6e6a:	f000 f954 	bl	d7116 <_ZN14SdSpiAltDriver7receiveEv>
    if ((spiReceive() & 0XC0) == 0XC0) {
   d6e6e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d6e72:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   d6e74:	bf04      	itt	eq
   d6e76:	2303      	moveq	r3, #3
   d6e78:	72a3      	strbeq	r3, [r4, #10]
    return m_spiDriver->receive();
   d6e7a:	6860      	ldr	r0, [r4, #4]
   d6e7c:	f000 f94b 	bl	d7116 <_ZN14SdSpiAltDriver7receiveEv>
   d6e80:	6860      	ldr	r0, [r4, #4]
   d6e82:	f000 f948 	bl	d7116 <_ZN14SdSpiAltDriver7receiveEv>
   d6e86:	6860      	ldr	r0, [r4, #4]
   d6e88:	f000 f945 	bl	d7116 <_ZN14SdSpiAltDriver7receiveEv>
  spiStop();
   d6e8c:	4620      	mov	r0, r4
   d6e8e:	f7ff fec8 	bl	d6c22 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d6e92:	6863      	ldr	r3, [r4, #4]
   d6e94:	7930      	ldrb	r0, [r6, #4]
   d6e96:	68b1      	ldr	r1, [r6, #8]
   d6e98:	89b2      	ldrh	r2, [r6, #12]
   d6e9a:	821a      	strh	r2, [r3, #16]
   d6e9c:	7218      	strb	r0, [r3, #8]
   d6e9e:	60d9      	str	r1, [r3, #12]
  return true;
   d6ea0:	2001      	movs	r0, #1
   d6ea2:	e799      	b.n	d6dd8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   d6ea4:	0003d090 	.word	0x0003d090

000d6ea8 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6ea8:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d6eaa:	7a83      	ldrb	r3, [r0, #10]
   d6eac:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6eae:	bf18      	it	ne
   d6eb0:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6eb2:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   d6eb4:	460a      	mov	r2, r1
   d6eb6:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6eb8:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   d6eba:	f7ff ff0b 	bl	d6cd4 <_ZN9SdSpiCard11cardCommandEhm>
   d6ebe:	b130      	cbz	r0, d6ece <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   d6ec0:	2330      	movs	r3, #48	; 0x30
   d6ec2:	7023      	strb	r3, [r4, #0]
  spiStop();
   d6ec4:	4620      	mov	r0, r4
   d6ec6:	f7ff feac 	bl	d6c22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6eca:	2500      	movs	r5, #0
   d6ecc:	e00b      	b.n	d6ee6 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   d6ece:	4629      	mov	r1, r5
   d6ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6ed4:	4620      	mov	r0, r4
   d6ed6:	f7ff feb7 	bl	d6c48 <_ZN9SdSpiCard8readDataEPhj>
   d6eda:	4605      	mov	r5, r0
   d6edc:	2800      	cmp	r0, #0
   d6ede:	d0f1      	beq.n	d6ec4 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   d6ee0:	4620      	mov	r0, r4
   d6ee2:	f7ff fe9e 	bl	d6c22 <_ZN9SdSpiCard7spiStopEv>
}
   d6ee6:	4628      	mov	r0, r5
   d6ee8:	bd38      	pop	{r3, r4, r5, pc}

000d6eea <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6eea:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d6eec:	7a83      	ldrb	r3, [r0, #10]
   d6eee:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6ef0:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d6ef2:	bf18      	it	ne
   d6ef4:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   d6ef6:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6ef8:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   d6efa:	f7ff feeb 	bl	d6cd4 <_ZN9SdSpiCard11cardCommandEhm>
   d6efe:	b130      	cbz	r0, d6f0e <_ZN9SdSpiCard9readStartEm+0x24>
   d6f00:	2331      	movs	r3, #49	; 0x31
  spiStop();
   d6f02:	4620      	mov	r0, r4
   d6f04:	7023      	strb	r3, [r4, #0]
   d6f06:	f7ff fe8c 	bl	d6c22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6f0a:	2000      	movs	r0, #0
}
   d6f0c:	bd10      	pop	{r4, pc}
  return true;
   d6f0e:	2001      	movs	r0, #1
   d6f10:	e7fc      	b.n	d6f0c <_ZN9SdSpiCard9readStartEm+0x22>

000d6f12 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   d6f12:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d6f14:	2200      	movs	r2, #0
   d6f16:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   d6f18:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d6f1a:	f7ff fedb 	bl	d6cd4 <_ZN9SdSpiCard11cardCommandEhm>
   d6f1e:	b130      	cbz	r0, d6f2e <_ZN9SdSpiCard8readStopEv+0x1c>
   d6f20:	2328      	movs	r3, #40	; 0x28
  spiStop();
   d6f22:	4620      	mov	r0, r4
   d6f24:	7023      	strb	r3, [r4, #0]
   d6f26:	f7ff fe7c 	bl	d6c22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6f2a:	2000      	movs	r0, #0
}
   d6f2c:	bd10      	pop	{r4, pc}
  spiStop();
   d6f2e:	4620      	mov	r0, r4
   d6f30:	f7ff fe77 	bl	d6c22 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6f34:	2001      	movs	r0, #1
   d6f36:	e7f9      	b.n	d6f2c <_ZN9SdSpiCard8readStopEv+0x1a>

000d6f38 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d6f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f3a:	4604      	mov	r4, r0
   d6f3c:	4616      	mov	r6, r2
   d6f3e:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d6f40:	f7ff ffd3 	bl	d6eea <_ZN9SdSpiCard9readStartEm>
   d6f44:	b168      	cbz	r0, d6f62 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   d6f46:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d6f48:	b2ab      	uxth	r3, r5
   d6f4a:	429f      	cmp	r7, r3
   d6f4c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   d6f50:	d909      	bls.n	d6f66 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   d6f52:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6f56:	4620      	mov	r0, r4
   d6f58:	f7ff fe76 	bl	d6c48 <_ZN9SdSpiCard8readDataEPhj>
   d6f5c:	3501      	adds	r5, #1
   d6f5e:	2800      	cmp	r0, #0
   d6f60:	d1f2      	bne.n	d6f48 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   d6f62:	2000      	movs	r0, #0
   d6f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   d6f66:	4620      	mov	r0, r4
}
   d6f68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   d6f6c:	f7ff bfd1 	b.w	d6f12 <_ZN9SdSpiCard8readStopEv>

000d6f70 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d6f70:	b538      	push	{r3, r4, r5, lr}
   d6f72:	4604      	mov	r4, r0
   d6f74:	4615      	mov	r5, r2
     m_spiDriver->send(data);
   d6f76:	6840      	ldr	r0, [r0, #4]
   d6f78:	f000 f8e8 	bl	d714c <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->send(buf, n);
   d6f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6f80:	6860      	ldr	r0, [r4, #4]
   d6f82:	4629      	mov	r1, r5
   d6f84:	f000 f8e6 	bl	d7154 <_ZN14SdSpiAltDriver4sendEPKhj>
     m_spiDriver->send(data);
   d6f88:	6860      	ldr	r0, [r4, #4]
   d6f8a:	21ff      	movs	r1, #255	; 0xff
   d6f8c:	f000 f8de 	bl	d714c <_ZN14SdSpiAltDriver4sendEh>
   d6f90:	6860      	ldr	r0, [r4, #4]
   d6f92:	21ff      	movs	r1, #255	; 0xff
   d6f94:	f000 f8da 	bl	d714c <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d6f98:	6860      	ldr	r0, [r4, #4]
   d6f9a:	f000 f8bc 	bl	d7116 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d6f9e:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d6fa0:	f000 001f 	and.w	r0, r0, #31
   d6fa4:	2805      	cmp	r0, #5
   d6fa6:	d006      	beq.n	d6fb6 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   d6fa8:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6faa:	4620      	mov	r0, r4
   d6fac:	7023      	strb	r3, [r4, #0]
   d6fae:	f7ff fe38 	bl	d6c22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6fb2:	2000      	movs	r0, #0
}
   d6fb4:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   d6fb6:	2001      	movs	r0, #1
   d6fb8:	e7fc      	b.n	d6fb4 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000d6fba <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6fba:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d6fbc:	7a83      	ldrb	r3, [r0, #10]
   d6fbe:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6fc0:	bf18      	it	ne
   d6fc2:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6fc4:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   d6fc6:	460a      	mov	r2, r1
   d6fc8:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6fca:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   d6fcc:	f7ff fe82 	bl	d6cd4 <_ZN9SdSpiCard11cardCommandEhm>
   d6fd0:	4606      	mov	r6, r0
   d6fd2:	b130      	cbz	r0, d6fe2 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   d6fd4:	2332      	movs	r3, #50	; 0x32
   d6fd6:	7023      	strb	r3, [r4, #0]
  spiStop();
   d6fd8:	4620      	mov	r0, r4
   d6fda:	f7ff fe22 	bl	d6c22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6fde:	2500      	movs	r5, #0
   d6fe0:	e01f      	b.n	d7022 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   d6fe2:	462a      	mov	r2, r5
   d6fe4:	21fe      	movs	r1, #254	; 0xfe
   d6fe6:	4620      	mov	r0, r4
   d6fe8:	f7ff ffc2 	bl	d6f70 <_ZN9SdSpiCard9writeDataEhPKh>
   d6fec:	2800      	cmp	r0, #0
   d6fee:	d0f3      	beq.n	d6fd8 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6ff0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d6ff4:	4620      	mov	r0, r4
   d6ff6:	f7ff fe58 	bl	d6caa <_ZN9SdSpiCard11waitNotBusyEt>
   d6ffa:	4605      	mov	r5, r0
   d6ffc:	b908      	cbnz	r0, d7002 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   d6ffe:	235a      	movs	r3, #90	; 0x5a
   d7000:	e7e9      	b.n	d6fd6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d7002:	4632      	mov	r2, r6
   d7004:	210d      	movs	r1, #13
   d7006:	4620      	mov	r0, r4
   d7008:	f7ff fe64 	bl	d6cd4 <_ZN9SdSpiCard11cardCommandEhm>
   d700c:	b108      	cbz	r0, d7012 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   d700e:	2329      	movs	r3, #41	; 0x29
   d7010:	e7e1      	b.n	d6fd6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
    return m_spiDriver->receive();
   d7012:	6860      	ldr	r0, [r4, #4]
   d7014:	f000 f87f 	bl	d7116 <_ZN14SdSpiAltDriver7receiveEv>
   d7018:	2800      	cmp	r0, #0
   d701a:	d1f8      	bne.n	d700e <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   d701c:	4620      	mov	r0, r4
   d701e:	f7ff fe00 	bl	d6c22 <_ZN9SdSpiCard7spiStopEv>
}
   d7022:	4628      	mov	r0, r5
   d7024:	bd70      	pop	{r4, r5, r6, pc}

000d7026 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   d7026:	b513      	push	{r0, r1, r4, lr}
   d7028:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d702a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   d702e:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7030:	f7ff fe3b 	bl	d6caa <_ZN9SdSpiCard11waitNotBusyEt>
   d7034:	9a01      	ldr	r2, [sp, #4]
   d7036:	b930      	cbnz	r0, d7046 <_ZN9SdSpiCard9writeDataEPKh+0x20>
    m_errorCode = code;
   d7038:	235b      	movs	r3, #91	; 0x5b
   d703a:	7023      	strb	r3, [r4, #0]
  spiStop();
   d703c:	4620      	mov	r0, r4
   d703e:	f7ff fdf0 	bl	d6c22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7042:	2000      	movs	r0, #0
   d7044:	e005      	b.n	d7052 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d7046:	21fc      	movs	r1, #252	; 0xfc
   d7048:	4620      	mov	r0, r4
   d704a:	f7ff ff91 	bl	d6f70 <_ZN9SdSpiCard9writeDataEhPKh>
   d704e:	2800      	cmp	r0, #0
   d7050:	d0f4      	beq.n	d703c <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   d7052:	b002      	add	sp, #8
   d7054:	bd10      	pop	{r4, pc}

000d7056 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7056:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7058:	7a83      	ldrb	r3, [r0, #10]
   d705a:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d705c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d705e:	bf18      	it	ne
   d7060:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d7062:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7064:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   d7066:	f7ff fe35 	bl	d6cd4 <_ZN9SdSpiCard11cardCommandEhm>
   d706a:	b130      	cbz	r0, d707a <_ZN9SdSpiCard10writeStartEm+0x24>
   d706c:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d706e:	4620      	mov	r0, r4
   d7070:	7023      	strb	r3, [r4, #0]
   d7072:	f7ff fdd6 	bl	d6c22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7076:	2000      	movs	r0, #0
}
   d7078:	bd10      	pop	{r4, pc}
  return true;
   d707a:	2001      	movs	r0, #1
   d707c:	e7fc      	b.n	d7078 <_ZN9SdSpiCard10writeStartEm+0x22>

000d707e <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d707e:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7080:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   d7084:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7086:	f7ff fe10 	bl	d6caa <_ZN9SdSpiCard11waitNotBusyEt>
   d708a:	4605      	mov	r5, r0
   d708c:	b930      	cbnz	r0, d709c <_ZN9SdSpiCard9writeStopEv+0x1e>
   d708e:	2356      	movs	r3, #86	; 0x56
   d7090:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   d7092:	4620      	mov	r0, r4
   d7094:	f7ff fdc5 	bl	d6c22 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   d7098:	4628      	mov	r0, r5
   d709a:	bd38      	pop	{r3, r4, r5, pc}
     m_spiDriver->send(data);
   d709c:	6860      	ldr	r0, [r4, #4]
   d709e:	21fd      	movs	r1, #253	; 0xfd
   d70a0:	f000 f854 	bl	d714c <_ZN14SdSpiAltDriver4sendEh>
   d70a4:	e7f5      	b.n	d7092 <_ZN9SdSpiCard9writeStopEv+0x14>

000d70a6 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d70a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d70a8:	4604      	mov	r4, r0
   d70aa:	4616      	mov	r6, r2
   d70ac:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d70ae:	f7ff ffd2 	bl	d7056 <_ZN9SdSpiCard10writeStartEm>
   d70b2:	b170      	cbz	r0, d70d2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d70b4:	2500      	movs	r5, #0
   d70b6:	42bd      	cmp	r5, r7
   d70b8:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   d70bc:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   d70be:	d004      	beq.n	d70ca <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d70c0:	f7ff ffb1 	bl	d7026 <_ZN9SdSpiCard9writeDataEPKh>
   d70c4:	b128      	cbz	r0, d70d2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d70c6:	3501      	adds	r5, #1
   d70c8:	e7f5      	b.n	d70b6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   d70ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   d70ce:	f7ff bfd6 	b.w	d707e <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   d70d2:	4620      	mov	r0, r4
   d70d4:	f7ff fda5 	bl	d6c22 <_ZN9SdSpiCard7spiStopEv>
}
   d70d8:	2000      	movs	r0, #0
   d70da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d70dc <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d70dc:	4b01      	ldr	r3, [pc, #4]	; (d70e4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d70de:	2201      	movs	r2, #1
   d70e0:	701a      	strb	r2, [r3, #0]
}
   d70e2:	4770      	bx	lr
   d70e4:	2003e5b0 	.word	0x2003e5b0

000d70e8 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d70e8:	1d01      	adds	r1, r0, #4
   d70ea:	6800      	ldr	r0, [r0, #0]
   d70ec:	f000 be10 	b.w	d7d10 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d70f0 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d70f0:	b510      	push	{r4, lr}
   d70f2:	4604      	mov	r4, r0
  m_csPin = csPin;
   d70f4:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d70f6:	6800      	ldr	r0, [r0, #0]
   d70f8:	f000 fde0 	bl	d7cbc <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d70fc:	7d20      	ldrb	r0, [r4, #20]
   d70fe:	2101      	movs	r1, #1
   d7100:	f001 f8c6 	bl	d8290 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d7104:	7d20      	ldrb	r0, [r4, #20]
   d7106:	2101      	movs	r1, #1
}
   d7108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   d710c:	f001 b8d1 	b.w	d82b2 <digitalWrite>

000d7110 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d7110:	6800      	ldr	r0, [r0, #0]
   d7112:	f000 bde4 	b.w	d7cde <_ZN8SPIClass14endTransactionEv>

000d7116 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d7116:	6800      	ldr	r0, [r0, #0]
   d7118:	21ff      	movs	r1, #255	; 0xff
   d711a:	f000 be67 	b.w	d7dec <_ZN8SPIClass8transferEh>
	...

000d7120 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d7120:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7122:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7124:	4a07      	ldr	r2, [pc, #28]	; (d7144 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d7126:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d7128:	2500      	movs	r5, #0
   d712a:	4c07      	ldr	r4, [pc, #28]	; (d7148 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d712c:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d712e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7130:	460a      	mov	r2, r1
   d7132:	4629      	mov	r1, r5
   d7134:	f000 fe60 	bl	d7df8 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d7138:	7823      	ldrb	r3, [r4, #0]
   d713a:	2b00      	cmp	r3, #0
   d713c:	d0fc      	beq.n	d7138 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d713e:	2000      	movs	r0, #0
   d7140:	b003      	add	sp, #12
   d7142:	bd30      	pop	{r4, r5, pc}
   d7144:	000d70dd 	.word	0x000d70dd
   d7148:	2003e5b0 	.word	0x2003e5b0

000d714c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d714c:	6800      	ldr	r0, [r0, #0]
   d714e:	f000 be4d 	b.w	d7dec <_ZN8SPIClass8transferEh>
	...

000d7154 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d7154:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7156:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d7158:	4a06      	ldr	r2, [pc, #24]	; (d7174 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d715a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d715c:	2500      	movs	r5, #0
   d715e:	4c06      	ldr	r4, [pc, #24]	; (d7178 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d7160:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d7162:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d7164:	462a      	mov	r2, r5
   d7166:	f000 fe47 	bl	d7df8 <_ZN8SPIClass8transferEPvS0_jPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   d716a:	7823      	ldrb	r3, [r4, #0]
   d716c:	2b00      	cmp	r3, #0
   d716e:	d0fc      	beq.n	d716a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d7170:	b003      	add	sp, #12
   d7172:	bd30      	pop	{r4, r5, pc}
   d7174:	000d70dd 	.word	0x000d70dd
   d7178:	2003e5b0 	.word	0x2003e5b0

000d717c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d717c:	b508      	push	{r3, lr}
   d717e:	4b02      	ldr	r3, [pc, #8]	; (d7188 <os_mutex_recursive_create+0xc>)
   d7180:	681b      	ldr	r3, [r3, #0]
   d7182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7184:	9301      	str	r3, [sp, #4]
   d7186:	bd08      	pop	{r3, pc}
   d7188:	00030248 	.word	0x00030248

000d718c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d718c:	b508      	push	{r3, lr}
   d718e:	4b02      	ldr	r3, [pc, #8]	; (d7198 <HAL_RNG_GetRandomNumber+0xc>)
   d7190:	681b      	ldr	r3, [r3, #0]
   d7192:	685b      	ldr	r3, [r3, #4]
   d7194:	9301      	str	r3, [sp, #4]
   d7196:	bd08      	pop	{r3, pc}
   d7198:	00030218 	.word	0x00030218

000d719c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d719c:	b508      	push	{r3, lr}
   d719e:	4b02      	ldr	r3, [pc, #8]	; (d71a8 <HAL_Delay_Microseconds+0xc>)
   d71a0:	681b      	ldr	r3, [r3, #0]
   d71a2:	68db      	ldr	r3, [r3, #12]
   d71a4:	9301      	str	r3, [sp, #4]
   d71a6:	bd08      	pop	{r3, pc}
   d71a8:	00030218 	.word	0x00030218

000d71ac <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d71ac:	b508      	push	{r3, lr}
   d71ae:	4b02      	ldr	r3, [pc, #8]	; (d71b8 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d71b0:	681b      	ldr	r3, [r3, #0]
   d71b2:	691b      	ldr	r3, [r3, #16]
   d71b4:	9301      	str	r3, [sp, #4]
   d71b6:	bd08      	pop	{r3, pc}
   d71b8:	00030218 	.word	0x00030218

000d71bc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d71bc:	b508      	push	{r3, lr}
   d71be:	4b02      	ldr	r3, [pc, #8]	; (d71c8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d71c0:	681b      	ldr	r3, [r3, #0]
   d71c2:	695b      	ldr	r3, [r3, #20]
   d71c4:	9301      	str	r3, [sp, #4]
   d71c6:	bd08      	pop	{r3, pc}
   d71c8:	00030218 	.word	0x00030218

000d71cc <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d71cc:	b508      	push	{r3, lr}
   d71ce:	4b02      	ldr	r3, [pc, #8]	; (d71d8 <HAL_Pin_Mode+0xc>)
   d71d0:	681b      	ldr	r3, [r3, #0]
   d71d2:	689b      	ldr	r3, [r3, #8]
   d71d4:	9301      	str	r3, [sp, #4]
   d71d6:	bd08      	pop	{r3, pc}
   d71d8:	0003022c 	.word	0x0003022c

000d71dc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d71dc:	b508      	push	{r3, lr}
   d71de:	4b02      	ldr	r3, [pc, #8]	; (d71e8 <HAL_Get_Pin_Mode+0xc>)
   d71e0:	681b      	ldr	r3, [r3, #0]
   d71e2:	68db      	ldr	r3, [r3, #12]
   d71e4:	9301      	str	r3, [sp, #4]
   d71e6:	bd08      	pop	{r3, pc}
   d71e8:	0003022c 	.word	0x0003022c

000d71ec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d71ec:	b508      	push	{r3, lr}
   d71ee:	4b02      	ldr	r3, [pc, #8]	; (d71f8 <HAL_GPIO_Write+0xc>)
   d71f0:	681b      	ldr	r3, [r3, #0]
   d71f2:	691b      	ldr	r3, [r3, #16]
   d71f4:	9301      	str	r3, [sp, #4]
   d71f6:	bd08      	pop	{r3, pc}
   d71f8:	0003022c 	.word	0x0003022c

000d71fc <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d71fc:	b508      	push	{r3, lr}
   d71fe:	4b02      	ldr	r3, [pc, #8]	; (d7208 <hal_i2c_begin+0xc>)
   d7200:	681b      	ldr	r3, [r3, #0]
   d7202:	68db      	ldr	r3, [r3, #12]
   d7204:	9301      	str	r3, [sp, #4]
   d7206:	bd08      	pop	{r3, pc}
   d7208:	00030228 	.word	0x00030228

000d720c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d720c:	b508      	push	{r3, lr}
   d720e:	4b02      	ldr	r3, [pc, #8]	; (d7218 <hal_i2c_begin_transmission+0xc>)
   d7210:	681b      	ldr	r3, [r3, #0]
   d7212:	699b      	ldr	r3, [r3, #24]
   d7214:	9301      	str	r3, [sp, #4]
   d7216:	bd08      	pop	{r3, pc}
   d7218:	00030228 	.word	0x00030228

000d721c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d721c:	b508      	push	{r3, lr}
   d721e:	4b02      	ldr	r3, [pc, #8]	; (d7228 <hal_i2c_end_transmission+0xc>)
   d7220:	681b      	ldr	r3, [r3, #0]
   d7222:	69db      	ldr	r3, [r3, #28]
   d7224:	9301      	str	r3, [sp, #4]
   d7226:	bd08      	pop	{r3, pc}
   d7228:	00030228 	.word	0x00030228

000d722c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d722c:	b508      	push	{r3, lr}
   d722e:	4b02      	ldr	r3, [pc, #8]	; (d7238 <hal_i2c_write+0xc>)
   d7230:	681b      	ldr	r3, [r3, #0]
   d7232:	6a1b      	ldr	r3, [r3, #32]
   d7234:	9301      	str	r3, [sp, #4]
   d7236:	bd08      	pop	{r3, pc}
   d7238:	00030228 	.word	0x00030228

000d723c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d723c:	b508      	push	{r3, lr}
   d723e:	4b02      	ldr	r3, [pc, #8]	; (d7248 <hal_i2c_available+0xc>)
   d7240:	681b      	ldr	r3, [r3, #0]
   d7242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7244:	9301      	str	r3, [sp, #4]
   d7246:	bd08      	pop	{r3, pc}
   d7248:	00030228 	.word	0x00030228

000d724c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d724c:	b508      	push	{r3, lr}
   d724e:	4b02      	ldr	r3, [pc, #8]	; (d7258 <hal_i2c_read+0xc>)
   d7250:	681b      	ldr	r3, [r3, #0]
   d7252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7254:	9301      	str	r3, [sp, #4]
   d7256:	bd08      	pop	{r3, pc}
   d7258:	00030228 	.word	0x00030228

000d725c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d725c:	b508      	push	{r3, lr}
   d725e:	4b02      	ldr	r3, [pc, #8]	; (d7268 <hal_i2c_peek+0xc>)
   d7260:	681b      	ldr	r3, [r3, #0]
   d7262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7264:	9301      	str	r3, [sp, #4]
   d7266:	bd08      	pop	{r3, pc}
   d7268:	00030228 	.word	0x00030228

000d726c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d726c:	b508      	push	{r3, lr}
   d726e:	4b02      	ldr	r3, [pc, #8]	; (d7278 <hal_i2c_flush+0xc>)
   d7270:	681b      	ldr	r3, [r3, #0]
   d7272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7274:	9301      	str	r3, [sp, #4]
   d7276:	bd08      	pop	{r3, pc}
   d7278:	00030228 	.word	0x00030228

000d727c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d727c:	b508      	push	{r3, lr}
   d727e:	4b02      	ldr	r3, [pc, #8]	; (d7288 <hal_i2c_is_enabled+0xc>)
   d7280:	681b      	ldr	r3, [r3, #0]
   d7282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7284:	9301      	str	r3, [sp, #4]
   d7286:	bd08      	pop	{r3, pc}
   d7288:	00030228 	.word	0x00030228

000d728c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d728c:	b508      	push	{r3, lr}
   d728e:	4b02      	ldr	r3, [pc, #8]	; (d7298 <hal_i2c_init+0xc>)
   d7290:	681b      	ldr	r3, [r3, #0]
   d7292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7294:	9301      	str	r3, [sp, #4]
   d7296:	bd08      	pop	{r3, pc}
   d7298:	00030228 	.word	0x00030228

000d729c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d729c:	b508      	push	{r3, lr}
   d729e:	4b02      	ldr	r3, [pc, #8]	; (d72a8 <hal_i2c_request_ex+0xc>)
   d72a0:	681b      	ldr	r3, [r3, #0]
   d72a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d72a4:	9301      	str	r3, [sp, #4]
   d72a6:	bd08      	pop	{r3, pc}
   d72a8:	00030228 	.word	0x00030228

000d72ac <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d72ac:	b508      	push	{r3, lr}
   d72ae:	4b02      	ldr	r3, [pc, #8]	; (d72b8 <inet_inet_ntop+0xc>)
   d72b0:	681b      	ldr	r3, [r3, #0]
   d72b2:	695b      	ldr	r3, [r3, #20]
   d72b4:	9301      	str	r3, [sp, #4]
   d72b6:	bd08      	pop	{r3, pc}
   d72b8:	00030264 	.word	0x00030264

000d72bc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d72bc:	b508      	push	{r3, lr}
   d72be:	4b02      	ldr	r3, [pc, #8]	; (d72c8 <netdb_freeaddrinfo+0xc>)
   d72c0:	681b      	ldr	r3, [r3, #0]
   d72c2:	689b      	ldr	r3, [r3, #8]
   d72c4:	9301      	str	r3, [sp, #4]
   d72c6:	bd08      	pop	{r3, pc}
   d72c8:	00030268 	.word	0x00030268

000d72cc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d72cc:	b508      	push	{r3, lr}
   d72ce:	4b02      	ldr	r3, [pc, #8]	; (d72d8 <netdb_getaddrinfo+0xc>)
   d72d0:	681b      	ldr	r3, [r3, #0]
   d72d2:	68db      	ldr	r3, [r3, #12]
   d72d4:	9301      	str	r3, [sp, #4]
   d72d6:	bd08      	pop	{r3, pc}
   d72d8:	00030268 	.word	0x00030268

000d72dc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d72dc:	b508      	push	{r3, lr}
   d72de:	4b02      	ldr	r3, [pc, #8]	; (d72e8 <hal_spi_begin+0xc>)
   d72e0:	681b      	ldr	r3, [r3, #0]
   d72e2:	681b      	ldr	r3, [r3, #0]
   d72e4:	9301      	str	r3, [sp, #4]
   d72e6:	bd08      	pop	{r3, pc}
   d72e8:	00030230 	.word	0x00030230

000d72ec <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d72ec:	b508      	push	{r3, lr}
   d72ee:	4b02      	ldr	r3, [pc, #8]	; (d72f8 <hal_spi_transfer+0xc>)
   d72f0:	681b      	ldr	r3, [r3, #0]
   d72f2:	695b      	ldr	r3, [r3, #20]
   d72f4:	9301      	str	r3, [sp, #4]
   d72f6:	bd08      	pop	{r3, pc}
   d72f8:	00030230 	.word	0x00030230

000d72fc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d72fc:	b508      	push	{r3, lr}
   d72fe:	4b02      	ldr	r3, [pc, #8]	; (d7308 <hal_spi_init+0xc>)
   d7300:	681b      	ldr	r3, [r3, #0]
   d7302:	69db      	ldr	r3, [r3, #28]
   d7304:	9301      	str	r3, [sp, #4]
   d7306:	bd08      	pop	{r3, pc}
   d7308:	00030230 	.word	0x00030230

000d730c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d730c:	b508      	push	{r3, lr}
   d730e:	4b02      	ldr	r3, [pc, #8]	; (d7318 <hal_spi_is_enabled+0xc>)
   d7310:	681b      	ldr	r3, [r3, #0]
   d7312:	6a1b      	ldr	r3, [r3, #32]
   d7314:	9301      	str	r3, [sp, #4]
   d7316:	bd08      	pop	{r3, pc}
   d7318:	00030230 	.word	0x00030230

000d731c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d731c:	b508      	push	{r3, lr}
   d731e:	4b02      	ldr	r3, [pc, #8]	; (d7328 <hal_spi_info+0xc>)
   d7320:	681b      	ldr	r3, [r3, #0]
   d7322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7324:	9301      	str	r3, [sp, #4]
   d7326:	bd08      	pop	{r3, pc}
   d7328:	00030230 	.word	0x00030230

000d732c <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
   d732c:	b508      	push	{r3, lr}
   d732e:	4b02      	ldr	r3, [pc, #8]	; (d7338 <hal_spi_transfer_dma+0xc>)
   d7330:	681b      	ldr	r3, [r3, #0]
   d7332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7334:	9301      	str	r3, [sp, #4]
   d7336:	bd08      	pop	{r3, pc}
   d7338:	00030230 	.word	0x00030230

000d733c <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   d733c:	b508      	push	{r3, lr}
   d733e:	4b02      	ldr	r3, [pc, #8]	; (d7348 <hal_spi_transfer_dma_status+0xc>)
   d7340:	681b      	ldr	r3, [r3, #0]
   d7342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7344:	9301      	str	r3, [sp, #4]
   d7346:	bd08      	pop	{r3, pc}
   d7348:	00030230 	.word	0x00030230

000d734c <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d734c:	b508      	push	{r3, lr}
   d734e:	4b02      	ldr	r3, [pc, #8]	; (d7358 <hal_spi_set_settings+0xc>)
   d7350:	681b      	ldr	r3, [r3, #0]
   d7352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7354:	9301      	str	r3, [sp, #4]
   d7356:	bd08      	pop	{r3, pc}
   d7358:	00030230 	.word	0x00030230

000d735c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d735c:	b508      	push	{r3, lr}
   d735e:	4b02      	ldr	r3, [pc, #8]	; (d7368 <hal_spi_acquire+0xc>)
   d7360:	681b      	ldr	r3, [r3, #0]
   d7362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7364:	9301      	str	r3, [sp, #4]
   d7366:	bd08      	pop	{r3, pc}
   d7368:	00030230 	.word	0x00030230

000d736c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d736c:	b508      	push	{r3, lr}
   d736e:	4b02      	ldr	r3, [pc, #8]	; (d7378 <hal_spi_release+0xc>)
   d7370:	681b      	ldr	r3, [r3, #0]
   d7372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7374:	9301      	str	r3, [sp, #4]
   d7376:	bd08      	pop	{r3, pc}
   d7378:	00030230 	.word	0x00030230

000d737c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d737c:	b508      	push	{r3, lr}
   d737e:	4b02      	ldr	r3, [pc, #8]	; (d7388 <hal_usart_init+0xc>)
   d7380:	681b      	ldr	r3, [r3, #0]
   d7382:	681b      	ldr	r3, [r3, #0]
   d7384:	9301      	str	r3, [sp, #4]
   d7386:	bd08      	pop	{r3, pc}
   d7388:	0003023c 	.word	0x0003023c

000d738c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d738c:	b508      	push	{r3, lr}
   d738e:	4b02      	ldr	r3, [pc, #8]	; (d7398 <hal_usart_write+0xc>)
   d7390:	681b      	ldr	r3, [r3, #0]
   d7392:	68db      	ldr	r3, [r3, #12]
   d7394:	9301      	str	r3, [sp, #4]
   d7396:	bd08      	pop	{r3, pc}
   d7398:	0003023c 	.word	0x0003023c

000d739c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d739c:	b508      	push	{r3, lr}
   d739e:	4b02      	ldr	r3, [pc, #8]	; (d73a8 <hal_usart_available+0xc>)
   d73a0:	681b      	ldr	r3, [r3, #0]
   d73a2:	691b      	ldr	r3, [r3, #16]
   d73a4:	9301      	str	r3, [sp, #4]
   d73a6:	bd08      	pop	{r3, pc}
   d73a8:	0003023c 	.word	0x0003023c

000d73ac <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d73ac:	b508      	push	{r3, lr}
   d73ae:	4b02      	ldr	r3, [pc, #8]	; (d73b8 <hal_usart_read+0xc>)
   d73b0:	681b      	ldr	r3, [r3, #0]
   d73b2:	695b      	ldr	r3, [r3, #20]
   d73b4:	9301      	str	r3, [sp, #4]
   d73b6:	bd08      	pop	{r3, pc}
   d73b8:	0003023c 	.word	0x0003023c

000d73bc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d73bc:	b508      	push	{r3, lr}
   d73be:	4b02      	ldr	r3, [pc, #8]	; (d73c8 <hal_usart_peek+0xc>)
   d73c0:	681b      	ldr	r3, [r3, #0]
   d73c2:	699b      	ldr	r3, [r3, #24]
   d73c4:	9301      	str	r3, [sp, #4]
   d73c6:	bd08      	pop	{r3, pc}
   d73c8:	0003023c 	.word	0x0003023c

000d73cc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d73cc:	b508      	push	{r3, lr}
   d73ce:	4b02      	ldr	r3, [pc, #8]	; (d73d8 <hal_usart_flush+0xc>)
   d73d0:	681b      	ldr	r3, [r3, #0]
   d73d2:	69db      	ldr	r3, [r3, #28]
   d73d4:	9301      	str	r3, [sp, #4]
   d73d6:	bd08      	pop	{r3, pc}
   d73d8:	0003023c 	.word	0x0003023c

000d73dc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d73dc:	b508      	push	{r3, lr}
   d73de:	4b02      	ldr	r3, [pc, #8]	; (d73e8 <hal_usart_is_enabled+0xc>)
   d73e0:	681b      	ldr	r3, [r3, #0]
   d73e2:	6a1b      	ldr	r3, [r3, #32]
   d73e4:	9301      	str	r3, [sp, #4]
   d73e6:	bd08      	pop	{r3, pc}
   d73e8:	0003023c 	.word	0x0003023c

000d73ec <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d73ec:	b508      	push	{r3, lr}
   d73ee:	4b02      	ldr	r3, [pc, #8]	; (d73f8 <hal_usart_available_data_for_write+0xc>)
   d73f0:	681b      	ldr	r3, [r3, #0]
   d73f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d73f4:	9301      	str	r3, [sp, #4]
   d73f6:	bd08      	pop	{r3, pc}
   d73f8:	0003023c 	.word	0x0003023c

000d73fc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d73fc:	b508      	push	{r3, lr}
   d73fe:	4b02      	ldr	r3, [pc, #8]	; (d7408 <HAL_USB_USART_Init+0xc>)
   d7400:	681b      	ldr	r3, [r3, #0]
   d7402:	681b      	ldr	r3, [r3, #0]
   d7404:	9301      	str	r3, [sp, #4]
   d7406:	bd08      	pop	{r3, pc}
   d7408:	0003024c 	.word	0x0003024c

000d740c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d740c:	b508      	push	{r3, lr}
   d740e:	4b02      	ldr	r3, [pc, #8]	; (d7418 <HAL_USB_USART_Begin+0xc>)
   d7410:	681b      	ldr	r3, [r3, #0]
   d7412:	685b      	ldr	r3, [r3, #4]
   d7414:	9301      	str	r3, [sp, #4]
   d7416:	bd08      	pop	{r3, pc}
   d7418:	0003024c 	.word	0x0003024c

000d741c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d741c:	b508      	push	{r3, lr}
   d741e:	4b02      	ldr	r3, [pc, #8]	; (d7428 <HAL_USB_USART_Available_Data+0xc>)
   d7420:	681b      	ldr	r3, [r3, #0]
   d7422:	691b      	ldr	r3, [r3, #16]
   d7424:	9301      	str	r3, [sp, #4]
   d7426:	bd08      	pop	{r3, pc}
   d7428:	0003024c 	.word	0x0003024c

000d742c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d742c:	b508      	push	{r3, lr}
   d742e:	4b02      	ldr	r3, [pc, #8]	; (d7438 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7430:	681b      	ldr	r3, [r3, #0]
   d7432:	695b      	ldr	r3, [r3, #20]
   d7434:	9301      	str	r3, [sp, #4]
   d7436:	bd08      	pop	{r3, pc}
   d7438:	0003024c 	.word	0x0003024c

000d743c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d743c:	b508      	push	{r3, lr}
   d743e:	4b02      	ldr	r3, [pc, #8]	; (d7448 <HAL_USB_USART_Receive_Data+0xc>)
   d7440:	681b      	ldr	r3, [r3, #0]
   d7442:	699b      	ldr	r3, [r3, #24]
   d7444:	9301      	str	r3, [sp, #4]
   d7446:	bd08      	pop	{r3, pc}
   d7448:	0003024c 	.word	0x0003024c

000d744c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d744c:	b508      	push	{r3, lr}
   d744e:	4b02      	ldr	r3, [pc, #8]	; (d7458 <HAL_USB_USART_Send_Data+0xc>)
   d7450:	681b      	ldr	r3, [r3, #0]
   d7452:	69db      	ldr	r3, [r3, #28]
   d7454:	9301      	str	r3, [sp, #4]
   d7456:	bd08      	pop	{r3, pc}
   d7458:	0003024c 	.word	0x0003024c

000d745c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d745c:	b508      	push	{r3, lr}
   d745e:	4b02      	ldr	r3, [pc, #8]	; (d7468 <HAL_USB_USART_Flush_Data+0xc>)
   d7460:	681b      	ldr	r3, [r3, #0]
   d7462:	6a1b      	ldr	r3, [r3, #32]
   d7464:	9301      	str	r3, [sp, #4]
   d7466:	bd08      	pop	{r3, pc}
   d7468:	0003024c 	.word	0x0003024c

000d746c <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d746c:	b508      	push	{r3, lr}
   d746e:	4b02      	ldr	r3, [pc, #8]	; (d7478 <HAL_USB_USART_Is_Enabled+0xc>)
   d7470:	681b      	ldr	r3, [r3, #0]
   d7472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7474:	9301      	str	r3, [sp, #4]
   d7476:	bd08      	pop	{r3, pc}
   d7478:	0003024c 	.word	0x0003024c

000d747c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d747c:	b508      	push	{r3, lr}
   d747e:	4b02      	ldr	r3, [pc, #8]	; (d7488 <set_system_mode+0xc>)
   d7480:	681b      	ldr	r3, [r3, #0]
   d7482:	685b      	ldr	r3, [r3, #4]
   d7484:	9301      	str	r3, [sp, #4]
   d7486:	bd08      	pop	{r3, pc}
   d7488:	00030220 	.word	0x00030220

000d748c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d748c:	b508      	push	{r3, lr}
   d748e:	4b02      	ldr	r3, [pc, #8]	; (d7498 <system_delay_ms+0xc>)
   d7490:	681b      	ldr	r3, [r3, #0]
   d7492:	695b      	ldr	r3, [r3, #20]
   d7494:	9301      	str	r3, [sp, #4]
   d7496:	bd08      	pop	{r3, pc}
   d7498:	00030220 	.word	0x00030220

000d749c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d749c:	b508      	push	{r3, lr}
   d749e:	4b02      	ldr	r3, [pc, #8]	; (d74a8 <system_thread_set_state+0xc>)
   d74a0:	681b      	ldr	r3, [r3, #0]
   d74a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d74a4:	9301      	str	r3, [sp, #4]
   d74a6:	bd08      	pop	{r3, pc}
   d74a8:	00030220 	.word	0x00030220

000d74ac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d74ac:	b508      	push	{r3, lr}
   d74ae:	4b03      	ldr	r3, [pc, #12]	; (d74bc <system_ctrl_set_app_request_handler+0x10>)
   d74b0:	681b      	ldr	r3, [r3, #0]
   d74b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d74b6:	9301      	str	r3, [sp, #4]
   d74b8:	bd08      	pop	{r3, pc}
   d74ba:	0000      	.short	0x0000
   d74bc:	00030220 	.word	0x00030220

000d74c0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d74c0:	b508      	push	{r3, lr}
   d74c2:	4b03      	ldr	r3, [pc, #12]	; (d74d0 <system_ctrl_set_result+0x10>)
   d74c4:	681b      	ldr	r3, [r3, #0]
   d74c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d74ca:	9301      	str	r3, [sp, #4]
   d74cc:	bd08      	pop	{r3, pc}
   d74ce:	0000      	.short	0x0000
   d74d0:	00030220 	.word	0x00030220

000d74d4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d74d4:	b508      	push	{r3, lr}
   d74d6:	4b02      	ldr	r3, [pc, #8]	; (d74e0 <spark_process+0xc>)
   d74d8:	681b      	ldr	r3, [r3, #0]
   d74da:	689b      	ldr	r3, [r3, #8]
   d74dc:	9301      	str	r3, [sp, #4]
   d74de:	bd08      	pop	{r3, pc}
   d74e0:	00030244 	.word	0x00030244

000d74e4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d74e4:	b508      	push	{r3, lr}
   d74e6:	4b02      	ldr	r3, [pc, #8]	; (d74f0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d74e8:	681b      	ldr	r3, [r3, #0]
   d74ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d74ec:	9301      	str	r3, [sp, #4]
   d74ee:	bd08      	pop	{r3, pc}
   d74f0:	00030244 	.word	0x00030244

000d74f4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d74f4:	b508      	push	{r3, lr}
   d74f6:	4b02      	ldr	r3, [pc, #8]	; (d7500 <network_connect+0xc>)
   d74f8:	681b      	ldr	r3, [r3, #0]
   d74fa:	685b      	ldr	r3, [r3, #4]
   d74fc:	9301      	str	r3, [sp, #4]
   d74fe:	bd08      	pop	{r3, pc}
   d7500:	00030240 	.word	0x00030240

000d7504 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7504:	b508      	push	{r3, lr}
   d7506:	4b02      	ldr	r3, [pc, #8]	; (d7510 <network_connecting+0xc>)
   d7508:	681b      	ldr	r3, [r3, #0]
   d750a:	689b      	ldr	r3, [r3, #8]
   d750c:	9301      	str	r3, [sp, #4]
   d750e:	bd08      	pop	{r3, pc}
   d7510:	00030240 	.word	0x00030240

000d7514 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7514:	b508      	push	{r3, lr}
   d7516:	4b02      	ldr	r3, [pc, #8]	; (d7520 <network_disconnect+0xc>)
   d7518:	681b      	ldr	r3, [r3, #0]
   d751a:	68db      	ldr	r3, [r3, #12]
   d751c:	9301      	str	r3, [sp, #4]
   d751e:	bd08      	pop	{r3, pc}
   d7520:	00030240 	.word	0x00030240

000d7524 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7524:	b508      	push	{r3, lr}
   d7526:	4b02      	ldr	r3, [pc, #8]	; (d7530 <network_ready+0xc>)
   d7528:	681b      	ldr	r3, [r3, #0]
   d752a:	691b      	ldr	r3, [r3, #16]
   d752c:	9301      	str	r3, [sp, #4]
   d752e:	bd08      	pop	{r3, pc}
   d7530:	00030240 	.word	0x00030240

000d7534 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7534:	b508      	push	{r3, lr}
   d7536:	4b02      	ldr	r3, [pc, #8]	; (d7540 <network_on+0xc>)
   d7538:	681b      	ldr	r3, [r3, #0]
   d753a:	695b      	ldr	r3, [r3, #20]
   d753c:	9301      	str	r3, [sp, #4]
   d753e:	bd08      	pop	{r3, pc}
   d7540:	00030240 	.word	0x00030240

000d7544 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7544:	b508      	push	{r3, lr}
   d7546:	4b02      	ldr	r3, [pc, #8]	; (d7550 <network_off+0xc>)
   d7548:	681b      	ldr	r3, [r3, #0]
   d754a:	699b      	ldr	r3, [r3, #24]
   d754c:	9301      	str	r3, [sp, #4]
   d754e:	bd08      	pop	{r3, pc}
   d7550:	00030240 	.word	0x00030240

000d7554 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7554:	b508      	push	{r3, lr}
   d7556:	4b02      	ldr	r3, [pc, #8]	; (d7560 <network_listen+0xc>)
   d7558:	681b      	ldr	r3, [r3, #0]
   d755a:	69db      	ldr	r3, [r3, #28]
   d755c:	9301      	str	r3, [sp, #4]
   d755e:	bd08      	pop	{r3, pc}
   d7560:	00030240 	.word	0x00030240

000d7564 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7564:	b508      	push	{r3, lr}
   d7566:	4b02      	ldr	r3, [pc, #8]	; (d7570 <network_listening+0xc>)
   d7568:	681b      	ldr	r3, [r3, #0]
   d756a:	6a1b      	ldr	r3, [r3, #32]
   d756c:	9301      	str	r3, [sp, #4]
   d756e:	bd08      	pop	{r3, pc}
   d7570:	00030240 	.word	0x00030240

000d7574 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d7574:	b508      	push	{r3, lr}
   d7576:	4b02      	ldr	r3, [pc, #8]	; (d7580 <network_set_listen_timeout+0xc>)
   d7578:	681b      	ldr	r3, [r3, #0]
   d757a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d757c:	9301      	str	r3, [sp, #4]
   d757e:	bd08      	pop	{r3, pc}
   d7580:	00030240 	.word	0x00030240

000d7584 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7584:	b508      	push	{r3, lr}
   d7586:	4b02      	ldr	r3, [pc, #8]	; (d7590 <network_get_listen_timeout+0xc>)
   d7588:	681b      	ldr	r3, [r3, #0]
   d758a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d758c:	9301      	str	r3, [sp, #4]
   d758e:	bd08      	pop	{r3, pc}
   d7590:	00030240 	.word	0x00030240

000d7594 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d7594:	b508      	push	{r3, lr}
   d7596:	4b02      	ldr	r3, [pc, #8]	; (d75a0 <network_is_on+0xc>)
   d7598:	681b      	ldr	r3, [r3, #0]
   d759a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d759c:	9301      	str	r3, [sp, #4]
   d759e:	bd08      	pop	{r3, pc}
   d75a0:	00030240 	.word	0x00030240

000d75a4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d75a4:	b508      	push	{r3, lr}
   d75a6:	4b02      	ldr	r3, [pc, #8]	; (d75b0 <network_is_off+0xc>)
   d75a8:	681b      	ldr	r3, [r3, #0]
   d75aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d75ac:	9301      	str	r3, [sp, #4]
   d75ae:	bd08      	pop	{r3, pc}
   d75b0:	00030240 	.word	0x00030240

000d75b4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d75b4:	b508      	push	{r3, lr}
   d75b6:	4b02      	ldr	r3, [pc, #8]	; (d75c0 <malloc+0xc>)
   d75b8:	681b      	ldr	r3, [r3, #0]
   d75ba:	681b      	ldr	r3, [r3, #0]
   d75bc:	9301      	str	r3, [sp, #4]
   d75be:	bd08      	pop	{r3, pc}
   d75c0:	0003021c 	.word	0x0003021c

000d75c4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d75c4:	b508      	push	{r3, lr}
   d75c6:	4b02      	ldr	r3, [pc, #8]	; (d75d0 <free+0xc>)
   d75c8:	681b      	ldr	r3, [r3, #0]
   d75ca:	685b      	ldr	r3, [r3, #4]
   d75cc:	9301      	str	r3, [sp, #4]
   d75ce:	bd08      	pop	{r3, pc}
   d75d0:	0003021c 	.word	0x0003021c

000d75d4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d75d4:	b508      	push	{r3, lr}
   d75d6:	4b02      	ldr	r3, [pc, #8]	; (d75e0 <vsnprintf+0xc>)
   d75d8:	681b      	ldr	r3, [r3, #0]
   d75da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d75dc:	9301      	str	r3, [sp, #4]
   d75de:	bd08      	pop	{r3, pc}
   d75e0:	0003021c 	.word	0x0003021c

000d75e4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d75e4:	b508      	push	{r3, lr}
   d75e6:	4b02      	ldr	r3, [pc, #8]	; (d75f0 <newlib_impure_ptr_callback+0xc>)
   d75e8:	681b      	ldr	r3, [r3, #0]
   d75ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d75ec:	9301      	str	r3, [sp, #4]
   d75ee:	bd08      	pop	{r3, pc}
   d75f0:	0003021c 	.word	0x0003021c

000d75f4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d75f4:	2100      	movs	r1, #0
   d75f6:	f7ff bf49 	b.w	d748c <system_delay_ms>
	...

000d75fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d75fc:	4802      	ldr	r0, [pc, #8]	; (d7608 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d75fe:	2300      	movs	r3, #0
   d7600:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d7602:	f7ff bdbb 	b.w	d717c <os_mutex_recursive_create>
   d7606:	bf00      	nop
   d7608:	2003e5b4 	.word	0x2003e5b4

000d760c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d760c:	2200      	movs	r2, #0
   d760e:	6840      	ldr	r0, [r0, #4]
   d7610:	4611      	mov	r1, r2
   d7612:	f7ff bfa7 	b.w	d7564 <network_listening>

000d7616 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7616:	2200      	movs	r2, #0
   d7618:	6840      	ldr	r0, [r0, #4]
   d761a:	4611      	mov	r1, r2
   d761c:	f7ff bfb2 	b.w	d7584 <network_get_listen_timeout>

000d7620 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7620:	6840      	ldr	r0, [r0, #4]
   d7622:	2200      	movs	r2, #0
   d7624:	f7ff bfa6 	b.w	d7574 <network_set_listen_timeout>

000d7628 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7628:	6840      	ldr	r0, [r0, #4]
   d762a:	2200      	movs	r2, #0
   d762c:	f081 0101 	eor.w	r1, r1, #1
   d7630:	f7ff bf90 	b.w	d7554 <network_listen>

000d7634 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7634:	2300      	movs	r3, #0
   d7636:	6840      	ldr	r0, [r0, #4]
   d7638:	461a      	mov	r2, r3
   d763a:	4619      	mov	r1, r3
   d763c:	f7ff bf82 	b.w	d7544 <network_off>

000d7640 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7640:	2300      	movs	r3, #0
   d7642:	6840      	ldr	r0, [r0, #4]
   d7644:	461a      	mov	r2, r3
   d7646:	4619      	mov	r1, r3
   d7648:	f7ff bf74 	b.w	d7534 <network_on>

000d764c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d764c:	2200      	movs	r2, #0
   d764e:	6840      	ldr	r0, [r0, #4]
   d7650:	4611      	mov	r1, r2
   d7652:	f7ff bf67 	b.w	d7524 <network_ready>

000d7656 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7656:	2200      	movs	r2, #0
   d7658:	6840      	ldr	r0, [r0, #4]
   d765a:	4611      	mov	r1, r2
   d765c:	f7ff bf52 	b.w	d7504 <network_connecting>

000d7660 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7660:	6840      	ldr	r0, [r0, #4]
   d7662:	2200      	movs	r2, #0
   d7664:	2102      	movs	r1, #2
   d7666:	f7ff bf55 	b.w	d7514 <network_disconnect>

000d766a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d766a:	2300      	movs	r3, #0
   d766c:	6840      	ldr	r0, [r0, #4]
   d766e:	461a      	mov	r2, r3
   d7670:	f7ff bf40 	b.w	d74f4 <network_connect>

000d7674 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7674:	4b02      	ldr	r3, [pc, #8]	; (d7680 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7676:	2203      	movs	r2, #3
   d7678:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d767a:	4a02      	ldr	r2, [pc, #8]	; (d7684 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d767c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d767e:	4770      	bx	lr
   d7680:	2003e5b8 	.word	0x2003e5b8
   d7684:	000d9234 	.word	0x000d9234

000d7688 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7688:	4770      	bx	lr

000d768a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d768a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d768c:	4606      	mov	r6, r0
   d768e:	4615      	mov	r5, r2
   d7690:	460c      	mov	r4, r1
   d7692:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7694:	42bc      	cmp	r4, r7
   d7696:	d006      	beq.n	d76a6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7698:	6833      	ldr	r3, [r6, #0]
   d769a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d769e:	689b      	ldr	r3, [r3, #8]
   d76a0:	4630      	mov	r0, r6
   d76a2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d76a4:	e7f6      	b.n	d7694 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d76a6:	4628      	mov	r0, r5
   d76a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d76aa <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d76aa:	7c00      	ldrb	r0, [r0, #16]
   d76ac:	2200      	movs	r2, #0
   d76ae:	f7ff bdbd 	b.w	d722c <hal_i2c_write>

000d76b2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d76b2:	7c00      	ldrb	r0, [r0, #16]
   d76b4:	2100      	movs	r1, #0
   d76b6:	f7ff bdc1 	b.w	d723c <hal_i2c_available>

000d76ba <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d76ba:	7c00      	ldrb	r0, [r0, #16]
   d76bc:	2100      	movs	r1, #0
   d76be:	f7ff bdc5 	b.w	d724c <hal_i2c_read>

000d76c2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d76c2:	7c00      	ldrb	r0, [r0, #16]
   d76c4:	2100      	movs	r1, #0
   d76c6:	f7ff bdc9 	b.w	d725c <hal_i2c_peek>

000d76ca <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d76ca:	7c00      	ldrb	r0, [r0, #16]
   d76cc:	2100      	movs	r1, #0
   d76ce:	f7ff bdcd 	b.w	d726c <hal_i2c_flush>

000d76d2 <_ZN7TwoWireD0Ev>:
   d76d2:	b510      	push	{r4, lr}
   d76d4:	2114      	movs	r1, #20
   d76d6:	4604      	mov	r4, r0
   d76d8:	f000 fe42 	bl	d8360 <_ZdlPvj>
   d76dc:	4620      	mov	r0, r4
   d76de:	bd10      	pop	{r4, pc}

000d76e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d76e0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d76e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d76e6:	4604      	mov	r4, r0
   d76e8:	4608      	mov	r0, r1
   d76ea:	2100      	movs	r1, #0
   d76ec:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d76f0:	4b03      	ldr	r3, [pc, #12]	; (d7700 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d76f2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d76f4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d76f6:	4611      	mov	r1, r2
   d76f8:	f7ff fdc8 	bl	d728c <hal_i2c_init>
}
   d76fc:	4620      	mov	r0, r4
   d76fe:	bd10      	pop	{r4, pc}
   d7700:	000d9270 	.word	0x000d9270

000d7704 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7704:	2300      	movs	r3, #0
   d7706:	7c00      	ldrb	r0, [r0, #16]
   d7708:	461a      	mov	r2, r3
   d770a:	4619      	mov	r1, r3
   d770c:	f7ff bd76 	b.w	d71fc <hal_i2c_begin>

000d7710 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7710:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d7712:	2200      	movs	r2, #0
   d7714:	2314      	movs	r3, #20
   d7716:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d771a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d771e:	780b      	ldrb	r3, [r1, #0]
   d7720:	f88d 3008 	strb.w	r3, [sp, #8]
   d7724:	684b      	ldr	r3, [r1, #4]
   d7726:	9303      	str	r3, [sp, #12]
   d7728:	68cb      	ldr	r3, [r1, #12]
   d772a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d772c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d772e:	7a0b      	ldrb	r3, [r1, #8]
   d7730:	9305      	str	r3, [sp, #20]
   d7732:	a901      	add	r1, sp, #4
   d7734:	f7ff fdb2 	bl	d729c <hal_i2c_request_ex>
}
   d7738:	b007      	add	sp, #28
   d773a:	f85d fb04 	ldr.w	pc, [sp], #4

000d773e <_ZN7TwoWire11requestFromEhjh>:
{
   d773e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7740:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7742:	f88d 1000 	strb.w	r1, [sp]
   d7746:	f04f 0164 	mov.w	r1, #100	; 0x64
   d774a:	9103      	str	r1, [sp, #12]
   d774c:	bf18      	it	ne
   d774e:	2301      	movne	r3, #1
   d7750:	4669      	mov	r1, sp
    size_ = size;
   d7752:	9201      	str	r2, [sp, #4]
   d7754:	f88d 3008 	strb.w	r3, [sp, #8]
   d7758:	f7ff ffda 	bl	d7710 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d775c:	b005      	add	sp, #20
   d775e:	f85d fb04 	ldr.w	pc, [sp], #4

000d7762 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d7762:	2301      	movs	r3, #1
   d7764:	f7ff bfeb 	b.w	d773e <_ZN7TwoWire11requestFromEhjh>

000d7768 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7768:	7c00      	ldrb	r0, [r0, #16]
   d776a:	2200      	movs	r2, #0
   d776c:	f7ff bd4e 	b.w	d720c <hal_i2c_begin_transmission>

000d7770 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7770:	b2c9      	uxtb	r1, r1
   d7772:	f7ff bff9 	b.w	d7768 <_ZN7TwoWire17beginTransmissionEh>

000d7776 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7776:	7c00      	ldrb	r0, [r0, #16]
   d7778:	2200      	movs	r2, #0
   d777a:	f7ff bd4f 	b.w	d721c <hal_i2c_end_transmission>

000d777e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d777e:	2101      	movs	r1, #1
   d7780:	f7ff bff9 	b.w	d7776 <_ZN7TwoWire15endTransmissionEh>

000d7784 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7784:	4770      	bx	lr

000d7786 <_ZN9IPAddressD0Ev>:
   d7786:	b510      	push	{r4, lr}
   d7788:	2118      	movs	r1, #24
   d778a:	4604      	mov	r4, r0
   d778c:	f000 fde8 	bl	d8360 <_ZdlPvj>
   d7790:	4620      	mov	r0, r4
   d7792:	bd10      	pop	{r4, pc}

000d7794 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7794:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7796:	7d03      	ldrb	r3, [r0, #20]
   d7798:	2b06      	cmp	r3, #6
{
   d779a:	b08d      	sub	sp, #52	; 0x34
   d779c:	460e      	mov	r6, r1
   d779e:	f100 0704 	add.w	r7, r0, #4
   d77a2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d77a6:	d012      	beq.n	d77ce <_ZNK9IPAddress7printToER5Print+0x3a>
   d77a8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d77ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d77b0:	220a      	movs	r2, #10
   d77b2:	4630      	mov	r0, r6
   d77b4:	f000 f945 	bl	d7a42 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d77b8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d77ba:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d77bc:	d019      	beq.n	d77f2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d77be:	2c00      	cmp	r4, #0
   d77c0:	d0f4      	beq.n	d77ac <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d77c2:	212e      	movs	r1, #46	; 0x2e
   d77c4:	4630      	mov	r0, r6
   d77c6:	f000 f921 	bl	d7a0c <_ZN5Print5printEc>
   d77ca:	4404      	add	r4, r0
   d77cc:	e7ee      	b.n	d77ac <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d77ce:	232f      	movs	r3, #47	; 0x2f
   d77d0:	466a      	mov	r2, sp
   d77d2:	4639      	mov	r1, r7
   d77d4:	200a      	movs	r0, #10
		buf[0] = 0;
   d77d6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d77da:	f7ff fd67 	bl	d72ac <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d77de:	4668      	mov	r0, sp
   d77e0:	f001 fb14 	bl	d8e0c <strlen>
   d77e4:	6833      	ldr	r3, [r6, #0]
   d77e6:	4602      	mov	r2, r0
   d77e8:	68db      	ldr	r3, [r3, #12]
   d77ea:	4669      	mov	r1, sp
   d77ec:	4630      	mov	r0, r6
   d77ee:	4798      	blx	r3
   d77f0:	4604      	mov	r4, r0
    }
    return n;
}
   d77f2:	4620      	mov	r0, r4
   d77f4:	b00d      	add	sp, #52	; 0x34
   d77f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d77f8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d77f8:	b510      	push	{r4, lr}
   d77fa:	4b05      	ldr	r3, [pc, #20]	; (d7810 <_ZN9IPAddressC1Ev+0x18>)
   d77fc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d77fe:	2211      	movs	r2, #17
   d7800:	f840 3b04 	str.w	r3, [r0], #4
   d7804:	2100      	movs	r1, #0
   d7806:	f001 fad5 	bl	d8db4 <memset>
}
   d780a:	4620      	mov	r0, r4
   d780c:	bd10      	pop	{r4, pc}
   d780e:	bf00      	nop
   d7810:	000d9298 	.word	0x000d9298

000d7814 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7814:	4603      	mov	r3, r0
   d7816:	4a07      	ldr	r2, [pc, #28]	; (d7834 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7818:	b510      	push	{r4, lr}
   d781a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d781e:	f101 0210 	add.w	r2, r1, #16
   d7822:	f851 4b04 	ldr.w	r4, [r1], #4
   d7826:	f843 4b04 	str.w	r4, [r3], #4
   d782a:	4291      	cmp	r1, r2
   d782c:	d1f9      	bne.n	d7822 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d782e:	780a      	ldrb	r2, [r1, #0]
   d7830:	701a      	strb	r2, [r3, #0]
}
   d7832:	bd10      	pop	{r4, pc}
   d7834:	000d9298 	.word	0x000d9298

000d7838 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7838:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d783a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d783e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7842:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7846:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d784a:	2304      	movs	r3, #4
   d784c:	6041      	str	r1, [r0, #4]
   d784e:	7503      	strb	r3, [r0, #20]
}
   d7850:	bd10      	pop	{r4, pc}

000d7852 <_ZN9IPAddressaSEPKh>:
{
   d7852:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7854:	78cb      	ldrb	r3, [r1, #3]
   d7856:	9300      	str	r3, [sp, #0]
   d7858:	788b      	ldrb	r3, [r1, #2]
   d785a:	784a      	ldrb	r2, [r1, #1]
   d785c:	7809      	ldrb	r1, [r1, #0]
   d785e:	f7ff ffeb 	bl	d7838 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7862:	b002      	add	sp, #8
   d7864:	bd10      	pop	{r4, pc}
	...

000d7868 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7868:	4b01      	ldr	r3, [pc, #4]	; (d7870 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d786a:	4a02      	ldr	r2, [pc, #8]	; (d7874 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d786c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d786e:	4770      	bx	lr
   d7870:	2003e5c0 	.word	0x2003e5c0
   d7874:	000d92a4 	.word	0x000d92a4

000d7878 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7878:	2300      	movs	r3, #0
   d787a:	6840      	ldr	r0, [r0, #4]
   d787c:	461a      	mov	r2, r3
   d787e:	f7ff be39 	b.w	d74f4 <network_connect>

000d7882 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7882:	6840      	ldr	r0, [r0, #4]
   d7884:	2200      	movs	r2, #0
   d7886:	2102      	movs	r1, #2
   d7888:	f7ff be44 	b.w	d7514 <network_disconnect>

000d788c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d788c:	2200      	movs	r2, #0
   d788e:	6840      	ldr	r0, [r0, #4]
   d7890:	4611      	mov	r1, r2
   d7892:	f7ff be37 	b.w	d7504 <network_connecting>

000d7896 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7896:	2200      	movs	r2, #0
   d7898:	6840      	ldr	r0, [r0, #4]
   d789a:	4611      	mov	r1, r2
   d789c:	f7ff be42 	b.w	d7524 <network_ready>

000d78a0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d78a0:	2300      	movs	r3, #0
   d78a2:	6840      	ldr	r0, [r0, #4]
   d78a4:	461a      	mov	r2, r3
   d78a6:	4619      	mov	r1, r3
   d78a8:	f7ff be44 	b.w	d7534 <network_on>

000d78ac <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d78ac:	2300      	movs	r3, #0
   d78ae:	6840      	ldr	r0, [r0, #4]
   d78b0:	461a      	mov	r2, r3
   d78b2:	4619      	mov	r1, r3
   d78b4:	f7ff be46 	b.w	d7544 <network_off>

000d78b8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d78b8:	6840      	ldr	r0, [r0, #4]
   d78ba:	2100      	movs	r1, #0
   d78bc:	f7ff be6a 	b.w	d7594 <network_is_on>

000d78c0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d78c0:	6840      	ldr	r0, [r0, #4]
   d78c2:	2100      	movs	r1, #0
   d78c4:	f7ff be6e 	b.w	d75a4 <network_is_off>

000d78c8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d78c8:	6840      	ldr	r0, [r0, #4]
   d78ca:	2200      	movs	r2, #0
   d78cc:	f081 0101 	eor.w	r1, r1, #1
   d78d0:	f7ff be40 	b.w	d7554 <network_listen>

000d78d4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d78d4:	6840      	ldr	r0, [r0, #4]
   d78d6:	2200      	movs	r2, #0
   d78d8:	f7ff be4c 	b.w	d7574 <network_set_listen_timeout>

000d78dc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d78dc:	2200      	movs	r2, #0
   d78de:	6840      	ldr	r0, [r0, #4]
   d78e0:	4611      	mov	r1, r2
   d78e2:	f7ff be4f 	b.w	d7584 <network_get_listen_timeout>

000d78e6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d78e6:	2200      	movs	r2, #0
   d78e8:	6840      	ldr	r0, [r0, #4]
   d78ea:	4611      	mov	r1, r2
   d78ec:	f7ff be3a 	b.w	d7564 <network_listening>

000d78f0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d78f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d78f4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d78f6:	b095      	sub	sp, #84	; 0x54
   d78f8:	4616      	mov	r6, r2
   d78fa:	460d      	mov	r5, r1
   d78fc:	4607      	mov	r7, r0
    IPAddress addr;
   d78fe:	f7ff ff7b 	bl	d77f8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7902:	4621      	mov	r1, r4
   d7904:	2218      	movs	r2, #24
   d7906:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7908:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d790a:	f001 fa53 	bl	d8db4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d790e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7910:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7914:	4621      	mov	r1, r4
   d7916:	466b      	mov	r3, sp
   d7918:	aa0c      	add	r2, sp, #48	; 0x30
   d791a:	4630      	mov	r0, r6
   d791c:	f7ff fcd6 	bl	d72cc <netdb_getaddrinfo>
    if (!r) {
   d7920:	4604      	mov	r4, r0
   d7922:	2800      	cmp	r0, #0
   d7924:	d146      	bne.n	d79b4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7926:	4602      	mov	r2, r0
   d7928:	2101      	movs	r1, #1
   d792a:	6868      	ldr	r0, [r5, #4]
   d792c:	f7ff fdfa 	bl	d7524 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7930:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7932:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7934:	4622      	mov	r2, r4
   d7936:	6868      	ldr	r0, [r5, #4]
   d7938:	f7ff fdf4 	bl	d7524 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d793c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d793e:	4681      	mov	r9, r0
        bool ok = false;
   d7940:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7942:	2e00      	cmp	r6, #0
   d7944:	d036      	beq.n	d79b4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d7946:	2900      	cmp	r1, #0
   d7948:	d134      	bne.n	d79b4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d794a:	6873      	ldr	r3, [r6, #4]
   d794c:	2b02      	cmp	r3, #2
   d794e:	d003      	beq.n	d7958 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7950:	2b0a      	cmp	r3, #10
   d7952:	d00b      	beq.n	d796c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7954:	69f6      	ldr	r6, [r6, #28]
   d7956:	e7f4      	b.n	d7942 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7958:	f1b8 0f00 	cmp.w	r8, #0
   d795c:	d004      	beq.n	d7968 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d795e:	6971      	ldr	r1, [r6, #20]
   d7960:	4638      	mov	r0, r7
   d7962:	3104      	adds	r1, #4
   d7964:	f7ff ff75 	bl	d7852 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7968:	4641      	mov	r1, r8
   d796a:	e7f3      	b.n	d7954 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d796c:	f1b9 0f00 	cmp.w	r9, #0
   d7970:	d101      	bne.n	d7976 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7972:	4649      	mov	r1, r9
   d7974:	e7ee      	b.n	d7954 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7976:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7978:	2210      	movs	r2, #16
   d797a:	a801      	add	r0, sp, #4
   d797c:	f001 fa1a 	bl	d8db4 <memset>
                    a.v = 6;
   d7980:	2306      	movs	r3, #6
   d7982:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7986:	ad01      	add	r5, sp, #4
   d7988:	f104 0308 	add.w	r3, r4, #8
   d798c:	3418      	adds	r4, #24
   d798e:	6818      	ldr	r0, [r3, #0]
   d7990:	6859      	ldr	r1, [r3, #4]
   d7992:	462a      	mov	r2, r5
   d7994:	c203      	stmia	r2!, {r0, r1}
   d7996:	3308      	adds	r3, #8
   d7998:	42a3      	cmp	r3, r4
   d799a:	4615      	mov	r5, r2
   d799c:	d1f7      	bne.n	d798e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d799e:	a901      	add	r1, sp, #4
   d79a0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d79a2:	ad07      	add	r5, sp, #28
   d79a4:	f7ff ff36 	bl	d7814 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d79a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d79aa:	1d3c      	adds	r4, r7, #4
   d79ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d79ae:	682b      	ldr	r3, [r5, #0]
   d79b0:	7023      	strb	r3, [r4, #0]
   d79b2:	e7de      	b.n	d7972 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d79b4:	9800      	ldr	r0, [sp, #0]
   d79b6:	f7ff fc81 	bl	d72bc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d79ba:	4638      	mov	r0, r7
   d79bc:	b015      	add	sp, #84	; 0x54
   d79be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d79c4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d79c4:	4b02      	ldr	r3, [pc, #8]	; (d79d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d79c6:	4a03      	ldr	r2, [pc, #12]	; (d79d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d79c8:	601a      	str	r2, [r3, #0]
   d79ca:	2200      	movs	r2, #0
   d79cc:	605a      	str	r2, [r3, #4]

} // spark
   d79ce:	4770      	bx	lr
   d79d0:	2003e5c4 	.word	0x2003e5c4
   d79d4:	000d92b0 	.word	0x000d92b0

000d79d8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d79d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d79da:	4606      	mov	r6, r0
   d79dc:	460d      	mov	r5, r1
  size_t n = 0;
   d79de:	188f      	adds	r7, r1, r2
   d79e0:	2400      	movs	r4, #0
  while (size--) {
   d79e2:	42bd      	cmp	r5, r7
   d79e4:	d00c      	beq.n	d7a00 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d79e6:	6833      	ldr	r3, [r6, #0]
   d79e8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d79ec:	689b      	ldr	r3, [r3, #8]
   d79ee:	4630      	mov	r0, r6
   d79f0:	4798      	blx	r3
     if (chunk>=0)
   d79f2:	1e03      	subs	r3, r0, #0
   d79f4:	db01      	blt.n	d79fa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d79f6:	441c      	add	r4, r3
  while (size--) {
   d79f8:	e7f3      	b.n	d79e2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d79fa:	2c00      	cmp	r4, #0
   d79fc:	bf08      	it	eq
   d79fe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7a00:	4620      	mov	r0, r4
   d7a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7a04 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d7a04:	b508      	push	{r3, lr}
  return write(str);
   d7a06:	f7fe ff35 	bl	d6874 <_ZN5Print5writeEPKc>
}
   d7a0a:	bd08      	pop	{r3, pc}

000d7a0c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d7a0c:	6803      	ldr	r3, [r0, #0]
   d7a0e:	689b      	ldr	r3, [r3, #8]
   d7a10:	4718      	bx	r3

000d7a12 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7a12:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7a14:	210d      	movs	r1, #13
{
   d7a16:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7a18:	f7ff fff8 	bl	d7a0c <_ZN5Print5printEc>
  n += print('\n');
   d7a1c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d7a1e:	4604      	mov	r4, r0
  n += print('\n');
   d7a20:	4628      	mov	r0, r5
   d7a22:	f7ff fff3 	bl	d7a0c <_ZN5Print5printEc>
  return n;
}
   d7a26:	4420      	add	r0, r4
   d7a28:	bd38      	pop	{r3, r4, r5, pc}

000d7a2a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7a2a:	b538      	push	{r3, r4, r5, lr}
   d7a2c:	4605      	mov	r5, r0
  return write(str);
   d7a2e:	f7fe ff21 	bl	d6874 <_ZN5Print5writeEPKc>
   d7a32:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d7a34:	4628      	mov	r0, r5
   d7a36:	f7ff ffec 	bl	d7a12 <_ZN5Print7printlnEv>
  return n;
}
   d7a3a:	4420      	add	r0, r4
   d7a3c:	bd38      	pop	{r3, r4, r5, pc}

000d7a3e <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d7a3e:	f7ff bff4 	b.w	d7a2a <_ZN5Print7printlnEPKc>

000d7a42 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7a42:	b530      	push	{r4, r5, lr}
   d7a44:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7a46:	2300      	movs	r3, #0
   d7a48:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7a4c:	2a01      	cmp	r2, #1
   d7a4e:	bf98      	it	ls
   d7a50:	220a      	movls	r2, #10
   d7a52:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7a54:	460d      	mov	r5, r1
   d7a56:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7a5a:	fb01 5312 	mls	r3, r1, r2, r5
   d7a5e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7a62:	2b09      	cmp	r3, #9
   d7a64:	bf94      	ite	ls
   d7a66:	3330      	addls	r3, #48	; 0x30
   d7a68:	3337      	addhi	r3, #55	; 0x37
   d7a6a:	b2db      	uxtb	r3, r3
  } while(n);
   d7a6c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7a6e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7a72:	d9ef      	bls.n	d7a54 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7a74:	4621      	mov	r1, r4
   d7a76:	f7fe fefd 	bl	d6874 <_ZN5Print5writeEPKc>
}
   d7a7a:	b00b      	add	sp, #44	; 0x2c
   d7a7c:	bd30      	pop	{r4, r5, pc}
	...

000d7a80 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d7a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7a84:	ec55 4b10 	vmov	r4, r5, d0
   d7a88:	4606      	mov	r6, r0
   d7a8a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d7a8c:	ee10 2a10 	vmov	r2, s0
   d7a90:	ee10 0a10 	vmov	r0, s0
   d7a94:	462b      	mov	r3, r5
   d7a96:	4629      	mov	r1, r5
   d7a98:	f001 f8bc 	bl	d8c14 <__aeabi_dcmpun>
   d7a9c:	b140      	cbz	r0, d7ab0 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d7a9e:	4953      	ldr	r1, [pc, #332]	; (d7bec <_ZN5Print10printFloatEdh+0x16c>)
   d7aa0:	4630      	mov	r0, r6
   d7aa2:	f7fe fee7 	bl	d6874 <_ZN5Print5writeEPKc>
   d7aa6:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d7aa8:	4650      	mov	r0, sl
   d7aaa:	b003      	add	sp, #12
   d7aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d7ab0:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d7ab4:	4b4e      	ldr	r3, [pc, #312]	; (d7bf0 <_ZN5Print10printFloatEdh+0x170>)
   d7ab6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7aba:	4620      	mov	r0, r4
   d7abc:	4649      	mov	r1, r9
   d7abe:	f001 f8a9 	bl	d8c14 <__aeabi_dcmpun>
   d7ac2:	b948      	cbnz	r0, d7ad8 <_ZN5Print10printFloatEdh+0x58>
   d7ac4:	4b4a      	ldr	r3, [pc, #296]	; (d7bf0 <_ZN5Print10printFloatEdh+0x170>)
   d7ac6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7aca:	4620      	mov	r0, r4
   d7acc:	4649      	mov	r1, r9
   d7ace:	f001 f883 	bl	d8bd8 <__aeabi_dcmple>
   d7ad2:	b908      	cbnz	r0, d7ad8 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d7ad4:	4947      	ldr	r1, [pc, #284]	; (d7bf4 <_ZN5Print10printFloatEdh+0x174>)
   d7ad6:	e7e3      	b.n	d7aa0 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d7ad8:	4b47      	ldr	r3, [pc, #284]	; (d7bf8 <_ZN5Print10printFloatEdh+0x178>)
   d7ada:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7ade:	4620      	mov	r0, r4
   d7ae0:	4629      	mov	r1, r5
   d7ae2:	f001 f88d 	bl	d8c00 <__aeabi_dcmpgt>
   d7ae6:	b108      	cbz	r0, d7aec <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d7ae8:	4944      	ldr	r1, [pc, #272]	; (d7bfc <_ZN5Print10printFloatEdh+0x17c>)
   d7aea:	e7d9      	b.n	d7aa0 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d7aec:	4b44      	ldr	r3, [pc, #272]	; (d7c00 <_ZN5Print10printFloatEdh+0x180>)
   d7aee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7af2:	4620      	mov	r0, r4
   d7af4:	4629      	mov	r1, r5
   d7af6:	f001 f865 	bl	d8bc4 <__aeabi_dcmplt>
   d7afa:	2800      	cmp	r0, #0
   d7afc:	d1f4      	bne.n	d7ae8 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d7afe:	2200      	movs	r2, #0
   d7b00:	2300      	movs	r3, #0
   d7b02:	4620      	mov	r0, r4
   d7b04:	4629      	mov	r1, r5
   d7b06:	f001 f85d 	bl	d8bc4 <__aeabi_dcmplt>
   d7b0a:	b1d0      	cbz	r0, d7b42 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d7b0c:	212d      	movs	r1, #45	; 0x2d
   d7b0e:	4630      	mov	r0, r6
   d7b10:	f7ff ff7c 	bl	d7a0c <_ZN5Print5printEc>
     number = -number;
   d7b14:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d7b18:	4682      	mov	sl, r0
     number = -number;
   d7b1a:	461d      	mov	r5, r3
  double rounding = 0.5;
   d7b1c:	4939      	ldr	r1, [pc, #228]	; (d7c04 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d7b1e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d7c0c <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d7b22:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d7b26:	2000      	movs	r0, #0
    rounding /= 10.0;
   d7b28:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d7b2c:	fa5f f38b 	uxtb.w	r3, fp
   d7b30:	429f      	cmp	r7, r3
   d7b32:	d908      	bls.n	d7b46 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d7b34:	4642      	mov	r2, r8
   d7b36:	464b      	mov	r3, r9
   d7b38:	f000 fefc 	bl	d8934 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d7b3c:	f10b 0b01 	add.w	fp, fp, #1
   d7b40:	e7f4      	b.n	d7b2c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d7b42:	4682      	mov	sl, r0
   d7b44:	e7ea      	b.n	d7b1c <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d7b46:	4622      	mov	r2, r4
   d7b48:	462b      	mov	r3, r5
   d7b4a:	f000 fc13 	bl	d8374 <__adddf3>
   d7b4e:	460d      	mov	r5, r1
   d7b50:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d7b52:	f001 f89d 	bl	d8c90 <__aeabi_d2uiz>
   d7b56:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d7b58:	f000 fd48 	bl	d85ec <__aeabi_ui2d>
   d7b5c:	4602      	mov	r2, r0
   d7b5e:	460b      	mov	r3, r1
   d7b60:	4620      	mov	r0, r4
   d7b62:	4629      	mov	r1, r5
   d7b64:	f000 fc04 	bl	d8370 <__aeabi_dsub>
        return printNumber(val, base) + t;
   d7b68:	220a      	movs	r2, #10
   d7b6a:	4604      	mov	r4, r0
   d7b6c:	460d      	mov	r5, r1
   d7b6e:	4630      	mov	r0, r6
   d7b70:	4641      	mov	r1, r8
   d7b72:	f7ff ff66 	bl	d7a42 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d7b76:	4482      	add	sl, r0
  if (digits > 0) {
   d7b78:	b127      	cbz	r7, d7b84 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d7b7a:	4923      	ldr	r1, [pc, #140]	; (d7c08 <_ZN5Print10printFloatEdh+0x188>)
   d7b7c:	4630      	mov	r0, r6
   d7b7e:	f7fe fe79 	bl	d6874 <_ZN5Print5writeEPKc>
    n += print(".");
   d7b82:	4482      	add	sl, r0
    remainder *= 10.0;
   d7b84:	f8df 9084 	ldr.w	r9, [pc, #132]	; d7c0c <_ZN5Print10printFloatEdh+0x18c>
   d7b88:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d7b8c:	3f01      	subs	r7, #1
   d7b8e:	b2ff      	uxtb	r7, r7
   d7b90:	2fff      	cmp	r7, #255	; 0xff
   d7b92:	d089      	beq.n	d7aa8 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d7b94:	4642      	mov	r2, r8
   d7b96:	464b      	mov	r3, r9
   d7b98:	4620      	mov	r0, r4
   d7b9a:	4629      	mov	r1, r5
   d7b9c:	f000 fda0 	bl	d86e0 <__aeabi_dmul>
   d7ba0:	4604      	mov	r4, r0
   d7ba2:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d7ba4:	f001 f84c 	bl	d8c40 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d7ba8:	f1b0 0b00 	subs.w	fp, r0, #0
   d7bac:	da1a      	bge.n	d7be4 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d7bae:	212d      	movs	r1, #45	; 0x2d
   d7bb0:	4630      	mov	r0, r6
   d7bb2:	f7ff ff2b 	bl	d7a0c <_ZN5Print5printEc>
            val = -n;
   d7bb6:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d7bba:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d7bbc:	220a      	movs	r2, #10
   d7bbe:	4630      	mov	r0, r6
   d7bc0:	9301      	str	r3, [sp, #4]
   d7bc2:	f7ff ff3e 	bl	d7a42 <_ZN5Print11printNumberEmh>
   d7bc6:	9b01      	ldr	r3, [sp, #4]
   d7bc8:	4418      	add	r0, r3
    n += print(toPrint);
   d7bca:	4482      	add	sl, r0
    remainder -= toPrint;
   d7bcc:	4658      	mov	r0, fp
   d7bce:	f000 fd1d 	bl	d860c <__aeabi_i2d>
   d7bd2:	4602      	mov	r2, r0
   d7bd4:	460b      	mov	r3, r1
   d7bd6:	4620      	mov	r0, r4
   d7bd8:	4629      	mov	r1, r5
   d7bda:	f000 fbc9 	bl	d8370 <__aeabi_dsub>
   d7bde:	4604      	mov	r4, r0
   d7be0:	460d      	mov	r5, r1
  while (digits-- > 0)
   d7be2:	e7d3      	b.n	d7b8c <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d7be4:	4659      	mov	r1, fp
        size_t t = 0;
   d7be6:	2300      	movs	r3, #0
   d7be8:	e7e8      	b.n	d7bbc <_ZN5Print10printFloatEdh+0x13c>
   d7bea:	bf00      	nop
   d7bec:	000d92e4 	.word	0x000d92e4
   d7bf0:	7fefffff 	.word	0x7fefffff
   d7bf4:	000d92e8 	.word	0x000d92e8
   d7bf8:	41efffff 	.word	0x41efffff
   d7bfc:	000d92ec 	.word	0x000d92ec
   d7c00:	c1efffff 	.word	0xc1efffff
   d7c04:	3fe00000 	.word	0x3fe00000
   d7c08:	000d92f0 	.word	0x000d92f0
   d7c0c:	40240000 	.word	0x40240000

000d7c10 <_ZN5Print5printEfi>:
{
   d7c10:	b538      	push	{r3, r4, r5, lr}
   d7c12:	4604      	mov	r4, r0
   d7c14:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d7c18:	b2cd      	uxtb	r5, r1
   d7c1a:	f000 fd09 	bl	d8630 <__aeabi_f2d>
   d7c1e:	ec41 0b10 	vmov	d0, r0, r1
   d7c22:	4629      	mov	r1, r5
   d7c24:	4620      	mov	r0, r4
}
   d7c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d7c2a:	f7ff bf29 	b.w	d7a80 <_ZN5Print10printFloatEdh>

000d7c2e <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d7c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7c32:	b086      	sub	sp, #24
   d7c34:	af00      	add	r7, sp, #0
   d7c36:	4605      	mov	r5, r0
   d7c38:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d7c3a:	1d38      	adds	r0, r7, #4
   d7c3c:	2114      	movs	r1, #20
{
   d7c3e:	4614      	mov	r4, r2
    va_copy(args2, args);
   d7c40:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d7c42:	f7ff fcc7 	bl	d75d4 <vsnprintf>

    if (n<bufsize)
   d7c46:	2813      	cmp	r0, #19
   d7c48:	d80e      	bhi.n	d7c68 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d7c4a:	1d39      	adds	r1, r7, #4
   d7c4c:	4628      	mov	r0, r5
   d7c4e:	f7fe fe11 	bl	d6874 <_ZN5Print5writeEPKc>
   d7c52:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d7c54:	b11e      	cbz	r6, d7c5e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d7c56:	4628      	mov	r0, r5
   d7c58:	f7ff fedb 	bl	d7a12 <_ZN5Print7printlnEv>
   d7c5c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d7c5e:	4620      	mov	r0, r4
   d7c60:	3718      	adds	r7, #24
   d7c62:	46bd      	mov	sp, r7
   d7c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d7c68:	f100 0308 	add.w	r3, r0, #8
   d7c6c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d7c70:	46e8      	mov	r8, sp
        char bigger[n+1];
   d7c72:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d7c76:	4622      	mov	r2, r4
   d7c78:	1c41      	adds	r1, r0, #1
   d7c7a:	683b      	ldr	r3, [r7, #0]
   d7c7c:	4668      	mov	r0, sp
   d7c7e:	f7ff fca9 	bl	d75d4 <vsnprintf>
  return write(str);
   d7c82:	4669      	mov	r1, sp
   d7c84:	4628      	mov	r0, r5
   d7c86:	f7fe fdf5 	bl	d6874 <_ZN5Print5writeEPKc>
   d7c8a:	4604      	mov	r4, r0
   d7c8c:	46c5      	mov	sp, r8
   d7c8e:	e7e1      	b.n	d7c54 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d7c90 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d7c90:	4b01      	ldr	r3, [pc, #4]	; (d7c98 <_GLOBAL__sub_I_RGB+0x8>)
   d7c92:	2200      	movs	r2, #0
   d7c94:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d7c96:	4770      	bx	lr
   d7c98:	2003e5cc 	.word	0x2003e5cc

000d7c9c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d7c9c:	2100      	movs	r1, #0
   d7c9e:	f7ff bb5d 	b.w	d735c <hal_spi_acquire>

000d7ca2 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d7ca2:	2100      	movs	r1, #0
   d7ca4:	f7ff bb62 	b.w	d736c <hal_spi_release>

000d7ca8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d7ca8:	b510      	push	{r4, lr}
   d7caa:	4604      	mov	r4, r0
   d7cac:	4608      	mov	r0, r1
{
    _spi = spi;
   d7cae:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d7cb0:	f7ff fb24 	bl	d72fc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7cb4:	2300      	movs	r3, #0
   d7cb6:	6063      	str	r3, [r4, #4]
}
   d7cb8:	4620      	mov	r0, r4
   d7cba:	bd10      	pop	{r4, pc}

000d7cbc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d7cbc:	b510      	push	{r4, lr}
   d7cbe:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d7cc0:	7800      	ldrb	r0, [r0, #0]
   d7cc2:	f7ff ffeb 	bl	d7c9c <_ZN8SPIClass4lockEv.isra.0>
   d7cc6:	b948      	cbnz	r0, d7cdc <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d7cc8:	7820      	ldrb	r0, [r4, #0]
   d7cca:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d7cce:	f7ff fb05 	bl	d72dc <hal_spi_begin>
        unlock();
   d7cd2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d7cd8:	f7ff bfe3 	b.w	d7ca2 <_ZN8SPIClass6unlockEv.isra.0>
}
   d7cdc:	bd10      	pop	{r4, pc}

000d7cde <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d7cde:	7800      	ldrb	r0, [r0, #0]
   d7ce0:	f7ff bfdf 	b.w	d7ca2 <_ZN8SPIClass6unlockEv.isra.0>

000d7ce4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d7ce4:	0840      	lsrs	r0, r0, #1
{
   d7ce6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d7ce8:	6018      	str	r0, [r3, #0]
   d7cea:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d7cec:	6818      	ldr	r0, [r3, #0]
   d7cee:	4288      	cmp	r0, r1
   d7cf0:	b2e5      	uxtb	r5, r4
   d7cf2:	d906      	bls.n	d7d02 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d7cf4:	3401      	adds	r4, #1
   d7cf6:	2c08      	cmp	r4, #8
   d7cf8:	d002      	beq.n	d7d00 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d7cfa:	0840      	lsrs	r0, r0, #1
   d7cfc:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d7cfe:	e7f5      	b.n	d7cec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d7d00:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d7d02:	4b02      	ldr	r3, [pc, #8]	; (d7d0c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d7d04:	5d5b      	ldrb	r3, [r3, r5]
   d7d06:	7013      	strb	r3, [r2, #0]
}
   d7d08:	bd30      	pop	{r4, r5, pc}
   d7d0a:	bf00      	nop
   d7d0c:	000d92f2 	.word	0x000d92f2

000d7d10 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d7d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7d14:	4606      	mov	r6, r0
   d7d16:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d7d18:	7800      	ldrb	r0, [r0, #0]
{
   d7d1a:	460c      	mov	r4, r1
    CHECK(lock());
   d7d1c:	f7ff ffbe 	bl	d7c9c <_ZN8SPIClass4lockEv.isra.0>
   d7d20:	2800      	cmp	r0, #0
   d7d22:	db1b      	blt.n	d7d5c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d7d24:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d7d26:	2214      	movs	r2, #20
   d7d28:	2100      	movs	r1, #0
   d7d2a:	a809      	add	r0, sp, #36	; 0x24
   d7d2c:	f001 f842 	bl	d8db4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d7d30:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d7d32:	2200      	movs	r2, #0
   d7d34:	a909      	add	r1, sp, #36	; 0x24
   d7d36:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d7d38:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d7d3c:	f7ff faee 	bl	d731c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d7d40:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d7d44:	b113      	cbz	r3, d7d4c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d7d46:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d7d4a:	b155      	cbz	r5, d7d62 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d7d4c:	2700      	movs	r7, #0
   d7d4e:	46b9      	mov	r9, r7
   d7d50:	46b8      	mov	r8, r7
   d7d52:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d7d54:	7923      	ldrb	r3, [r4, #4]
   d7d56:	b15d      	cbz	r5, d7d70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d7d58:	b1c3      	cbz	r3, d7d8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d7d5a:	2000      	movs	r0, #0
}
   d7d5c:	b00f      	add	sp, #60	; 0x3c
   d7d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d7d62:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d7d66:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d7d6a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d7d6e:	e7f1      	b.n	d7d54 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d7d70:	2b00      	cmp	r3, #0
   d7d72:	d135      	bne.n	d7de0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d7d74:	68a3      	ldr	r3, [r4, #8]
   d7d76:	4543      	cmp	r3, r8
   d7d78:	d108      	bne.n	d7d8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d7d7a:	f88d 9020 	strb.w	r9, [sp, #32]
   d7d7e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d7d82:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d7d86:	89a3      	ldrh	r3, [r4, #12]
   d7d88:	429a      	cmp	r2, r3
   d7d8a:	d0e6      	beq.n	d7d5a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d7d8c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d7d8e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d7d90:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d7d94:	980a      	ldr	r0, [sp, #40]	; 0x28
   d7d96:	ab04      	add	r3, sp, #16
   d7d98:	f10d 020f 	add.w	r2, sp, #15
   d7d9c:	f7ff ffa2 	bl	d7ce4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d7da0:	7921      	ldrb	r1, [r4, #4]
   d7da2:	b985      	cbnz	r5, d7dc6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d7da4:	b989      	cbnz	r1, d7dca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d7da6:	68a3      	ldr	r3, [r4, #8]
   d7da8:	4543      	cmp	r3, r8
   d7daa:	d30e      	bcc.n	d7dca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d7dac:	f88d 9020 	strb.w	r9, [sp, #32]
   d7db0:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d7db4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d7db8:	89a3      	ldrh	r3, [r4, #12]
   d7dba:	429a      	cmp	r2, r3
   d7dbc:	d105      	bne.n	d7dca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d7dbe:	9b04      	ldr	r3, [sp, #16]
   d7dc0:	4543      	cmp	r3, r8
   d7dc2:	d102      	bne.n	d7dca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d7dc4:	e7c9      	b.n	d7d5a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d7dc6:	2900      	cmp	r1, #0
   d7dc8:	d1f9      	bne.n	d7dbe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d7dca:	2300      	movs	r3, #0
   d7dcc:	9301      	str	r3, [sp, #4]
   d7dce:	7b63      	ldrb	r3, [r4, #13]
   d7dd0:	9300      	str	r3, [sp, #0]
   d7dd2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d7dd6:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d7dd8:	7830      	ldrb	r0, [r6, #0]
   d7dda:	f7ff fab7 	bl	d734c <hal_spi_set_settings>
   d7dde:	e7bc      	b.n	d7d5a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d7de0:	e9cd 5500 	strd	r5, r5, [sp]
   d7de4:	462b      	mov	r3, r5
   d7de6:	462a      	mov	r2, r5
   d7de8:	2101      	movs	r1, #1
   d7dea:	e7f5      	b.n	d7dd8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d7dec <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d7dec:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d7dee:	7800      	ldrb	r0, [r0, #0]
   d7df0:	f7ff fa7c 	bl	d72ec <hal_spi_transfer>
}
   d7df4:	b2c0      	uxtb	r0, r0
   d7df6:	bd08      	pop	{r3, pc}

000d7df8 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d7df8:	b530      	push	{r4, r5, lr}
   d7dfa:	b087      	sub	sp, #28
   d7dfc:	4604      	mov	r4, r0
   d7dfe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   d7e00:	9500      	str	r5, [sp, #0]
   d7e02:	7800      	ldrb	r0, [r0, #0]
   d7e04:	f7ff fa92 	bl	d732c <hal_spi_transfer_dma>
    if (user_callback == NULL)
   d7e08:	b93d      	cbnz	r5, d7e1a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   d7e0a:	7820      	ldrb	r0, [r4, #0]
   d7e0c:	a902      	add	r1, sp, #8
   d7e0e:	f7ff fa95 	bl	d733c <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   d7e12:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d7e16:	07db      	lsls	r3, r3, #31
   d7e18:	d4f7      	bmi.n	d7e0a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
   d7e1a:	b007      	add	sp, #28
   d7e1c:	bd30      	pop	{r4, r5, pc}
	...

000d7e20 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d7e20:	4b05      	ldr	r3, [pc, #20]	; (d7e38 <_GLOBAL__sub_I_System+0x18>)
   d7e22:	2202      	movs	r2, #2
   d7e24:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7e26:	4b05      	ldr	r3, [pc, #20]	; (d7e3c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d7e28:	4a05      	ldr	r2, [pc, #20]	; (d7e40 <_GLOBAL__sub_I_System+0x20>)
   d7e2a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d7e2c:	2000      	movs	r0, #0
   d7e2e:	6018      	str	r0, [r3, #0]
   d7e30:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d7e32:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7e34:	f7ff bb22 	b.w	d747c <set_system_mode>
   d7e38:	2003e5e8 	.word	0x2003e5e8
   d7e3c:	2003e5dc 	.word	0x2003e5dc
   d7e40:	ffff0000 	.word	0xffff0000

000d7e44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7e44:	4b02      	ldr	r3, [pc, #8]	; (d7e50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7e46:	681a      	ldr	r2, [r3, #0]
   d7e48:	4b02      	ldr	r3, [pc, #8]	; (d7e54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7e4a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7e4c:	4770      	bx	lr
   d7e4e:	bf00      	nop
   d7e50:	2003e034 	.word	0x2003e034
   d7e54:	2003e5ec 	.word	0x2003e5ec

000d7e58 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7e58:	4770      	bx	lr

000d7e5a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7e5a:	7441      	strb	r1, [r0, #17]
}
   d7e5c:	4770      	bx	lr

000d7e5e <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7e5e:	4770      	bx	lr

000d7e60 <_ZN11USARTSerial17availableForWriteEv>:
{
   d7e60:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7e62:	7c00      	ldrb	r0, [r0, #16]
   d7e64:	f7ff fac2 	bl	d73ec <hal_usart_available_data_for_write>
}
   d7e68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7e6c:	bd08      	pop	{r3, pc}

000d7e6e <_ZN11USARTSerial9availableEv>:
{
   d7e6e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7e70:	7c00      	ldrb	r0, [r0, #16]
   d7e72:	f7ff fa93 	bl	d739c <hal_usart_available>
}
   d7e76:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7e7a:	bd08      	pop	{r3, pc}

000d7e7c <_ZN11USARTSerial4peekEv>:
{
   d7e7c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7e7e:	7c00      	ldrb	r0, [r0, #16]
   d7e80:	f7ff fa9c 	bl	d73bc <hal_usart_peek>
}
   d7e84:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7e88:	bd08      	pop	{r3, pc}

000d7e8a <_ZN11USARTSerial4readEv>:
{
   d7e8a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7e8c:	7c00      	ldrb	r0, [r0, #16]
   d7e8e:	f7ff fa8d 	bl	d73ac <hal_usart_read>
}
   d7e92:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7e96:	bd08      	pop	{r3, pc}

000d7e98 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d7e98:	7c00      	ldrb	r0, [r0, #16]
   d7e9a:	f7ff ba97 	b.w	d73cc <hal_usart_flush>

000d7e9e <_ZN11USARTSerial5writeEh>:
{
   d7e9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7ea0:	7c45      	ldrb	r5, [r0, #17]
{
   d7ea2:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7ea4:	b12d      	cbz	r5, d7eb2 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d7ea6:	7c20      	ldrb	r0, [r4, #16]
}
   d7ea8:	b003      	add	sp, #12
   d7eaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7eae:	f7ff ba6d 	b.w	d738c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7eb2:	7c00      	ldrb	r0, [r0, #16]
   d7eb4:	9101      	str	r1, [sp, #4]
   d7eb6:	f7ff fa99 	bl	d73ec <hal_usart_available_data_for_write>
   d7eba:	2800      	cmp	r0, #0
   d7ebc:	9901      	ldr	r1, [sp, #4]
   d7ebe:	dcf2      	bgt.n	d7ea6 <_ZN11USARTSerial5writeEh+0x8>
}
   d7ec0:	4628      	mov	r0, r5
   d7ec2:	b003      	add	sp, #12
   d7ec4:	bd30      	pop	{r4, r5, pc}

000d7ec6 <_ZN11USARTSerialD0Ev>:
   d7ec6:	b510      	push	{r4, lr}
   d7ec8:	2114      	movs	r1, #20
   d7eca:	4604      	mov	r4, r0
   d7ecc:	f000 fa48 	bl	d8360 <_ZdlPvj>
   d7ed0:	4620      	mov	r0, r4
   d7ed2:	bd10      	pop	{r4, pc}

000d7ed4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7ed4:	b510      	push	{r4, lr}
   d7ed6:	f04f 0c00 	mov.w	ip, #0
   d7eda:	4604      	mov	r4, r0
   d7edc:	4608      	mov	r0, r1
   d7ede:	4611      	mov	r1, r2
   d7ee0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7ee4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7ee8:	4a04      	ldr	r2, [pc, #16]	; (d7efc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7eea:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7eec:	2201      	movs	r2, #1
  _serial = serial;
   d7eee:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7ef0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7ef2:	461a      	mov	r2, r3
   d7ef4:	f7ff fa42 	bl	d737c <hal_usart_init>
}
   d7ef8:	4620      	mov	r0, r4
   d7efa:	bd10      	pop	{r4, pc}
   d7efc:	000d9320 	.word	0x000d9320

000d7f00 <_Z22__fetch_global_Serial1v>:
{
   d7f00:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7f02:	4c0d      	ldr	r4, [pc, #52]	; (d7f38 <_Z22__fetch_global_Serial1v+0x38>)
   d7f04:	7821      	ldrb	r1, [r4, #0]
   d7f06:	f3bf 8f5b 	dmb	ish
   d7f0a:	f011 0101 	ands.w	r1, r1, #1
   d7f0e:	d110      	bne.n	d7f32 <_Z22__fetch_global_Serial1v+0x32>
   d7f10:	4620      	mov	r0, r4
   d7f12:	9101      	str	r1, [sp, #4]
   d7f14:	f7fc f8c5 	bl	d40a2 <__cxa_guard_acquire>
   d7f18:	9901      	ldr	r1, [sp, #4]
   d7f1a:	b150      	cbz	r0, d7f32 <_Z22__fetch_global_Serial1v+0x32>
   d7f1c:	4b07      	ldr	r3, [pc, #28]	; (d7f3c <_Z22__fetch_global_Serial1v+0x3c>)
   d7f1e:	4a08      	ldr	r2, [pc, #32]	; (d7f40 <_Z22__fetch_global_Serial1v+0x40>)
   d7f20:	4808      	ldr	r0, [pc, #32]	; (d7f44 <_Z22__fetch_global_Serial1v+0x44>)
   d7f22:	f7ff ffd7 	bl	d7ed4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7f26:	4620      	mov	r0, r4
   d7f28:	f7fc f8c0 	bl	d40ac <__cxa_guard_release>
   d7f2c:	4806      	ldr	r0, [pc, #24]	; (d7f48 <_Z22__fetch_global_Serial1v+0x48>)
   d7f2e:	f000 ff1f 	bl	d8d70 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7f32:	4804      	ldr	r0, [pc, #16]	; (d7f44 <_Z22__fetch_global_Serial1v+0x44>)
   d7f34:	b002      	add	sp, #8
   d7f36:	bd10      	pop	{r4, pc}
   d7f38:	2003e5f0 	.word	0x2003e5f0
   d7f3c:	2003e678 	.word	0x2003e678
   d7f40:	2003e5f4 	.word	0x2003e5f4
   d7f44:	2003e6fc 	.word	0x2003e6fc
   d7f48:	000d7e5f 	.word	0x000d7e5f

000d7f4c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7f4c:	7441      	strb	r1, [r0, #17]
}
   d7f4e:	4770      	bx	lr

000d7f50 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7f50:	4770      	bx	lr

000d7f52 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7f52:	4770      	bx	lr

000d7f54 <_ZN9USBSerial4readEv>:
{
   d7f54:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7f56:	2100      	movs	r1, #0
   d7f58:	7c00      	ldrb	r0, [r0, #16]
   d7f5a:	f7ff fa6f 	bl	d743c <HAL_USB_USART_Receive_Data>
}
   d7f5e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7f62:	bd08      	pop	{r3, pc}

000d7f64 <_ZN9USBSerial4peekEv>:
{
   d7f64:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7f66:	2101      	movs	r1, #1
   d7f68:	7c00      	ldrb	r0, [r0, #16]
   d7f6a:	f7ff fa67 	bl	d743c <HAL_USB_USART_Receive_Data>
}
   d7f6e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7f72:	bd08      	pop	{r3, pc}

000d7f74 <_ZN9USBSerial17availableForWriteEv>:
{
   d7f74:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7f76:	7c00      	ldrb	r0, [r0, #16]
   d7f78:	f7ff fa58 	bl	d742c <HAL_USB_USART_Available_Data_For_Write>
}
   d7f7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7f80:	bd08      	pop	{r3, pc}

000d7f82 <_ZN9USBSerial9availableEv>:
{
   d7f82:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7f84:	7c00      	ldrb	r0, [r0, #16]
   d7f86:	f7ff fa49 	bl	d741c <HAL_USB_USART_Available_Data>
}
   d7f8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7f8e:	bd08      	pop	{r3, pc}

000d7f90 <_ZN9USBSerial5writeEh>:
{
   d7f90:	b513      	push	{r0, r1, r4, lr}
   d7f92:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7f94:	7c00      	ldrb	r0, [r0, #16]
{
   d7f96:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7f98:	f7ff fa48 	bl	d742c <HAL_USB_USART_Available_Data_For_Write>
   d7f9c:	2800      	cmp	r0, #0
   d7f9e:	9901      	ldr	r1, [sp, #4]
   d7fa0:	dc01      	bgt.n	d7fa6 <_ZN9USBSerial5writeEh+0x16>
   d7fa2:	7c60      	ldrb	r0, [r4, #17]
   d7fa4:	b120      	cbz	r0, d7fb0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7fa6:	7c20      	ldrb	r0, [r4, #16]
   d7fa8:	f7ff fa50 	bl	d744c <HAL_USB_USART_Send_Data>
   d7fac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d7fb0:	b002      	add	sp, #8
   d7fb2:	bd10      	pop	{r4, pc}

000d7fb4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d7fb4:	7c00      	ldrb	r0, [r0, #16]
   d7fb6:	f7ff ba51 	b.w	d745c <HAL_USB_USART_Flush_Data>

000d7fba <_ZN9USBSerialD0Ev>:
   d7fba:	b510      	push	{r4, lr}
   d7fbc:	2114      	movs	r1, #20
   d7fbe:	4604      	mov	r4, r0
   d7fc0:	f000 f9ce 	bl	d8360 <_ZdlPvj>
   d7fc4:	4620      	mov	r0, r4
   d7fc6:	bd10      	pop	{r4, pc}

000d7fc8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7fc8:	b510      	push	{r4, lr}
   d7fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7fce:	4604      	mov	r4, r0
   d7fd0:	4608      	mov	r0, r1
   d7fd2:	2100      	movs	r1, #0
   d7fd4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7fd8:	4b04      	ldr	r3, [pc, #16]	; (d7fec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7fda:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7fdc:	2301      	movs	r3, #1
  _serial = serial;
   d7fde:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7fe0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7fe2:	4611      	mov	r1, r2
   d7fe4:	f7ff fa0a 	bl	d73fc <HAL_USB_USART_Init>
}
   d7fe8:	4620      	mov	r0, r4
   d7fea:	bd10      	pop	{r4, pc}
   d7fec:	000d9350 	.word	0x000d9350

000d7ff0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7ff0:	7c00      	ldrb	r0, [r0, #16]
   d7ff2:	2200      	movs	r2, #0
   d7ff4:	f7ff ba0a 	b.w	d740c <HAL_USB_USART_Begin>

000d7ff8 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   d7ff8:	7c00      	ldrb	r0, [r0, #16]
   d7ffa:	f7ff ba37 	b.w	d746c <HAL_USB_USART_Is_Enabled>

000d7ffe <_ZN9USBSerialcvbEv>:
  return isEnabled();
   d7ffe:	f7ff bffb 	b.w	d7ff8 <_ZN9USBSerial9isEnabledEv>

000d8002 <_Z19acquireSerialBufferv>:
{
   d8002:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8004:	2214      	movs	r2, #20
{
   d8006:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8008:	2100      	movs	r1, #0
   d800a:	f000 fed3 	bl	d8db4 <memset>
}
   d800e:	4620      	mov	r0, r4
   d8010:	bd10      	pop	{r4, pc}
	...

000d8014 <_Z16_fetch_usbserialv>:
{
   d8014:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8016:	4c0f      	ldr	r4, [pc, #60]	; (d8054 <_Z16_fetch_usbserialv+0x40>)
{
   d8018:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d801a:	a803      	add	r0, sp, #12
   d801c:	f7ff fff1 	bl	d8002 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8020:	7821      	ldrb	r1, [r4, #0]
   d8022:	f3bf 8f5b 	dmb	ish
   d8026:	f011 0101 	ands.w	r1, r1, #1
   d802a:	d10f      	bne.n	d804c <_Z16_fetch_usbserialv+0x38>
   d802c:	4620      	mov	r0, r4
   d802e:	9101      	str	r1, [sp, #4]
   d8030:	f7fc f837 	bl	d40a2 <__cxa_guard_acquire>
   d8034:	9901      	ldr	r1, [sp, #4]
   d8036:	b148      	cbz	r0, d804c <_Z16_fetch_usbserialv+0x38>
   d8038:	aa03      	add	r2, sp, #12
   d803a:	4807      	ldr	r0, [pc, #28]	; (d8058 <_Z16_fetch_usbserialv+0x44>)
   d803c:	f7ff ffc4 	bl	d7fc8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8040:	4620      	mov	r0, r4
   d8042:	f7fc f833 	bl	d40ac <__cxa_guard_release>
   d8046:	4805      	ldr	r0, [pc, #20]	; (d805c <_Z16_fetch_usbserialv+0x48>)
   d8048:	f000 fe92 	bl	d8d70 <atexit>
	return _usbserial;
}
   d804c:	4802      	ldr	r0, [pc, #8]	; (d8058 <_Z16_fetch_usbserialv+0x44>)
   d804e:	b008      	add	sp, #32
   d8050:	bd10      	pop	{r4, pc}
   d8052:	bf00      	nop
   d8054:	2003e710 	.word	0x2003e710
   d8058:	2003e714 	.word	0x2003e714
   d805c:	000d7f51 	.word	0x000d7f51

000d8060 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8060:	2200      	movs	r2, #0
   d8062:	6840      	ldr	r0, [r0, #4]
   d8064:	4611      	mov	r1, r2
   d8066:	f7ff ba5d 	b.w	d7524 <network_ready>

000d806a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d806a:	2200      	movs	r2, #0
   d806c:	6840      	ldr	r0, [r0, #4]
   d806e:	4611      	mov	r1, r2
   d8070:	f7ff ba78 	b.w	d7564 <network_listening>

000d8074 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8074:	2200      	movs	r2, #0
   d8076:	6840      	ldr	r0, [r0, #4]
   d8078:	4611      	mov	r1, r2
   d807a:	f7ff ba83 	b.w	d7584 <network_get_listen_timeout>

000d807e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d807e:	6840      	ldr	r0, [r0, #4]
   d8080:	2200      	movs	r2, #0
   d8082:	f7ff ba77 	b.w	d7574 <network_set_listen_timeout>

000d8086 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8086:	6840      	ldr	r0, [r0, #4]
   d8088:	2200      	movs	r2, #0
   d808a:	f081 0101 	eor.w	r1, r1, #1
   d808e:	f7ff ba61 	b.w	d7554 <network_listen>

000d8092 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8092:	2300      	movs	r3, #0
   d8094:	6840      	ldr	r0, [r0, #4]
   d8096:	461a      	mov	r2, r3
   d8098:	4619      	mov	r1, r3
   d809a:	f7ff ba53 	b.w	d7544 <network_off>

000d809e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d809e:	2300      	movs	r3, #0
   d80a0:	6840      	ldr	r0, [r0, #4]
   d80a2:	461a      	mov	r2, r3
   d80a4:	4619      	mov	r1, r3
   d80a6:	f7ff ba45 	b.w	d7534 <network_on>

000d80aa <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d80aa:	2200      	movs	r2, #0
   d80ac:	6840      	ldr	r0, [r0, #4]
   d80ae:	4611      	mov	r1, r2
   d80b0:	f7ff ba28 	b.w	d7504 <network_connecting>

000d80b4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d80b4:	6840      	ldr	r0, [r0, #4]
   d80b6:	2200      	movs	r2, #0
   d80b8:	2102      	movs	r1, #2
   d80ba:	f7ff ba2b 	b.w	d7514 <network_disconnect>

000d80be <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d80be:	2300      	movs	r3, #0
   d80c0:	6840      	ldr	r0, [r0, #4]
   d80c2:	461a      	mov	r2, r3
   d80c4:	f7ff ba16 	b.w	d74f4 <network_connect>

000d80c8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d80c8:	4b02      	ldr	r3, [pc, #8]	; (d80d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d80ca:	2204      	movs	r2, #4
   d80cc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d80ce:	4a02      	ldr	r2, [pc, #8]	; (d80d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d80d0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d80d2:	4770      	bx	lr
   d80d4:	2003e728 	.word	0x2003e728
   d80d8:	000d9380 	.word	0x000d9380

000d80dc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d80dc:	4b01      	ldr	r3, [pc, #4]	; (d80e4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d80de:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d80e0:	4770      	bx	lr
   d80e2:	bf00      	nop
   d80e4:	2003e038 	.word	0x2003e038

000d80e8 <serialEventRun>:
{
   d80e8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d80ea:	4b0b      	ldr	r3, [pc, #44]	; (d8118 <serialEventRun+0x30>)
   d80ec:	b143      	cbz	r3, d8100 <serialEventRun+0x18>
   d80ee:	f7ff ff91 	bl	d8014 <_Z16_fetch_usbserialv>
   d80f2:	6803      	ldr	r3, [r0, #0]
   d80f4:	691b      	ldr	r3, [r3, #16]
   d80f6:	4798      	blx	r3
   d80f8:	2800      	cmp	r0, #0
   d80fa:	dd01      	ble.n	d8100 <serialEventRun+0x18>
        serialEvent();
   d80fc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d8100:	4b06      	ldr	r3, [pc, #24]	; (d811c <serialEventRun+0x34>)
   d8102:	b143      	cbz	r3, d8116 <serialEventRun+0x2e>
   d8104:	f7ff fefc 	bl	d7f00 <_Z22__fetch_global_Serial1v>
   d8108:	6803      	ldr	r3, [r0, #0]
   d810a:	691b      	ldr	r3, [r3, #16]
   d810c:	4798      	blx	r3
   d810e:	2800      	cmp	r0, #0
   d8110:	dd01      	ble.n	d8116 <serialEventRun+0x2e>
        serialEvent1();
   d8112:	f3af 8000 	nop.w
}
   d8116:	bd08      	pop	{r3, pc}
	...

000d8120 <_post_loop>:
{
   d8120:	b508      	push	{r3, lr}
	serialEventRun();
   d8122:	f7ff ffe1 	bl	d80e8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8126:	f7ff f849 	bl	d71bc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d812a:	4b01      	ldr	r3, [pc, #4]	; (d8130 <_post_loop+0x10>)
   d812c:	6018      	str	r0, [r3, #0]
}
   d812e:	bd08      	pop	{r3, pc}
   d8130:	2003e738 	.word	0x2003e738

000d8134 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8134:	4805      	ldr	r0, [pc, #20]	; (d814c <_Z33system_initialize_user_backup_ramv+0x18>)
   d8136:	4a06      	ldr	r2, [pc, #24]	; (d8150 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d8138:	4906      	ldr	r1, [pc, #24]	; (d8154 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d813a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d813c:	1a12      	subs	r2, r2, r0
   d813e:	f000 fe2b 	bl	d8d98 <memcpy>
    __backup_sram_signature = signature;
   d8142:	4b05      	ldr	r3, [pc, #20]	; (d8158 <_Z33system_initialize_user_backup_ramv+0x24>)
   d8144:	4a05      	ldr	r2, [pc, #20]	; (d815c <_Z33system_initialize_user_backup_ramv+0x28>)
   d8146:	601a      	str	r2, [r3, #0]
}
   d8148:	bd08      	pop	{r3, pc}
   d814a:	bf00      	nop
   d814c:	2003f400 	.word	0x2003f400
   d8150:	2003f404 	.word	0x2003f404
   d8154:	000d93e0 	.word	0x000d93e0
   d8158:	2003f400 	.word	0x2003f400
   d815c:	9a271c1e 	.word	0x9a271c1e

000d8160 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8160:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8162:	2300      	movs	r3, #0
   d8164:	9300      	str	r3, [sp, #0]
   d8166:	461a      	mov	r2, r3
   d8168:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d816c:	f7ff f9a8 	bl	d74c0 <system_ctrl_set_result>
}
   d8170:	b003      	add	sp, #12
   d8172:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8178 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d8178:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d817a:	8843      	ldrh	r3, [r0, #2]
   d817c:	2b0a      	cmp	r3, #10
   d817e:	d008      	beq.n	d8192 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8180:	2b50      	cmp	r3, #80	; 0x50
   d8182:	d10b      	bne.n	d819c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d8184:	4b09      	ldr	r3, [pc, #36]	; (d81ac <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8186:	681b      	ldr	r3, [r3, #0]
   d8188:	b14b      	cbz	r3, d819e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d818a:	b003      	add	sp, #12
   d818c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d8190:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d8192:	f7ff ffe5 	bl	d8160 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d8196:	b003      	add	sp, #12
   d8198:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d819c:	2300      	movs	r3, #0
   d819e:	9300      	str	r3, [sp, #0]
   d81a0:	461a      	mov	r2, r3
   d81a2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d81a6:	f7ff f98b 	bl	d74c0 <system_ctrl_set_result>
}
   d81aa:	e7f4      	b.n	d8196 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d81ac:	2003e734 	.word	0x2003e734

000d81b0 <module_user_init_hook>:
{
   d81b0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d81b2:	4812      	ldr	r0, [pc, #72]	; (d81fc <module_user_init_hook+0x4c>)
   d81b4:	2100      	movs	r1, #0
   d81b6:	f7ff fa15 	bl	d75e4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d81ba:	4b11      	ldr	r3, [pc, #68]	; (d8200 <module_user_init_hook+0x50>)
   d81bc:	681a      	ldr	r2, [r3, #0]
   d81be:	4b11      	ldr	r3, [pc, #68]	; (d8204 <module_user_init_hook+0x54>)
   d81c0:	429a      	cmp	r2, r3
   d81c2:	4b11      	ldr	r3, [pc, #68]	; (d8208 <module_user_init_hook+0x58>)
   d81c4:	bf0c      	ite	eq
   d81c6:	2201      	moveq	r2, #1
   d81c8:	2200      	movne	r2, #0
   d81ca:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d81cc:	d001      	beq.n	d81d2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d81ce:	f7ff ffb1 	bl	d8134 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d81d2:	f7fe ffdb 	bl	d718c <HAL_RNG_GetRandomNumber>
   d81d6:	4604      	mov	r4, r0
    srand(seed);
   d81d8:	f000 fdf4 	bl	d8dc4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d81dc:	4b0b      	ldr	r3, [pc, #44]	; (d820c <module_user_init_hook+0x5c>)
   d81de:	b113      	cbz	r3, d81e6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d81e0:	4620      	mov	r0, r4
   d81e2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d81e6:	2100      	movs	r1, #0
   d81e8:	4808      	ldr	r0, [pc, #32]	; (d820c <module_user_init_hook+0x5c>)
   d81ea:	f7ff f97b 	bl	d74e4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d81ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d81f2:	4807      	ldr	r0, [pc, #28]	; (d8210 <module_user_init_hook+0x60>)
   d81f4:	2100      	movs	r1, #0
   d81f6:	f7ff b959 	b.w	d74ac <system_ctrl_set_app_request_handler>
   d81fa:	bf00      	nop
   d81fc:	000d80dd 	.word	0x000d80dd
   d8200:	2003f400 	.word	0x2003f400
   d8204:	9a271c1e 	.word	0x9a271c1e
   d8208:	2003e730 	.word	0x2003e730
   d820c:	00000000 	.word	0x00000000
   d8210:	000d8179 	.word	0x000d8179

000d8214 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d8214:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d8216:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d8218:	d902      	bls.n	d8220 <pinAvailable+0xc>
    return false;
   d821a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d821c:	b002      	add	sp, #8
   d821e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d8220:	f1a0 030b 	sub.w	r3, r0, #11
   d8224:	2b02      	cmp	r3, #2
   d8226:	d81a      	bhi.n	d825e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8228:	4c17      	ldr	r4, [pc, #92]	; (d8288 <pinAvailable+0x74>)
   d822a:	7821      	ldrb	r1, [r4, #0]
   d822c:	f3bf 8f5b 	dmb	ish
   d8230:	f011 0101 	ands.w	r1, r1, #1
   d8234:	d10b      	bne.n	d824e <pinAvailable+0x3a>
   d8236:	4620      	mov	r0, r4
   d8238:	9101      	str	r1, [sp, #4]
   d823a:	f7fb ff32 	bl	d40a2 <__cxa_guard_acquire>
   d823e:	9901      	ldr	r1, [sp, #4]
   d8240:	b128      	cbz	r0, d824e <pinAvailable+0x3a>
   d8242:	4812      	ldr	r0, [pc, #72]	; (d828c <pinAvailable+0x78>)
   d8244:	f7ff fd30 	bl	d7ca8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8248:	4620      	mov	r0, r4
   d824a:	f7fb ff2f 	bl	d40ac <__cxa_guard_release>
   d824e:	4b0f      	ldr	r3, [pc, #60]	; (d828c <pinAvailable+0x78>)
   d8250:	7818      	ldrb	r0, [r3, #0]
   d8252:	f7ff f85b 	bl	d730c <hal_spi_is_enabled>
   d8256:	2800      	cmp	r0, #0
   d8258:	d1df      	bne.n	d821a <pinAvailable+0x6>
  return true; // 'pin' is available
   d825a:	2001      	movs	r0, #1
   d825c:	e7de      	b.n	d821c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d825e:	2801      	cmp	r0, #1
   d8260:	d809      	bhi.n	d8276 <pinAvailable+0x62>
   d8262:	f000 f859 	bl	d8318 <_Z19__fetch_global_Wirev>
   d8266:	2100      	movs	r1, #0
   d8268:	7c00      	ldrb	r0, [r0, #16]
   d826a:	f7ff f807 	bl	d727c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d826e:	f080 0001 	eor.w	r0, r0, #1
   d8272:	b2c0      	uxtb	r0, r0
   d8274:	e7d2      	b.n	d821c <pinAvailable+0x8>
   d8276:	3809      	subs	r0, #9
   d8278:	2801      	cmp	r0, #1
   d827a:	d8ee      	bhi.n	d825a <pinAvailable+0x46>
   d827c:	f7ff fe40 	bl	d7f00 <_Z22__fetch_global_Serial1v>
   d8280:	7c00      	ldrb	r0, [r0, #16]
   d8282:	f7ff f8ab 	bl	d73dc <hal_usart_is_enabled>
   d8286:	e7f2      	b.n	d826e <pinAvailable+0x5a>
   d8288:	2003e0a0 	.word	0x2003e0a0
   d828c:	2003e0a4 	.word	0x2003e0a4

000d8290 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8290:	2823      	cmp	r0, #35	; 0x23
{
   d8292:	b538      	push	{r3, r4, r5, lr}
   d8294:	4604      	mov	r4, r0
   d8296:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8298:	d80a      	bhi.n	d82b0 <pinMode+0x20>
   d829a:	29ff      	cmp	r1, #255	; 0xff
   d829c:	d008      	beq.n	d82b0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d829e:	f7ff ffb9 	bl	d8214 <pinAvailable>
   d82a2:	b128      	cbz	r0, d82b0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d82a4:	4629      	mov	r1, r5
   d82a6:	4620      	mov	r0, r4
}
   d82a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d82ac:	f7fe bf8e 	b.w	d71cc <HAL_Pin_Mode>
}
   d82b0:	bd38      	pop	{r3, r4, r5, pc}

000d82b2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d82b2:	b538      	push	{r3, r4, r5, lr}
   d82b4:	4604      	mov	r4, r0
   d82b6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d82b8:	f7fe ff90 	bl	d71dc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d82bc:	28ff      	cmp	r0, #255	; 0xff
   d82be:	d010      	beq.n	d82e2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d82c0:	2806      	cmp	r0, #6
   d82c2:	d804      	bhi.n	d82ce <digitalWrite+0x1c>
   d82c4:	234d      	movs	r3, #77	; 0x4d
   d82c6:	fa23 f000 	lsr.w	r0, r3, r0
   d82ca:	07c3      	lsls	r3, r0, #31
   d82cc:	d409      	bmi.n	d82e2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d82ce:	4620      	mov	r0, r4
   d82d0:	f7ff ffa0 	bl	d8214 <pinAvailable>
   d82d4:	b128      	cbz	r0, d82e2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d82d6:	4629      	mov	r1, r5
   d82d8:	4620      	mov	r0, r4
}
   d82da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d82de:	f7fe bf85 	b.w	d71ec <HAL_GPIO_Write>
}
   d82e2:	bd38      	pop	{r3, r4, r5, pc}

000d82e4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d82e4:	4770      	bx	lr
	...

000d82e8 <_Z17acquireWireBufferv>:
{
   d82e8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d82ea:	2300      	movs	r3, #0
   d82ec:	2520      	movs	r5, #32
   d82ee:	8043      	strh	r3, [r0, #2]
   d82f0:	2314      	movs	r3, #20
{
   d82f2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d82f4:	8003      	strh	r3, [r0, #0]
   d82f6:	6085      	str	r5, [r0, #8]
   d82f8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d82fa:	4906      	ldr	r1, [pc, #24]	; (d8314 <_Z17acquireWireBufferv+0x2c>)
   d82fc:	4628      	mov	r0, r5
   d82fe:	f000 f831 	bl	d8364 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8302:	4904      	ldr	r1, [pc, #16]	; (d8314 <_Z17acquireWireBufferv+0x2c>)
	};
   d8304:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8306:	4628      	mov	r0, r5
   d8308:	f000 f82c 	bl	d8364 <_ZnajRKSt9nothrow_t>
	};
   d830c:	60e0      	str	r0, [r4, #12]
}
   d830e:	4620      	mov	r0, r4
   d8310:	bd38      	pop	{r3, r4, r5, pc}
   d8312:	bf00      	nop
   d8314:	000d93b4 	.word	0x000d93b4

000d8318 <_Z19__fetch_global_Wirev>:
{
   d8318:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d831a:	4d0e      	ldr	r5, [pc, #56]	; (d8354 <_Z19__fetch_global_Wirev+0x3c>)
   d831c:	7829      	ldrb	r1, [r5, #0]
   d831e:	f3bf 8f5b 	dmb	ish
   d8322:	f011 0401 	ands.w	r4, r1, #1
{
   d8326:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8328:	d111      	bne.n	d834e <_Z19__fetch_global_Wirev+0x36>
   d832a:	4628      	mov	r0, r5
   d832c:	f7fb feb9 	bl	d40a2 <__cxa_guard_acquire>
   d8330:	b168      	cbz	r0, d834e <_Z19__fetch_global_Wirev+0x36>
   d8332:	a801      	add	r0, sp, #4
   d8334:	f7ff ffd8 	bl	d82e8 <_Z17acquireWireBufferv>
   d8338:	aa01      	add	r2, sp, #4
   d833a:	4621      	mov	r1, r4
   d833c:	4806      	ldr	r0, [pc, #24]	; (d8358 <_Z19__fetch_global_Wirev+0x40>)
   d833e:	f7ff f9cf 	bl	d76e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d8342:	4628      	mov	r0, r5
   d8344:	f7fb feb2 	bl	d40ac <__cxa_guard_release>
   d8348:	4804      	ldr	r0, [pc, #16]	; (d835c <_Z19__fetch_global_Wirev+0x44>)
   d834a:	f000 fd11 	bl	d8d70 <atexit>
	return wire;
}
   d834e:	4802      	ldr	r0, [pc, #8]	; (d8358 <_Z19__fetch_global_Wirev+0x40>)
   d8350:	b007      	add	sp, #28
   d8352:	bd30      	pop	{r4, r5, pc}
   d8354:	2003e73c 	.word	0x2003e73c
   d8358:	2003e740 	.word	0x2003e740
   d835c:	000d82e5 	.word	0x000d82e5

000d8360 <_ZdlPvj>:
   d8360:	f7fb be9d 	b.w	d409e <_ZdlPv>

000d8364 <_ZnajRKSt9nothrow_t>:
   d8364:	f7fb be99 	b.w	d409a <_Znaj>

000d8368 <__aeabi_drsub>:
   d8368:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d836c:	e002      	b.n	d8374 <__adddf3>
   d836e:	bf00      	nop

000d8370 <__aeabi_dsub>:
   d8370:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8374 <__adddf3>:
   d8374:	b530      	push	{r4, r5, lr}
   d8376:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d837a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d837e:	ea94 0f05 	teq	r4, r5
   d8382:	bf08      	it	eq
   d8384:	ea90 0f02 	teqeq	r0, r2
   d8388:	bf1f      	itttt	ne
   d838a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d838e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8392:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8396:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d839a:	f000 80e2 	beq.w	d8562 <__adddf3+0x1ee>
   d839e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d83a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d83a6:	bfb8      	it	lt
   d83a8:	426d      	neglt	r5, r5
   d83aa:	dd0c      	ble.n	d83c6 <__adddf3+0x52>
   d83ac:	442c      	add	r4, r5
   d83ae:	ea80 0202 	eor.w	r2, r0, r2
   d83b2:	ea81 0303 	eor.w	r3, r1, r3
   d83b6:	ea82 0000 	eor.w	r0, r2, r0
   d83ba:	ea83 0101 	eor.w	r1, r3, r1
   d83be:	ea80 0202 	eor.w	r2, r0, r2
   d83c2:	ea81 0303 	eor.w	r3, r1, r3
   d83c6:	2d36      	cmp	r5, #54	; 0x36
   d83c8:	bf88      	it	hi
   d83ca:	bd30      	pophi	{r4, r5, pc}
   d83cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d83d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d83d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d83d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d83dc:	d002      	beq.n	d83e4 <__adddf3+0x70>
   d83de:	4240      	negs	r0, r0
   d83e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d83e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d83e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d83ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d83f0:	d002      	beq.n	d83f8 <__adddf3+0x84>
   d83f2:	4252      	negs	r2, r2
   d83f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d83f8:	ea94 0f05 	teq	r4, r5
   d83fc:	f000 80a7 	beq.w	d854e <__adddf3+0x1da>
   d8400:	f1a4 0401 	sub.w	r4, r4, #1
   d8404:	f1d5 0e20 	rsbs	lr, r5, #32
   d8408:	db0d      	blt.n	d8426 <__adddf3+0xb2>
   d840a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d840e:	fa22 f205 	lsr.w	r2, r2, r5
   d8412:	1880      	adds	r0, r0, r2
   d8414:	f141 0100 	adc.w	r1, r1, #0
   d8418:	fa03 f20e 	lsl.w	r2, r3, lr
   d841c:	1880      	adds	r0, r0, r2
   d841e:	fa43 f305 	asr.w	r3, r3, r5
   d8422:	4159      	adcs	r1, r3
   d8424:	e00e      	b.n	d8444 <__adddf3+0xd0>
   d8426:	f1a5 0520 	sub.w	r5, r5, #32
   d842a:	f10e 0e20 	add.w	lr, lr, #32
   d842e:	2a01      	cmp	r2, #1
   d8430:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8434:	bf28      	it	cs
   d8436:	f04c 0c02 	orrcs.w	ip, ip, #2
   d843a:	fa43 f305 	asr.w	r3, r3, r5
   d843e:	18c0      	adds	r0, r0, r3
   d8440:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8448:	d507      	bpl.n	d845a <__adddf3+0xe6>
   d844a:	f04f 0e00 	mov.w	lr, #0
   d844e:	f1dc 0c00 	rsbs	ip, ip, #0
   d8452:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8456:	eb6e 0101 	sbc.w	r1, lr, r1
   d845a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d845e:	d31b      	bcc.n	d8498 <__adddf3+0x124>
   d8460:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8464:	d30c      	bcc.n	d8480 <__adddf3+0x10c>
   d8466:	0849      	lsrs	r1, r1, #1
   d8468:	ea5f 0030 	movs.w	r0, r0, rrx
   d846c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8470:	f104 0401 	add.w	r4, r4, #1
   d8474:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8478:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d847c:	f080 809a 	bcs.w	d85b4 <__adddf3+0x240>
   d8480:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8484:	bf08      	it	eq
   d8486:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d848a:	f150 0000 	adcs.w	r0, r0, #0
   d848e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8492:	ea41 0105 	orr.w	r1, r1, r5
   d8496:	bd30      	pop	{r4, r5, pc}
   d8498:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d849c:	4140      	adcs	r0, r0
   d849e:	eb41 0101 	adc.w	r1, r1, r1
   d84a2:	3c01      	subs	r4, #1
   d84a4:	bf28      	it	cs
   d84a6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d84aa:	d2e9      	bcs.n	d8480 <__adddf3+0x10c>
   d84ac:	f091 0f00 	teq	r1, #0
   d84b0:	bf04      	itt	eq
   d84b2:	4601      	moveq	r1, r0
   d84b4:	2000      	moveq	r0, #0
   d84b6:	fab1 f381 	clz	r3, r1
   d84ba:	bf08      	it	eq
   d84bc:	3320      	addeq	r3, #32
   d84be:	f1a3 030b 	sub.w	r3, r3, #11
   d84c2:	f1b3 0220 	subs.w	r2, r3, #32
   d84c6:	da0c      	bge.n	d84e2 <__adddf3+0x16e>
   d84c8:	320c      	adds	r2, #12
   d84ca:	dd08      	ble.n	d84de <__adddf3+0x16a>
   d84cc:	f102 0c14 	add.w	ip, r2, #20
   d84d0:	f1c2 020c 	rsb	r2, r2, #12
   d84d4:	fa01 f00c 	lsl.w	r0, r1, ip
   d84d8:	fa21 f102 	lsr.w	r1, r1, r2
   d84dc:	e00c      	b.n	d84f8 <__adddf3+0x184>
   d84de:	f102 0214 	add.w	r2, r2, #20
   d84e2:	bfd8      	it	le
   d84e4:	f1c2 0c20 	rsble	ip, r2, #32
   d84e8:	fa01 f102 	lsl.w	r1, r1, r2
   d84ec:	fa20 fc0c 	lsr.w	ip, r0, ip
   d84f0:	bfdc      	itt	le
   d84f2:	ea41 010c 	orrle.w	r1, r1, ip
   d84f6:	4090      	lslle	r0, r2
   d84f8:	1ae4      	subs	r4, r4, r3
   d84fa:	bfa2      	ittt	ge
   d84fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8500:	4329      	orrge	r1, r5
   d8502:	bd30      	popge	{r4, r5, pc}
   d8504:	ea6f 0404 	mvn.w	r4, r4
   d8508:	3c1f      	subs	r4, #31
   d850a:	da1c      	bge.n	d8546 <__adddf3+0x1d2>
   d850c:	340c      	adds	r4, #12
   d850e:	dc0e      	bgt.n	d852e <__adddf3+0x1ba>
   d8510:	f104 0414 	add.w	r4, r4, #20
   d8514:	f1c4 0220 	rsb	r2, r4, #32
   d8518:	fa20 f004 	lsr.w	r0, r0, r4
   d851c:	fa01 f302 	lsl.w	r3, r1, r2
   d8520:	ea40 0003 	orr.w	r0, r0, r3
   d8524:	fa21 f304 	lsr.w	r3, r1, r4
   d8528:	ea45 0103 	orr.w	r1, r5, r3
   d852c:	bd30      	pop	{r4, r5, pc}
   d852e:	f1c4 040c 	rsb	r4, r4, #12
   d8532:	f1c4 0220 	rsb	r2, r4, #32
   d8536:	fa20 f002 	lsr.w	r0, r0, r2
   d853a:	fa01 f304 	lsl.w	r3, r1, r4
   d853e:	ea40 0003 	orr.w	r0, r0, r3
   d8542:	4629      	mov	r1, r5
   d8544:	bd30      	pop	{r4, r5, pc}
   d8546:	fa21 f004 	lsr.w	r0, r1, r4
   d854a:	4629      	mov	r1, r5
   d854c:	bd30      	pop	{r4, r5, pc}
   d854e:	f094 0f00 	teq	r4, #0
   d8552:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8556:	bf06      	itte	eq
   d8558:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d855c:	3401      	addeq	r4, #1
   d855e:	3d01      	subne	r5, #1
   d8560:	e74e      	b.n	d8400 <__adddf3+0x8c>
   d8562:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8566:	bf18      	it	ne
   d8568:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d856c:	d029      	beq.n	d85c2 <__adddf3+0x24e>
   d856e:	ea94 0f05 	teq	r4, r5
   d8572:	bf08      	it	eq
   d8574:	ea90 0f02 	teqeq	r0, r2
   d8578:	d005      	beq.n	d8586 <__adddf3+0x212>
   d857a:	ea54 0c00 	orrs.w	ip, r4, r0
   d857e:	bf04      	itt	eq
   d8580:	4619      	moveq	r1, r3
   d8582:	4610      	moveq	r0, r2
   d8584:	bd30      	pop	{r4, r5, pc}
   d8586:	ea91 0f03 	teq	r1, r3
   d858a:	bf1e      	ittt	ne
   d858c:	2100      	movne	r1, #0
   d858e:	2000      	movne	r0, #0
   d8590:	bd30      	popne	{r4, r5, pc}
   d8592:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8596:	d105      	bne.n	d85a4 <__adddf3+0x230>
   d8598:	0040      	lsls	r0, r0, #1
   d859a:	4149      	adcs	r1, r1
   d859c:	bf28      	it	cs
   d859e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d85a2:	bd30      	pop	{r4, r5, pc}
   d85a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d85a8:	bf3c      	itt	cc
   d85aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d85ae:	bd30      	popcc	{r4, r5, pc}
   d85b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d85b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d85b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d85bc:	f04f 0000 	mov.w	r0, #0
   d85c0:	bd30      	pop	{r4, r5, pc}
   d85c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d85c6:	bf1a      	itte	ne
   d85c8:	4619      	movne	r1, r3
   d85ca:	4610      	movne	r0, r2
   d85cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d85d0:	bf1c      	itt	ne
   d85d2:	460b      	movne	r3, r1
   d85d4:	4602      	movne	r2, r0
   d85d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d85da:	bf06      	itte	eq
   d85dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d85e0:	ea91 0f03 	teqeq	r1, r3
   d85e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d85e8:	bd30      	pop	{r4, r5, pc}
   d85ea:	bf00      	nop

000d85ec <__aeabi_ui2d>:
   d85ec:	f090 0f00 	teq	r0, #0
   d85f0:	bf04      	itt	eq
   d85f2:	2100      	moveq	r1, #0
   d85f4:	4770      	bxeq	lr
   d85f6:	b530      	push	{r4, r5, lr}
   d85f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d85fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8600:	f04f 0500 	mov.w	r5, #0
   d8604:	f04f 0100 	mov.w	r1, #0
   d8608:	e750      	b.n	d84ac <__adddf3+0x138>
   d860a:	bf00      	nop

000d860c <__aeabi_i2d>:
   d860c:	f090 0f00 	teq	r0, #0
   d8610:	bf04      	itt	eq
   d8612:	2100      	moveq	r1, #0
   d8614:	4770      	bxeq	lr
   d8616:	b530      	push	{r4, r5, lr}
   d8618:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d861c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8620:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8624:	bf48      	it	mi
   d8626:	4240      	negmi	r0, r0
   d8628:	f04f 0100 	mov.w	r1, #0
   d862c:	e73e      	b.n	d84ac <__adddf3+0x138>
   d862e:	bf00      	nop

000d8630 <__aeabi_f2d>:
   d8630:	0042      	lsls	r2, r0, #1
   d8632:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8636:	ea4f 0131 	mov.w	r1, r1, rrx
   d863a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d863e:	bf1f      	itttt	ne
   d8640:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8644:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8648:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d864c:	4770      	bxne	lr
   d864e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d8652:	bf08      	it	eq
   d8654:	4770      	bxeq	lr
   d8656:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d865a:	bf04      	itt	eq
   d865c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8660:	4770      	bxeq	lr
   d8662:	b530      	push	{r4, r5, lr}
   d8664:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8668:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d866c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8670:	e71c      	b.n	d84ac <__adddf3+0x138>
   d8672:	bf00      	nop

000d8674 <__aeabi_ul2d>:
   d8674:	ea50 0201 	orrs.w	r2, r0, r1
   d8678:	bf08      	it	eq
   d867a:	4770      	bxeq	lr
   d867c:	b530      	push	{r4, r5, lr}
   d867e:	f04f 0500 	mov.w	r5, #0
   d8682:	e00a      	b.n	d869a <__aeabi_l2d+0x16>

000d8684 <__aeabi_l2d>:
   d8684:	ea50 0201 	orrs.w	r2, r0, r1
   d8688:	bf08      	it	eq
   d868a:	4770      	bxeq	lr
   d868c:	b530      	push	{r4, r5, lr}
   d868e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8692:	d502      	bpl.n	d869a <__aeabi_l2d+0x16>
   d8694:	4240      	negs	r0, r0
   d8696:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d869a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d869e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d86a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d86a6:	f43f aed8 	beq.w	d845a <__adddf3+0xe6>
   d86aa:	f04f 0203 	mov.w	r2, #3
   d86ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d86b2:	bf18      	it	ne
   d86b4:	3203      	addne	r2, #3
   d86b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d86ba:	bf18      	it	ne
   d86bc:	3203      	addne	r2, #3
   d86be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d86c2:	f1c2 0320 	rsb	r3, r2, #32
   d86c6:	fa00 fc03 	lsl.w	ip, r0, r3
   d86ca:	fa20 f002 	lsr.w	r0, r0, r2
   d86ce:	fa01 fe03 	lsl.w	lr, r1, r3
   d86d2:	ea40 000e 	orr.w	r0, r0, lr
   d86d6:	fa21 f102 	lsr.w	r1, r1, r2
   d86da:	4414      	add	r4, r2
   d86dc:	e6bd      	b.n	d845a <__adddf3+0xe6>
   d86de:	bf00      	nop

000d86e0 <__aeabi_dmul>:
   d86e0:	b570      	push	{r4, r5, r6, lr}
   d86e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d86e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d86ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d86ee:	bf1d      	ittte	ne
   d86f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d86f4:	ea94 0f0c 	teqne	r4, ip
   d86f8:	ea95 0f0c 	teqne	r5, ip
   d86fc:	f000 f8de 	bleq	d88bc <__aeabi_dmul+0x1dc>
   d8700:	442c      	add	r4, r5
   d8702:	ea81 0603 	eor.w	r6, r1, r3
   d8706:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d870a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d870e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8712:	bf18      	it	ne
   d8714:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8718:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d871c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8720:	d038      	beq.n	d8794 <__aeabi_dmul+0xb4>
   d8722:	fba0 ce02 	umull	ip, lr, r0, r2
   d8726:	f04f 0500 	mov.w	r5, #0
   d872a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d872e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8732:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8736:	f04f 0600 	mov.w	r6, #0
   d873a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d873e:	f09c 0f00 	teq	ip, #0
   d8742:	bf18      	it	ne
   d8744:	f04e 0e01 	orrne.w	lr, lr, #1
   d8748:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d874c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8750:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8754:	d204      	bcs.n	d8760 <__aeabi_dmul+0x80>
   d8756:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d875a:	416d      	adcs	r5, r5
   d875c:	eb46 0606 	adc.w	r6, r6, r6
   d8760:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8764:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8768:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d876c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8770:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8774:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8778:	bf88      	it	hi
   d877a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d877e:	d81e      	bhi.n	d87be <__aeabi_dmul+0xde>
   d8780:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8784:	bf08      	it	eq
   d8786:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d878a:	f150 0000 	adcs.w	r0, r0, #0
   d878e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8792:	bd70      	pop	{r4, r5, r6, pc}
   d8794:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8798:	ea46 0101 	orr.w	r1, r6, r1
   d879c:	ea40 0002 	orr.w	r0, r0, r2
   d87a0:	ea81 0103 	eor.w	r1, r1, r3
   d87a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d87a8:	bfc2      	ittt	gt
   d87aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   d87ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d87b2:	bd70      	popgt	{r4, r5, r6, pc}
   d87b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d87b8:	f04f 0e00 	mov.w	lr, #0
   d87bc:	3c01      	subs	r4, #1
   d87be:	f300 80ab 	bgt.w	d8918 <__aeabi_dmul+0x238>
   d87c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d87c6:	bfde      	ittt	le
   d87c8:	2000      	movle	r0, #0
   d87ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d87ce:	bd70      	pople	{r4, r5, r6, pc}
   d87d0:	f1c4 0400 	rsb	r4, r4, #0
   d87d4:	3c20      	subs	r4, #32
   d87d6:	da35      	bge.n	d8844 <__aeabi_dmul+0x164>
   d87d8:	340c      	adds	r4, #12
   d87da:	dc1b      	bgt.n	d8814 <__aeabi_dmul+0x134>
   d87dc:	f104 0414 	add.w	r4, r4, #20
   d87e0:	f1c4 0520 	rsb	r5, r4, #32
   d87e4:	fa00 f305 	lsl.w	r3, r0, r5
   d87e8:	fa20 f004 	lsr.w	r0, r0, r4
   d87ec:	fa01 f205 	lsl.w	r2, r1, r5
   d87f0:	ea40 0002 	orr.w	r0, r0, r2
   d87f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d87f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d87fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8800:	fa21 f604 	lsr.w	r6, r1, r4
   d8804:	eb42 0106 	adc.w	r1, r2, r6
   d8808:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d880c:	bf08      	it	eq
   d880e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8812:	bd70      	pop	{r4, r5, r6, pc}
   d8814:	f1c4 040c 	rsb	r4, r4, #12
   d8818:	f1c4 0520 	rsb	r5, r4, #32
   d881c:	fa00 f304 	lsl.w	r3, r0, r4
   d8820:	fa20 f005 	lsr.w	r0, r0, r5
   d8824:	fa01 f204 	lsl.w	r2, r1, r4
   d8828:	ea40 0002 	orr.w	r0, r0, r2
   d882c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8830:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8834:	f141 0100 	adc.w	r1, r1, #0
   d8838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d883c:	bf08      	it	eq
   d883e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8842:	bd70      	pop	{r4, r5, r6, pc}
   d8844:	f1c4 0520 	rsb	r5, r4, #32
   d8848:	fa00 f205 	lsl.w	r2, r0, r5
   d884c:	ea4e 0e02 	orr.w	lr, lr, r2
   d8850:	fa20 f304 	lsr.w	r3, r0, r4
   d8854:	fa01 f205 	lsl.w	r2, r1, r5
   d8858:	ea43 0302 	orr.w	r3, r3, r2
   d885c:	fa21 f004 	lsr.w	r0, r1, r4
   d8860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8864:	fa21 f204 	lsr.w	r2, r1, r4
   d8868:	ea20 0002 	bic.w	r0, r0, r2
   d886c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8874:	bf08      	it	eq
   d8876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d887a:	bd70      	pop	{r4, r5, r6, pc}
   d887c:	f094 0f00 	teq	r4, #0
   d8880:	d10f      	bne.n	d88a2 <__aeabi_dmul+0x1c2>
   d8882:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8886:	0040      	lsls	r0, r0, #1
   d8888:	eb41 0101 	adc.w	r1, r1, r1
   d888c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8890:	bf08      	it	eq
   d8892:	3c01      	subeq	r4, #1
   d8894:	d0f7      	beq.n	d8886 <__aeabi_dmul+0x1a6>
   d8896:	ea41 0106 	orr.w	r1, r1, r6
   d889a:	f095 0f00 	teq	r5, #0
   d889e:	bf18      	it	ne
   d88a0:	4770      	bxne	lr
   d88a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d88a6:	0052      	lsls	r2, r2, #1
   d88a8:	eb43 0303 	adc.w	r3, r3, r3
   d88ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d88b0:	bf08      	it	eq
   d88b2:	3d01      	subeq	r5, #1
   d88b4:	d0f7      	beq.n	d88a6 <__aeabi_dmul+0x1c6>
   d88b6:	ea43 0306 	orr.w	r3, r3, r6
   d88ba:	4770      	bx	lr
   d88bc:	ea94 0f0c 	teq	r4, ip
   d88c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d88c4:	bf18      	it	ne
   d88c6:	ea95 0f0c 	teqne	r5, ip
   d88ca:	d00c      	beq.n	d88e6 <__aeabi_dmul+0x206>
   d88cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d88d0:	bf18      	it	ne
   d88d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d88d6:	d1d1      	bne.n	d887c <__aeabi_dmul+0x19c>
   d88d8:	ea81 0103 	eor.w	r1, r1, r3
   d88dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d88e0:	f04f 0000 	mov.w	r0, #0
   d88e4:	bd70      	pop	{r4, r5, r6, pc}
   d88e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d88ea:	bf06      	itte	eq
   d88ec:	4610      	moveq	r0, r2
   d88ee:	4619      	moveq	r1, r3
   d88f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d88f4:	d019      	beq.n	d892a <__aeabi_dmul+0x24a>
   d88f6:	ea94 0f0c 	teq	r4, ip
   d88fa:	d102      	bne.n	d8902 <__aeabi_dmul+0x222>
   d88fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8900:	d113      	bne.n	d892a <__aeabi_dmul+0x24a>
   d8902:	ea95 0f0c 	teq	r5, ip
   d8906:	d105      	bne.n	d8914 <__aeabi_dmul+0x234>
   d8908:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d890c:	bf1c      	itt	ne
   d890e:	4610      	movne	r0, r2
   d8910:	4619      	movne	r1, r3
   d8912:	d10a      	bne.n	d892a <__aeabi_dmul+0x24a>
   d8914:	ea81 0103 	eor.w	r1, r1, r3
   d8918:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d891c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8920:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8924:	f04f 0000 	mov.w	r0, #0
   d8928:	bd70      	pop	{r4, r5, r6, pc}
   d892a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d892e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8932:	bd70      	pop	{r4, r5, r6, pc}

000d8934 <__aeabi_ddiv>:
   d8934:	b570      	push	{r4, r5, r6, lr}
   d8936:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d893a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d893e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8942:	bf1d      	ittte	ne
   d8944:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8948:	ea94 0f0c 	teqne	r4, ip
   d894c:	ea95 0f0c 	teqne	r5, ip
   d8950:	f000 f8a7 	bleq	d8aa2 <__aeabi_ddiv+0x16e>
   d8954:	eba4 0405 	sub.w	r4, r4, r5
   d8958:	ea81 0e03 	eor.w	lr, r1, r3
   d895c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8960:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8964:	f000 8088 	beq.w	d8a78 <__aeabi_ddiv+0x144>
   d8968:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d896c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8970:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8974:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8978:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d897c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8980:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8984:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8988:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d898c:	429d      	cmp	r5, r3
   d898e:	bf08      	it	eq
   d8990:	4296      	cmpeq	r6, r2
   d8992:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8996:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d899a:	d202      	bcs.n	d89a2 <__aeabi_ddiv+0x6e>
   d899c:	085b      	lsrs	r3, r3, #1
   d899e:	ea4f 0232 	mov.w	r2, r2, rrx
   d89a2:	1ab6      	subs	r6, r6, r2
   d89a4:	eb65 0503 	sbc.w	r5, r5, r3
   d89a8:	085b      	lsrs	r3, r3, #1
   d89aa:	ea4f 0232 	mov.w	r2, r2, rrx
   d89ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d89b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d89b6:	ebb6 0e02 	subs.w	lr, r6, r2
   d89ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   d89be:	bf22      	ittt	cs
   d89c0:	1ab6      	subcs	r6, r6, r2
   d89c2:	4675      	movcs	r5, lr
   d89c4:	ea40 000c 	orrcs.w	r0, r0, ip
   d89c8:	085b      	lsrs	r3, r3, #1
   d89ca:	ea4f 0232 	mov.w	r2, r2, rrx
   d89ce:	ebb6 0e02 	subs.w	lr, r6, r2
   d89d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d89d6:	bf22      	ittt	cs
   d89d8:	1ab6      	subcs	r6, r6, r2
   d89da:	4675      	movcs	r5, lr
   d89dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d89e0:	085b      	lsrs	r3, r3, #1
   d89e2:	ea4f 0232 	mov.w	r2, r2, rrx
   d89e6:	ebb6 0e02 	subs.w	lr, r6, r2
   d89ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   d89ee:	bf22      	ittt	cs
   d89f0:	1ab6      	subcs	r6, r6, r2
   d89f2:	4675      	movcs	r5, lr
   d89f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d89f8:	085b      	lsrs	r3, r3, #1
   d89fa:	ea4f 0232 	mov.w	r2, r2, rrx
   d89fe:	ebb6 0e02 	subs.w	lr, r6, r2
   d8a02:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8a06:	bf22      	ittt	cs
   d8a08:	1ab6      	subcs	r6, r6, r2
   d8a0a:	4675      	movcs	r5, lr
   d8a0c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8a10:	ea55 0e06 	orrs.w	lr, r5, r6
   d8a14:	d018      	beq.n	d8a48 <__aeabi_ddiv+0x114>
   d8a16:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8a1a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8a1e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8a22:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8a26:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8a2a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8a2e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8a32:	d1c0      	bne.n	d89b6 <__aeabi_ddiv+0x82>
   d8a34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8a38:	d10b      	bne.n	d8a52 <__aeabi_ddiv+0x11e>
   d8a3a:	ea41 0100 	orr.w	r1, r1, r0
   d8a3e:	f04f 0000 	mov.w	r0, #0
   d8a42:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8a46:	e7b6      	b.n	d89b6 <__aeabi_ddiv+0x82>
   d8a48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8a4c:	bf04      	itt	eq
   d8a4e:	4301      	orreq	r1, r0
   d8a50:	2000      	moveq	r0, #0
   d8a52:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8a56:	bf88      	it	hi
   d8a58:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8a5c:	f63f aeaf 	bhi.w	d87be <__aeabi_dmul+0xde>
   d8a60:	ebb5 0c03 	subs.w	ip, r5, r3
   d8a64:	bf04      	itt	eq
   d8a66:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8a6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8a6e:	f150 0000 	adcs.w	r0, r0, #0
   d8a72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8a76:	bd70      	pop	{r4, r5, r6, pc}
   d8a78:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8a7c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8a80:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8a84:	bfc2      	ittt	gt
   d8a86:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8a8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8a8e:	bd70      	popgt	{r4, r5, r6, pc}
   d8a90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8a94:	f04f 0e00 	mov.w	lr, #0
   d8a98:	3c01      	subs	r4, #1
   d8a9a:	e690      	b.n	d87be <__aeabi_dmul+0xde>
   d8a9c:	ea45 0e06 	orr.w	lr, r5, r6
   d8aa0:	e68d      	b.n	d87be <__aeabi_dmul+0xde>
   d8aa2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8aa6:	ea94 0f0c 	teq	r4, ip
   d8aaa:	bf08      	it	eq
   d8aac:	ea95 0f0c 	teqeq	r5, ip
   d8ab0:	f43f af3b 	beq.w	d892a <__aeabi_dmul+0x24a>
   d8ab4:	ea94 0f0c 	teq	r4, ip
   d8ab8:	d10a      	bne.n	d8ad0 <__aeabi_ddiv+0x19c>
   d8aba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8abe:	f47f af34 	bne.w	d892a <__aeabi_dmul+0x24a>
   d8ac2:	ea95 0f0c 	teq	r5, ip
   d8ac6:	f47f af25 	bne.w	d8914 <__aeabi_dmul+0x234>
   d8aca:	4610      	mov	r0, r2
   d8acc:	4619      	mov	r1, r3
   d8ace:	e72c      	b.n	d892a <__aeabi_dmul+0x24a>
   d8ad0:	ea95 0f0c 	teq	r5, ip
   d8ad4:	d106      	bne.n	d8ae4 <__aeabi_ddiv+0x1b0>
   d8ad6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8ada:	f43f aefd 	beq.w	d88d8 <__aeabi_dmul+0x1f8>
   d8ade:	4610      	mov	r0, r2
   d8ae0:	4619      	mov	r1, r3
   d8ae2:	e722      	b.n	d892a <__aeabi_dmul+0x24a>
   d8ae4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8ae8:	bf18      	it	ne
   d8aea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8aee:	f47f aec5 	bne.w	d887c <__aeabi_dmul+0x19c>
   d8af2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8af6:	f47f af0d 	bne.w	d8914 <__aeabi_dmul+0x234>
   d8afa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8afe:	f47f aeeb 	bne.w	d88d8 <__aeabi_dmul+0x1f8>
   d8b02:	e712      	b.n	d892a <__aeabi_dmul+0x24a>

000d8b04 <__gedf2>:
   d8b04:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8b08:	e006      	b.n	d8b18 <__cmpdf2+0x4>
   d8b0a:	bf00      	nop

000d8b0c <__ledf2>:
   d8b0c:	f04f 0c01 	mov.w	ip, #1
   d8b10:	e002      	b.n	d8b18 <__cmpdf2+0x4>
   d8b12:	bf00      	nop

000d8b14 <__cmpdf2>:
   d8b14:	f04f 0c01 	mov.w	ip, #1
   d8b18:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8b24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8b28:	bf18      	it	ne
   d8b2a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8b2e:	d01b      	beq.n	d8b68 <__cmpdf2+0x54>
   d8b30:	b001      	add	sp, #4
   d8b32:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8b36:	bf0c      	ite	eq
   d8b38:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8b3c:	ea91 0f03 	teqne	r1, r3
   d8b40:	bf02      	ittt	eq
   d8b42:	ea90 0f02 	teqeq	r0, r2
   d8b46:	2000      	moveq	r0, #0
   d8b48:	4770      	bxeq	lr
   d8b4a:	f110 0f00 	cmn.w	r0, #0
   d8b4e:	ea91 0f03 	teq	r1, r3
   d8b52:	bf58      	it	pl
   d8b54:	4299      	cmppl	r1, r3
   d8b56:	bf08      	it	eq
   d8b58:	4290      	cmpeq	r0, r2
   d8b5a:	bf2c      	ite	cs
   d8b5c:	17d8      	asrcs	r0, r3, #31
   d8b5e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8b62:	f040 0001 	orr.w	r0, r0, #1
   d8b66:	4770      	bx	lr
   d8b68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8b6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8b70:	d102      	bne.n	d8b78 <__cmpdf2+0x64>
   d8b72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8b76:	d107      	bne.n	d8b88 <__cmpdf2+0x74>
   d8b78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8b7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8b80:	d1d6      	bne.n	d8b30 <__cmpdf2+0x1c>
   d8b82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8b86:	d0d3      	beq.n	d8b30 <__cmpdf2+0x1c>
   d8b88:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8b8c:	4770      	bx	lr
   d8b8e:	bf00      	nop

000d8b90 <__aeabi_cdrcmple>:
   d8b90:	4684      	mov	ip, r0
   d8b92:	4610      	mov	r0, r2
   d8b94:	4662      	mov	r2, ip
   d8b96:	468c      	mov	ip, r1
   d8b98:	4619      	mov	r1, r3
   d8b9a:	4663      	mov	r3, ip
   d8b9c:	e000      	b.n	d8ba0 <__aeabi_cdcmpeq>
   d8b9e:	bf00      	nop

000d8ba0 <__aeabi_cdcmpeq>:
   d8ba0:	b501      	push	{r0, lr}
   d8ba2:	f7ff ffb7 	bl	d8b14 <__cmpdf2>
   d8ba6:	2800      	cmp	r0, #0
   d8ba8:	bf48      	it	mi
   d8baa:	f110 0f00 	cmnmi.w	r0, #0
   d8bae:	bd01      	pop	{r0, pc}

000d8bb0 <__aeabi_dcmpeq>:
   d8bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8bb4:	f7ff fff4 	bl	d8ba0 <__aeabi_cdcmpeq>
   d8bb8:	bf0c      	ite	eq
   d8bba:	2001      	moveq	r0, #1
   d8bbc:	2000      	movne	r0, #0
   d8bbe:	f85d fb08 	ldr.w	pc, [sp], #8
   d8bc2:	bf00      	nop

000d8bc4 <__aeabi_dcmplt>:
   d8bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8bc8:	f7ff ffea 	bl	d8ba0 <__aeabi_cdcmpeq>
   d8bcc:	bf34      	ite	cc
   d8bce:	2001      	movcc	r0, #1
   d8bd0:	2000      	movcs	r0, #0
   d8bd2:	f85d fb08 	ldr.w	pc, [sp], #8
   d8bd6:	bf00      	nop

000d8bd8 <__aeabi_dcmple>:
   d8bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8bdc:	f7ff ffe0 	bl	d8ba0 <__aeabi_cdcmpeq>
   d8be0:	bf94      	ite	ls
   d8be2:	2001      	movls	r0, #1
   d8be4:	2000      	movhi	r0, #0
   d8be6:	f85d fb08 	ldr.w	pc, [sp], #8
   d8bea:	bf00      	nop

000d8bec <__aeabi_dcmpge>:
   d8bec:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8bf0:	f7ff ffce 	bl	d8b90 <__aeabi_cdrcmple>
   d8bf4:	bf94      	ite	ls
   d8bf6:	2001      	movls	r0, #1
   d8bf8:	2000      	movhi	r0, #0
   d8bfa:	f85d fb08 	ldr.w	pc, [sp], #8
   d8bfe:	bf00      	nop

000d8c00 <__aeabi_dcmpgt>:
   d8c00:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8c04:	f7ff ffc4 	bl	d8b90 <__aeabi_cdrcmple>
   d8c08:	bf34      	ite	cc
   d8c0a:	2001      	movcc	r0, #1
   d8c0c:	2000      	movcs	r0, #0
   d8c0e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8c12:	bf00      	nop

000d8c14 <__aeabi_dcmpun>:
   d8c14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8c18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8c1c:	d102      	bne.n	d8c24 <__aeabi_dcmpun+0x10>
   d8c1e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8c22:	d10a      	bne.n	d8c3a <__aeabi_dcmpun+0x26>
   d8c24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8c28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8c2c:	d102      	bne.n	d8c34 <__aeabi_dcmpun+0x20>
   d8c2e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8c32:	d102      	bne.n	d8c3a <__aeabi_dcmpun+0x26>
   d8c34:	f04f 0000 	mov.w	r0, #0
   d8c38:	4770      	bx	lr
   d8c3a:	f04f 0001 	mov.w	r0, #1
   d8c3e:	4770      	bx	lr

000d8c40 <__aeabi_d2iz>:
   d8c40:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8c44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8c48:	d215      	bcs.n	d8c76 <__aeabi_d2iz+0x36>
   d8c4a:	d511      	bpl.n	d8c70 <__aeabi_d2iz+0x30>
   d8c4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8c50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8c54:	d912      	bls.n	d8c7c <__aeabi_d2iz+0x3c>
   d8c56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8c5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8c5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8c62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8c66:	fa23 f002 	lsr.w	r0, r3, r2
   d8c6a:	bf18      	it	ne
   d8c6c:	4240      	negne	r0, r0
   d8c6e:	4770      	bx	lr
   d8c70:	f04f 0000 	mov.w	r0, #0
   d8c74:	4770      	bx	lr
   d8c76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8c7a:	d105      	bne.n	d8c88 <__aeabi_d2iz+0x48>
   d8c7c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8c80:	bf08      	it	eq
   d8c82:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8c86:	4770      	bx	lr
   d8c88:	f04f 0000 	mov.w	r0, #0
   d8c8c:	4770      	bx	lr
   d8c8e:	bf00      	nop

000d8c90 <__aeabi_d2uiz>:
   d8c90:	004a      	lsls	r2, r1, #1
   d8c92:	d211      	bcs.n	d8cb8 <__aeabi_d2uiz+0x28>
   d8c94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8c98:	d211      	bcs.n	d8cbe <__aeabi_d2uiz+0x2e>
   d8c9a:	d50d      	bpl.n	d8cb8 <__aeabi_d2uiz+0x28>
   d8c9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8ca0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8ca4:	d40e      	bmi.n	d8cc4 <__aeabi_d2uiz+0x34>
   d8ca6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8caa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8cae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8cb2:	fa23 f002 	lsr.w	r0, r3, r2
   d8cb6:	4770      	bx	lr
   d8cb8:	f04f 0000 	mov.w	r0, #0
   d8cbc:	4770      	bx	lr
   d8cbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8cc2:	d102      	bne.n	d8cca <__aeabi_d2uiz+0x3a>
   d8cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8cc8:	4770      	bx	lr
   d8cca:	f04f 0000 	mov.w	r0, #0
   d8cce:	4770      	bx	lr

000d8cd0 <__aeabi_d2f>:
   d8cd0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8cd4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8cd8:	bf24      	itt	cs
   d8cda:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8cde:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8ce2:	d90d      	bls.n	d8d00 <__aeabi_d2f+0x30>
   d8ce4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8ce8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8cec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8cf0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8cf4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8cf8:	bf08      	it	eq
   d8cfa:	f020 0001 	biceq.w	r0, r0, #1
   d8cfe:	4770      	bx	lr
   d8d00:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8d04:	d121      	bne.n	d8d4a <__aeabi_d2f+0x7a>
   d8d06:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8d0a:	bfbc      	itt	lt
   d8d0c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8d10:	4770      	bxlt	lr
   d8d12:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8d16:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8d1a:	f1c2 0218 	rsb	r2, r2, #24
   d8d1e:	f1c2 0c20 	rsb	ip, r2, #32
   d8d22:	fa10 f30c 	lsls.w	r3, r0, ip
   d8d26:	fa20 f002 	lsr.w	r0, r0, r2
   d8d2a:	bf18      	it	ne
   d8d2c:	f040 0001 	orrne.w	r0, r0, #1
   d8d30:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8d34:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8d38:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8d3c:	ea40 000c 	orr.w	r0, r0, ip
   d8d40:	fa23 f302 	lsr.w	r3, r3, r2
   d8d44:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8d48:	e7cc      	b.n	d8ce4 <__aeabi_d2f+0x14>
   d8d4a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8d4e:	d107      	bne.n	d8d60 <__aeabi_d2f+0x90>
   d8d50:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8d54:	bf1e      	ittt	ne
   d8d56:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8d5a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8d5e:	4770      	bxne	lr
   d8d60:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8d64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8d68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8d6c:	4770      	bx	lr
   d8d6e:	bf00      	nop

000d8d70 <atexit>:
   d8d70:	2300      	movs	r3, #0
   d8d72:	4601      	mov	r1, r0
   d8d74:	461a      	mov	r2, r3
   d8d76:	4618      	mov	r0, r3
   d8d78:	f000 b850 	b.w	d8e1c <__register_exitproc>

000d8d7c <memcmp>:
   d8d7c:	b530      	push	{r4, r5, lr}
   d8d7e:	3901      	subs	r1, #1
   d8d80:	2400      	movs	r4, #0
   d8d82:	42a2      	cmp	r2, r4
   d8d84:	d101      	bne.n	d8d8a <memcmp+0xe>
   d8d86:	2000      	movs	r0, #0
   d8d88:	e005      	b.n	d8d96 <memcmp+0x1a>
   d8d8a:	5d03      	ldrb	r3, [r0, r4]
   d8d8c:	3401      	adds	r4, #1
   d8d8e:	5d0d      	ldrb	r5, [r1, r4]
   d8d90:	42ab      	cmp	r3, r5
   d8d92:	d0f6      	beq.n	d8d82 <memcmp+0x6>
   d8d94:	1b58      	subs	r0, r3, r5
   d8d96:	bd30      	pop	{r4, r5, pc}

000d8d98 <memcpy>:
   d8d98:	440a      	add	r2, r1
   d8d9a:	4291      	cmp	r1, r2
   d8d9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8da0:	d100      	bne.n	d8da4 <memcpy+0xc>
   d8da2:	4770      	bx	lr
   d8da4:	b510      	push	{r4, lr}
   d8da6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8daa:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8dae:	4291      	cmp	r1, r2
   d8db0:	d1f9      	bne.n	d8da6 <memcpy+0xe>
   d8db2:	bd10      	pop	{r4, pc}

000d8db4 <memset>:
   d8db4:	4402      	add	r2, r0
   d8db6:	4603      	mov	r3, r0
   d8db8:	4293      	cmp	r3, r2
   d8dba:	d100      	bne.n	d8dbe <memset+0xa>
   d8dbc:	4770      	bx	lr
   d8dbe:	f803 1b01 	strb.w	r1, [r3], #1
   d8dc2:	e7f9      	b.n	d8db8 <memset+0x4>

000d8dc4 <srand>:
   d8dc4:	b538      	push	{r3, r4, r5, lr}
   d8dc6:	4b0d      	ldr	r3, [pc, #52]	; (d8dfc <srand+0x38>)
   d8dc8:	681d      	ldr	r5, [r3, #0]
   d8dca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8dcc:	4604      	mov	r4, r0
   d8dce:	b97b      	cbnz	r3, d8df0 <srand+0x2c>
   d8dd0:	2018      	movs	r0, #24
   d8dd2:	f7fe fbef 	bl	d75b4 <malloc>
   d8dd6:	4a0a      	ldr	r2, [pc, #40]	; (d8e00 <srand+0x3c>)
   d8dd8:	4b0a      	ldr	r3, [pc, #40]	; (d8e04 <srand+0x40>)
   d8dda:	63a8      	str	r0, [r5, #56]	; 0x38
   d8ddc:	e9c0 2300 	strd	r2, r3, [r0]
   d8de0:	4b09      	ldr	r3, [pc, #36]	; (d8e08 <srand+0x44>)
   d8de2:	6083      	str	r3, [r0, #8]
   d8de4:	230b      	movs	r3, #11
   d8de6:	8183      	strh	r3, [r0, #12]
   d8de8:	2201      	movs	r2, #1
   d8dea:	2300      	movs	r3, #0
   d8dec:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8df0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8df2:	2200      	movs	r2, #0
   d8df4:	611c      	str	r4, [r3, #16]
   d8df6:	615a      	str	r2, [r3, #20]
   d8df8:	bd38      	pop	{r3, r4, r5, pc}
   d8dfa:	bf00      	nop
   d8dfc:	2003e038 	.word	0x2003e038
   d8e00:	abcd330e 	.word	0xabcd330e
   d8e04:	e66d1234 	.word	0xe66d1234
   d8e08:	0005deec 	.word	0x0005deec

000d8e0c <strlen>:
   d8e0c:	4603      	mov	r3, r0
   d8e0e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8e12:	2a00      	cmp	r2, #0
   d8e14:	d1fb      	bne.n	d8e0e <strlen+0x2>
   d8e16:	1a18      	subs	r0, r3, r0
   d8e18:	3801      	subs	r0, #1
   d8e1a:	4770      	bx	lr

000d8e1c <__register_exitproc>:
   d8e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8e20:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d8edc <__register_exitproc+0xc0>
   d8e24:	4606      	mov	r6, r0
   d8e26:	f8d8 0000 	ldr.w	r0, [r8]
   d8e2a:	461f      	mov	r7, r3
   d8e2c:	460d      	mov	r5, r1
   d8e2e:	4691      	mov	r9, r2
   d8e30:	f000 f856 	bl	d8ee0 <__retarget_lock_acquire_recursive>
   d8e34:	4b25      	ldr	r3, [pc, #148]	; (d8ecc <__register_exitproc+0xb0>)
   d8e36:	681c      	ldr	r4, [r3, #0]
   d8e38:	b934      	cbnz	r4, d8e48 <__register_exitproc+0x2c>
   d8e3a:	4c25      	ldr	r4, [pc, #148]	; (d8ed0 <__register_exitproc+0xb4>)
   d8e3c:	601c      	str	r4, [r3, #0]
   d8e3e:	4b25      	ldr	r3, [pc, #148]	; (d8ed4 <__register_exitproc+0xb8>)
   d8e40:	b113      	cbz	r3, d8e48 <__register_exitproc+0x2c>
   d8e42:	681b      	ldr	r3, [r3, #0]
   d8e44:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d8e48:	6863      	ldr	r3, [r4, #4]
   d8e4a:	2b1f      	cmp	r3, #31
   d8e4c:	dd07      	ble.n	d8e5e <__register_exitproc+0x42>
   d8e4e:	f8d8 0000 	ldr.w	r0, [r8]
   d8e52:	f000 f847 	bl	d8ee4 <__retarget_lock_release_recursive>
   d8e56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8e5e:	b34e      	cbz	r6, d8eb4 <__register_exitproc+0x98>
   d8e60:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d8e64:	b988      	cbnz	r0, d8e8a <__register_exitproc+0x6e>
   d8e66:	4b1c      	ldr	r3, [pc, #112]	; (d8ed8 <__register_exitproc+0xbc>)
   d8e68:	b923      	cbnz	r3, d8e74 <__register_exitproc+0x58>
   d8e6a:	f8d8 0000 	ldr.w	r0, [r8]
   d8e6e:	f000 f838 	bl	d8ee2 <__retarget_lock_release>
   d8e72:	e7f0      	b.n	d8e56 <__register_exitproc+0x3a>
   d8e74:	f44f 7084 	mov.w	r0, #264	; 0x108
   d8e78:	f7fe fb9c 	bl	d75b4 <malloc>
   d8e7c:	2800      	cmp	r0, #0
   d8e7e:	d0f4      	beq.n	d8e6a <__register_exitproc+0x4e>
   d8e80:	2300      	movs	r3, #0
   d8e82:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d8e86:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d8e8a:	6863      	ldr	r3, [r4, #4]
   d8e8c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d8e90:	2201      	movs	r2, #1
   d8e92:	409a      	lsls	r2, r3
   d8e94:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d8e98:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d8e9c:	4313      	orrs	r3, r2
   d8e9e:	2e02      	cmp	r6, #2
   d8ea0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d8ea4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d8ea8:	bf02      	ittt	eq
   d8eaa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d8eae:	431a      	orreq	r2, r3
   d8eb0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d8eb4:	6863      	ldr	r3, [r4, #4]
   d8eb6:	f8d8 0000 	ldr.w	r0, [r8]
   d8eba:	1c5a      	adds	r2, r3, #1
   d8ebc:	3302      	adds	r3, #2
   d8ebe:	6062      	str	r2, [r4, #4]
   d8ec0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d8ec4:	f000 f80e 	bl	d8ee4 <__retarget_lock_release_recursive>
   d8ec8:	2000      	movs	r0, #0
   d8eca:	e7c6      	b.n	d8e5a <__register_exitproc+0x3e>
   d8ecc:	2003e7e0 	.word	0x2003e7e0
   d8ed0:	2003e754 	.word	0x2003e754
   d8ed4:	00000000 	.word	0x00000000
   d8ed8:	000d75b5 	.word	0x000d75b5
   d8edc:	2003e09c 	.word	0x2003e09c

000d8ee0 <__retarget_lock_acquire_recursive>:
   d8ee0:	4770      	bx	lr

000d8ee2 <__retarget_lock_release>:
   d8ee2:	4770      	bx	lr

000d8ee4 <__retarget_lock_release_recursive>:
   d8ee4:	4770      	bx	lr

000d8ee6 <link_code_end>:
	...

000d8ee8 <dynalib_user>:
   d8ee8:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d8ef8:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   d8f08:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   d8f18:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   d8f28:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   d8f38:	4f4d 4544 7525 003e 6f43 6c75 2064 6f6e     MODE%u>.Could no
   d8f48:	2074 6966 646e 4120 3753 3433 0031 6f43     t find AS7341.Co
   d8f58:	6c75 6e64 7427 6620 6e69 2064 5452 0043     uldn't find RTC.
   d8f68:	5452 2043 7369 4e20 544f 7220 6e75 696e     RTC is NOT runni
   d8f78:	676e 0021 5741 3539 3332 6e20 746f 6620     ng!.AW9523 not f
   d8f88:	756f 646e 203f 6843 6365 206b 6977 6972     ound? Check wiri
   d8f98:	676e 0021 5741 3539 3332 6620 756f 646e     ng!.AW9523 found
   d8fa8:	0021 6164 6174 632e 7673 4100 5453 5045     !.data.csv.ASTEP
   d8fb8:	003a 5441 4d49 3a45 4700 4941 204e 6328     :.ATIME:.GAIN (c
   d8fc8:	6568 6b63 7420 6261 656c 3a29 4c00 4445     heck table):.LED
   d8fd8:	4920 746e 6e65 6973 7974 442c 7461 2c65      Intensity,Date,
   d8fe8:	6954 656d 542c 7079 2c65 3146 2820 6142     Time,Type,F1 (Ba
   d8ff8:	6973 2963 462c 2032 4228 7361 6369 2c29     sic),F2 (Basic),
   d9008:	3346 2820 6142 6973 2963 462c 2034 4228     F3 (Basic),F4 (B
   d9018:	7361 6369 2c29 3546 2820 6142 6973 2963     asic),F5 (Basic)
   d9028:	462c 2036 4228 7361 6369 2c29 3746 2820     ,F6 (Basic),F7 (
   d9038:	6142 6973 2963 462c 2038 4228 7361 6369     Basic),F8 (Basic
   d9048:	2c29 6c43 6165 2072 4228 7361 6369 2c29     ),Clear (Basic),
   d9058:	494e 2052 4228 7361 6369 2c29 7954 6570     NIR (Basic),Type
   d9068:	462c 2031 5228 7761 2c29 3246 2820 6152     ,F1 (Raw),F2 (Ra
   d9078:	2977 462c 2033 5228 7761 2c29 3446 2820     w),F3 (Raw),F4 (
   d9088:	6152 2977 462c 2035 5228 7761 2c29 3646     Raw),F5 (Raw),F6
   d9098:	2820 6152 2977 462c 2037 5228 7761 2c29      (Raw),F7 (Raw),
   d90a8:	3846 2820 6152 2977 432c 656c 7261 2820     F8 (Raw),Clear (
   d90b8:	6152 2977 4e2c 5249 2820 6152 2977 4500     Raw),NIR (Raw).E
   d90c8:	7272 726f 6f20 6570 696e 676e 6620 6c69     rror opening fil
   d90d8:	2165 4c00 4445 4920 544e 4e45 4953 5954     e!.LED INTENSITY
   d90e8:	003a 2820 2900 0020 7245 6f72 2072 6572     :. (.) .Error re
   d90f8:	6461 6e69 2067 6c61 206c 6863 6e61 656e     ading all channe
   d9108:	736c 0021 3146 3420 3531 6d6e 3a20 0020     ls!.F1 415nm : .
   d9118:	2020 5200 7761 5620 6c61 6575 3a20 0020       .Raw Value : .
   d9128:	3246 3420 3534 6d6e 3a20 0020 3346 3420     F2 445nm : .F3 4
   d9138:	3038 6d6e 3a20 0020 3446 3520 3531 6d6e     80nm : .F4 515nm
   d9148:	3a20 0020 3546 3520 3535 6d6e 3a20 0020      : .F5 555nm : .
   d9158:	3646 3520 3039 6d6e 3a20 0020 3746 3620     F6 590nm : .F7 6
   d9168:	3033 6d6e 3a20 0020 3846 3620 3038 6d6e     30nm : .F8 680nm
   d9178:	3a20 0020 6c43 6165 2072 2020 3a20 0020      : .Clear    : .
   d9188:	494e 2052 2020 2020 3a20 0020 4142 4953     NIR      : .BASI
   d9198:	2043 4f43 4e55 5354 5200 5741 5620 4c41     C COUNTS.RAW VAL
   d91a8:	4555 0053                                   UES.

000d91ac <_ZTVN8particle11SPISettingsE>:
	...
   d91b4:	4155 000d 40b3 000d 40d1 000d               UA...@...@..

000d91c0 <_ZTV4File>:
	...
   d91c8:	40cf 000d 40df 000d 411f 000d 4119 000d     .@...@...A...A..
   d91d8:	40b5 000d 40f9 000d 40f3 000d 40ed 000d     .@...@...@...@..

000d91e8 <CSWTCH.61>:
   d91e8:	0000 3f00 0000 3f80 0000 4000 0000 4080     ...?...?...@...@
   d91f8:	0000 4100 0000 4180 0000 4200 0000 4280     ...A...A...B...B
   d9208:	0000 4300 0000 4380 0000 4400               ...C...C...D

000d9214 <_ZTV15Adafruit_AS7341>:
	...
   d921c:	4d69 000d                                   iM..

000d9220 <_ZL11daysInMonth>:
   d9220:	1c1f 1e1f 1e1f 1f1f 1f1e 1f1e               ............

000d922c <_ZTVN5spark13EthernetClassE>:
	...
   d9234:	766b 000d 7661 000d 7657 000d 764d 000d     kv..av..Wv..Mv..
   d9244:	7641 000d 7635 000d 78b9 000d 78c1 000d     Av..5v...x...x..
   d9254:	7629 000d 7621 000d 7617 000d 760d 000d     )v..!v...v...v..
   d9264:	78f1 000d                                   .x..

000d9268 <_ZTV7TwoWire>:
	...
   d9270:	7689 000d 76d3 000d 76ab 000d 768b 000d     .v...v...v...v..
   d9280:	76b3 000d 76bb 000d 76c3 000d 76cb 000d     .v...v...v...v..

000d9290 <_ZTV9IPAddress>:
	...
   d9298:	7795 000d 7785 000d 7787 000d 7061 0070     .w...w...w..app.

000d92a8 <_ZTVN5spark12NetworkClassE>:
	...
   d92b0:	7879 000d 7883 000d 788d 000d 7897 000d     yx...x...x...x..
   d92c0:	78a1 000d 78ad 000d 78b9 000d 78c1 000d     .x...x...x...x..
   d92d0:	78c9 000d 78d5 000d 78dd 000d 78e7 000d     .x...x...x...x..
   d92e0:	78f1 000d 616e 006e 6e69 0066 766f 0066     .x..nan.inf.ovf.
   d92f0:	002e                                        ..

000d92f2 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d92f2:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   d9302:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d9312:	6d69 0065 0000                              ime...

000d9318 <_ZTV11USARTSerial>:
	...
   d9320:	7e59 000d 7ec7 000d 7e9f 000d 79d9 000d     Y~...~...~...y..
   d9330:	7e6f 000d 7e8b 000d 7e7d 000d 7e99 000d     o~...~..}~...~..
   d9340:	7e5b 000d 7e61 000d                         [~..a~..

000d9348 <_ZTV9USBSerial>:
	...
   d9350:	7f53 000d 7fbb 000d 7f91 000d 79d9 000d     S............y..
   d9360:	7f83 000d 7f55 000d 7f65 000d 7fb5 000d     ....U...e.......
   d9370:	7f75 000d 7f4d 000d                         u...M...

000d9378 <_ZTVN5spark9WiFiClassE>:
	...
   d9380:	80bf 000d 80b5 000d 80ab 000d 8061 000d     ............a...
   d9390:	809f 000d 8093 000d 78b9 000d 78c1 000d     .........x...x..
   d93a0:	8087 000d 807f 000d 8075 000d 806b 000d     ........u...k...
   d93b0:	78f1 000d                                   .x..

000d93b4 <_ZSt7nothrow>:
	...

000d93b5 <link_const_variable_data_end>:
   d93b5:	00          	.byte	0x00
	...

000d93b8 <link_constructors_location>:
   d93b8:	000d4c25 	.word	0x000d4c25
   d93bc:	000d75fd 	.word	0x000d75fd
   d93c0:	000d7675 	.word	0x000d7675
   d93c4:	000d7869 	.word	0x000d7869
   d93c8:	000d79c5 	.word	0x000d79c5
   d93cc:	000d7c91 	.word	0x000d7c91
   d93d0:	000d7e21 	.word	0x000d7e21
   d93d4:	000d7e45 	.word	0x000d7e45
   d93d8:	000d80c9 	.word	0x000d80c9

000d93dc <link_constructors_end>:
   d93dc:	00000000 	.word	0x00000000
