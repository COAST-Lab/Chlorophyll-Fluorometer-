/*
 * Project chl_SD_CSV_RTC
 * Description:low-cost chlorophyll flourometer code. Prints to SD card in a .csv file and uses a RTC. This code can turn the LED on
 * and off for a certian ammount of time and print the status to the SD card. The LED light intensity can be held at a certian 
 * intensity and changed in the code. Average Lux measurements are also calculated.
 * Author: Jessie Wynne
 * Date: 07/26/2023
 */

// setup() runs once, when the device is first turned on.
#include "Adafruit_TSL2591.h"
#include <Adafruit_AW9523.h>
#include "RTClibrary.h"
// #include "Particle.h"
#include <SdFat.h>
#include <limits.h>
#include <numeric>

uint8_t LedPin = 0;
uint16_t ir = 0;
uint16_t full = 0;

RTC_PCF8523 rtc;

char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
const int maxMeasurements = 20;

Adafruit_AW9523 aw;
Adafruit_TSL2591 tsl = Adafruit_TSL2591(2591);

SdFat SD;
const int SD_CHIP_SELECT = D5;

double calculateAverage(double sum, int count) {
    if (count == 0) {
        return 0.0; // or any other value to indicate an error or no data
    }
    return sum / static_cast<double>(count);
}

bool startLogging = false;

SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);

void displaySensorDetails(void)
{
  sensor_t sensor;
  tsl.getSensor(&sensor);
  Serial.println(F("------------------------------------"));
  Serial.print(F("Sensor:       ")); Serial.println(sensor.name);
  Serial.print(F("Driver Ver:   ")); Serial.println(sensor.version);
  Serial.print(F("Unique ID:    ")); Serial.println(sensor.sensor_id);
  Serial.print(F("Max Value:    ")); Serial.print(sensor.max_value); Serial.println(F(" lux"));
  Serial.print(F("Min Value:    ")); Serial.print(sensor.min_value); Serial.println(F(" lux"));
  Serial.print(F("Resolution:   ")); Serial.print(sensor.resolution, 4); Serial.println(F(" lux"));  
  Serial.println(F("------------------------------------"));
  Serial.println(F(""));
  delay(500);
}

/**************************************************************************/
/*
    Configures the gain and integration time for the TSL2591
*/
/**************************************************************************/
void configureSensor(void)
{
  // You can change the gain on the fly, to adapt to brighter/dimmer light situations
  // tsl.setGain(TSL2591_GAIN_LOW);    // 1x gain (bright light)
  // tsl.setGain(TSL2591_GAIN_MED);      // 25x gain
  tsl.setGain(TSL2591_GAIN_HIGH);   // 428x gain
  // tsl.setGain(TSL2591_GAIN_MAX);      //9876x gain
  
  // Changing the integration time gives you a longer time over which to sense light
  // longer timelines are slower, but are good in very low light situtations!
  //tsl.setTiming(TSL2591_INTEGRATIONTIME_100MS);  // shortest integration time (bright light)
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_200MS);
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_300MS);
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_400MS);
  tsl.setTiming(TSL2591_INTEGRATIONTIME_500MS);
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_600MS);  // longest integration time (dim light)

  /* Display the gain and integration time for reference sake */  
  Serial.println(F("------------------------------------"));
  Serial.print  (F("Gain:         "));
  tsl2591Gain_t gain = tsl.getGain();
  switch(gain)
  {
    case TSL2591_GAIN_LOW: 
      Serial.println(F("1x (Low)"));
      break;
    case TSL2591_GAIN_MED:
      Serial.println(F("25x (Medium)"));
      break;
    case TSL2591_GAIN_HIGH:
      Serial.println(F("428x (High)"));
      break;
    case TSL2591_GAIN_MAX:
      Serial.println(F("9876x (Max)"));
      break;
  }
  Serial.print  (F("Timing:       "));
  Serial.print((tsl.getTiming() + 1) * 100 / 1000, DEC); 
  Serial.println(F(" s"));
  Serial.println(F("------------------------------------"));
  Serial.println(F(""));
}
void setup() {
  Serial.begin(9600);
  while (!Serial) {
    delay(1);
  }

  Wire.begin();

  if (tsl.begin()) {
    Serial.println(F("Found a TSL2591 sensor"));
    pinMode(LedPin, OUTPUT);
  } else {
    Serial.println(F("No sensor found... check your wiring?"));
    while (1);
  }
  delay(500);

  if (!aw.begin(0x58)) {
    Serial.println("AW9523 not found? Check wiring!");
    while (1) delay(10);
  }

  Serial.println("AW9523 found!");
  aw.pinMode(LedPin, AW9523_LED_MODE); // set to constant current drive!
  aw.analogWrite(LedPin, 100);
  delay(100);
  aw.analogWrite(LedPin, 0);

  if (!rtc.begin()) {
    Serial.println("Couldn't find RTC");
    while (1);
  }

  if (!rtc.initialized()) {
    Serial.println("RTC is NOT running!");
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }

  SD.begin(SD_CHIP_SELECT);

  Serial.println(F("Type 'startlogging' and press Enter to begin logging."));
}



void simpleRead(void)
{
  // Simple data read example. Just read the infrared, fullspecrtrum diode 
  // or 'visible' (difference between the two) channels.
  // This can take 100-600 milliseconds! Uncomment whichever of the following you want to read
  uint16_t x = tsl.getLuminosity(TSL2591_VISIBLE);
  //uint16_t x = tsl.getLuminosity(TSL2591_FULLSPECTRUM);
  //uint16_t x = tsl.getLuminosity(TSL2591_INFRARED);

  Serial.print(F("[ ")); Serial.print(millis() / 1000); Serial.print(F(" s ] "));
  Serial.print(F("Luminosity: "));
  Serial.println(x, DEC);
}


/**************************************************************************/
/*
    Show how to read IR and Full Spectrum at once and convert to lux
*/
/**************************************************************************/
void advancedRead(void) {
  uint32_t lum = tsl.getFullLuminosity();
  ir = lum >> 16;
  full = lum & 0xFFFF;
  Serial.print(F("[ ")); Serial.print(millis() / 1000); Serial.print(F(" s ] "));
  Serial.print(F("IR: ")); Serial.print(ir);  Serial.print(F("  "));
  Serial.print(F("Full: ")); Serial.print(full); Serial.print(F("  "));
  Serial.print(F("Visible: ")); Serial.print(full - ir); Serial.print(F("  "));
  Serial.print(F("Lux: ")); Serial.println(tsl.calculateLux(full, ir), 6);
}



//**************************************************************************/
///Performs a read using the Adafruit Unified Sensor API.
//**************************************************************************/
void unifiedSensorAPIRead(void)
{
  /* Get a new sensor event */ 
  sensors_event_t event;
  tsl.getEvent(&event);
 
  /* Display the results (light is measured in lux) */
  Serial.print(F("[ ")); Serial.print(event.timestamp); Serial.print(F(" ms ] "));
  if ((event.light == 0) |
      (event.light > 4294966000.0) | 
      (event.light <-4294966000.0))
  {
    /* If event.light = 0 lux the sensor is probably saturated */
    /* and no reliable data could be generated! */
    /* if event.light is +/- 4294967040 there was a float over/underflow */
    Serial.println(F("Invalid data (adjust gain or timing)"));
  }
  else
  {
    Serial.print(event.light); Serial.println(F(" lux"));
  }
}


void loop() {
  // if (Serial.available() > 0) {
  //   String command = Serial.readStringUntil('\n');
  //   if (command == "startlogging") {
  //     startLogging = true;
  //     Serial.println("Logging started!");
  //   }
  // }

  // if (!startLogging) {
  //   return; // Exit loop if logging is not started yet
  // }

  DateTime now = rtc.now();
  unsigned long currentTime = millis();  // Current time in milliseconds
  unsigned long onTime = 60000;  // One minute on time in milliseconds
  unsigned long offTime = 60000;  // One minute off time in milliseconds

  // Calculate the time elapsed since the start of the loop
  unsigned long elapsedTime = currentTime % (onTime + offTime);

  bool isLedOn = (elapsedTime < onTime);
  aw.analogWrite(LedPin, isLedOn ? 100 : 0); // Turn LED on or off
  delay(100); // Add a small delay to stabilize the LED current

  // Perform Lux measurements and accumulate Lux values for average calculation
  double sumLux = 0.0;
  for (int i = 0; i < maxMeasurements; i++) {
    advancedRead();
    sumLux += tsl.calculateLux(full, ir);
    delay(50);
  }

  // Calculate and print the average Lux
  double averageLux = calculateAverage(sumLux, maxMeasurements);
  Serial.print("Average Lux: ");
  Serial.println(averageLux);

  // Record Lux value to file (you can adjust the filename as needed)
  File file = SD.open("lux_values.csv", FILE_WRITE);
  if (file) {
    file.print(now.year(), DEC);
    file.print('/');
    file.print(now.month(), DEC);
    file.print('/');
    file.print(now.day(), DEC);
    file.print(" (");
    file.print(daysOfTheWeek[now.dayOfTheWeek()]);
    file.print(") ");
    file.print(now.hour(), DEC);
    file.print(':');
    file.print(now.minute(), DEC);
    file.print(':');
    file.print(now.second(), DEC);
    file.print(',');
    file.print(currentTime / 1000);
    file.print(',');
    file.print(ir);
    file.print(',');
    file.print(full);
    file.print(',');
    file.print(full - ir);
    file.print(',');
    file.print(tsl.calculateLux(full, ir));
    file.print(',');
    file.println(averageLux); // Add the averageLux value to the file
    file.close();
  } else {
    Serial.println(F("Error opening file!"));
  }
}
